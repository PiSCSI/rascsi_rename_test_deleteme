name: Build Bullseye C++ Packages

on: [push, pull_request]

jobs:
  build:
    runs-on: ubuntu-20.04

    steps:
    - uses: actions/checkout@v2

    - name: Add armhf as architecture
      run: sudo dpkg --add-architecture armhf

    - name: Reconfigure apt for arch amd64
      run: sudo sed -i "s/deb /deb [arch=amd64] /g" /etc/apt/sources.list

    - name: Add armhf repos (focal)
      run: sudo bash -c "echo \"deb [arch=armhf] http://ports.ubuntu.com/ubuntu-ports/ focal main multiverse restricted universe\" >> /etc/apt/sources.list"

    - name: Add armhf repos (focal-updates)
      run: sudo bash -c "echo \"deb [arch=armhf] http://ports.ubuntu.com/ubuntu-ports/ focal-updates main multiverse restricted universe\" >> /etc/apt/sources.list"

    - name: Update apt
      run: sudo apt update
      
      
    - name: Search evdev
      run: sudo apt search libevdev

#     - name: Install cross compile toolchain
#       run: sudo apt-get --yes install gcc-arm-linux-gnueabihf g++-arm-linux-gnueabihf binutils-arm-linux-gnueabihf libspdlog-dev
      
    - name: Install cross compile toolchain
      run: sudo apt-get install gcc-8-arm-linux-gnueabihf g++-8-arm-linux-gnueabihf binutils-arm-linux-gnueabihf libspdlog-dev
    
    - name: Install libraries libspdlog-dev
      run: sudo apt-get --yes install libspdlog-dev:armhf


    - name: Install libraries libpcap-dev
      run: sudo apt-get --yes install libspdlog-dev:armhf libpcap-dev:armhf 

    - name: Install libraries libevdev2
      run: sudo apt-get --yes install libspdlog-dev:armhf libpcap-dev:armhf libevdev2:armhf

    - name: Install libraries libev-dev
      run: sudo apt-get --yes install libspdlog-dev:armhf libpcap-dev:armhf libevdev2:armhf libev-dev:armhf

    - name: Install libraries protobuf-compiler
      run: sudo apt-get --yes install libspdlog-dev:armhf libpcap-dev:armhf libevdev2:armhf libev-dev:armhf protobuf-compiler

    - name: Install libraries libprotobuf-dev
      run: sudo apt-get --yes install libspdlog-dev:armhf libpcap-dev:armhf libevdev2:armhf libev-dev:armhf protobuf-compiler libprotobuf-dev:armhf 

    - name: dump arm gcc version
      run: arm-linux-gnueabihf-gcc -v
      working-directory: ./src/raspberrypi
 
    - name: dump native gcc version
      run: gcc -v
      working-directory: ./src/raspberrypi
 


#     - name: Dump gcc version
#       run: arm-linux-gnueabihf-gcc -dumpversion

#     - name: Echo Gt 10
#       run: echo $(shell expr `arm-linux-gnueabihf-gcc -dumpversion` \>= 10)

    - name: make standard
      run: make all -j6 CONNECT_TYPE=STANDARD CROSS_COMPILE=arm-linux-gnueabihf-
      working-directory: ./src/raspberrypi
 
    - name: make fullspec
      run: make all -j6 CONNECT_TYPE=FULLSPEC CROSS_COMPILE=arm-linux-gnueabihf-
      working-directory: ./src/raspberrypi

    # We need to tar the binary outputs to retain the executable
    # file permission. Currently, actions/upload-artifact only
    # supports .ZIP files.
    # This is workaround for https://github.com/actions/upload-artifact/issues/38
    - name: tar binary outputs
      run: tar -czvf rascsi.tar.gz ./bin
      working-directory: ./src/raspberrypi

    - name: upload artifacts
      uses: actions/upload-artifact@v2
      with:
        name: bullseye-arm-binaries
        path: ./src/raspberrypi/rascsi.tar.gz
