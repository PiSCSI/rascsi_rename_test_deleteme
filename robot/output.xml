<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 3.2.1 (Python 3.8.2 on linux)" generated="20200909 22:59:53.699" rpa="false">
<suite id="s1" name="Robot" source="/home/akuker/RASCSI/test/robot">
<suite id="s1-s1" name="Rascsi Cd-Rom Functionality" source="/home/akuker/RASCSI/test/robot/rascsi_cd-rom_functionality.robot">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Open Connection to Rascsi and Log In</arg>
<arg>AND</arg>
<arg>The Rascsi Service is Started</arg>
<arg>AND</arg>
<arg>The RaSCSI Service Should be Running</arg>
<arg>AND</arg>
<arg>Detach all RaSCSI SCSI Devices</arg>
</arguments>
<kw name="Open Connection to Rascsi and Log In" library="rascsi_utils">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${Rascsi_Host}</arg>
</arguments>
<status status="PASS" starttime="20200909 22:59:53.853" endtime="20200909 22:59:53.854"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given ``username`` and ``password``.</doc>
<arguments>
<arg>${Rascsi_Username}</arg>
<arg>${Rascsi_Password}</arg>
</arguments>
<msg timestamp="20200909 22:59:53.854" level="INFO">Logging into 'rascsi.local:22' as 'pi'.</msg>
<msg timestamp="20200909 22:59:55.409" level="INFO">Read output: Linux rascsi 4.19.118-v7+ #1311 SMP Mon Apr 27 14:21:24 BST 2020 armv7l

The programs included with the Debian GNU/Linux system are free software;
the exact distribution terms for each program are described in the
individual files in /usr/share/doc/*/copyright.

Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent
permitted by applicable law.
Last login: Wed Sep  9 22:58:23 2020 from 192.168.68.156

SSH is enabled and the default password for the 'pi' user has not been changed.
This is a security risk - please login as the 'pi' user and type 'passwd' to set a new password.


Wi-Fi is currently blocked by rfkill.
Use raspi-config to set the country before use.

pi@rascsi:~$</msg>
<status status="PASS" starttime="20200909 22:59:53.854" endtime="20200909 22:59:55.410"></status>
</kw>
<status status="PASS" starttime="20200909 22:59:53.853" endtime="20200909 22:59:55.410"></status>
</kw>
<kw name="The Rascsi Service is Started" library="linux_services">
<kw name="Convert To Lower Case" library="String">
<doc>Converts string to lower case.</doc>
<arguments>
<arg>${service_name}</arg>
</arguments>
<assign>
<var>${lc_service_name}</var>
</assign>
<msg timestamp="20200909 22:59:55.412" level="INFO">${lc_service_name} = rascsi</msg>
<status status="PASS" starttime="20200909 22:59:55.411" endtime="20200909 22:59:55.412"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>systemctl start ${lc_service_name}</arg>
<arg>sudo=True</arg>
<arg>sudo_password=${Rascsi_Password}</arg>
</arguments>
<msg timestamp="20200909 22:59:55.413" level="INFO">Executing command 'sudo systemctl start rascsi'.</msg>
<msg timestamp="20200909 22:59:55.747" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" starttime="20200909 22:59:55.412" endtime="20200909 22:59:55.748"></status>
</kw>
<status status="PASS" starttime="20200909 22:59:55.410" endtime="20200909 22:59:55.748"></status>
</kw>
<kw name="The RaSCSI Service Should be Running" library="linux_services">
<kw name="Convert To Lower Case" library="String">
<doc>Converts string to lower case.</doc>
<arguments>
<arg>${service_name}</arg>
</arguments>
<assign>
<var>${lc_service_name}</var>
</assign>
<msg timestamp="20200909 22:59:55.749" level="INFO">${lc_service_name} = rascsi</msg>
<status status="PASS" starttime="20200909 22:59:55.749" endtime="20200909 22:59:55.749"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>systemctl status ${lc_service_name}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20200909 22:59:55.750" level="INFO">Executing command 'systemctl status rascsi'.</msg>
<msg timestamp="20200909 22:59:55.853" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20200909 22:59:55.853" level="INFO">${output} = ‚óè rascsi.service - RaSCSI service
   Loaded: loaded (/etc/systemd/system/rascsi.service; enabled; vendor preset: enabled)
   Active: active (running) since Wed 2020-09-09 22:58:23 CDT; 1min 32s ago
 M...</msg>
<status status="PASS" starttime="20200909 22:59:55.750" endtime="20200909 22:59:55.853"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>Active: active (running)</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" starttime="20200909 22:59:55.853" endtime="20200909 22:59:55.854"></status>
</kw>
<status status="PASS" starttime="20200909 22:59:55.748" endtime="20200909 22:59:55.854"></status>
</kw>
<kw name="Detach all RaSCSI SCSI Devices" library="rascsi_utils">
<doc>Send detach commands for all of the SCSI IDs to make sure that there
aren't any left over before/after a test</doc>
<kw name="${scsi_id} IN RANGE [ 0 | 7 ]" type="for">
<kw name="${scsi_id} = 0" type="foritem">
<kw name="Detach RaSCSI SCSI ID ${scsi_id}" library="rascsi_utils">
<doc>Detaches the specified SCSI ID from Rascsi</doc>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rasctl -c detach -i ${scsi_id}</arg>
</arguments>
<msg timestamp="20200909 22:59:55.857" level="INFO">Executing command 'rasctl -c detach -i 0'.</msg>
<msg timestamp="20200909 22:59:55.922" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" starttime="20200909 22:59:55.856" endtime="20200909 22:59:55.922"></status>
</kw>
<status status="PASS" starttime="20200909 22:59:55.856" endtime="20200909 22:59:55.923"></status>
</kw>
<status status="PASS" starttime="20200909 22:59:55.855" endtime="20200909 22:59:55.923"></status>
</kw>
<kw name="${scsi_id} = 1" type="foritem">
<kw name="Detach RaSCSI SCSI ID ${scsi_id}" library="rascsi_utils">
<doc>Detaches the specified SCSI ID from Rascsi</doc>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rasctl -c detach -i ${scsi_id}</arg>
</arguments>
<msg timestamp="20200909 22:59:55.924" level="INFO">Executing command 'rasctl -c detach -i 1'.</msg>
<msg timestamp="20200909 22:59:55.992" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" starttime="20200909 22:59:55.924" endtime="20200909 22:59:55.992"></status>
</kw>
<status status="PASS" starttime="20200909 22:59:55.923" endtime="20200909 22:59:55.993"></status>
</kw>
<status status="PASS" starttime="20200909 22:59:55.923" endtime="20200909 22:59:55.993"></status>
</kw>
<kw name="${scsi_id} = 2" type="foritem">
<kw name="Detach RaSCSI SCSI ID ${scsi_id}" library="rascsi_utils">
<doc>Detaches the specified SCSI ID from Rascsi</doc>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rasctl -c detach -i ${scsi_id}</arg>
</arguments>
<msg timestamp="20200909 22:59:55.994" level="INFO">Executing command 'rasctl -c detach -i 2'.</msg>
<msg timestamp="20200909 22:59:56.062" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" starttime="20200909 22:59:55.994" endtime="20200909 22:59:56.062"></status>
</kw>
<status status="PASS" starttime="20200909 22:59:55.993" endtime="20200909 22:59:56.063"></status>
</kw>
<status status="PASS" starttime="20200909 22:59:55.993" endtime="20200909 22:59:56.063"></status>
</kw>
<kw name="${scsi_id} = 3" type="foritem">
<kw name="Detach RaSCSI SCSI ID ${scsi_id}" library="rascsi_utils">
<doc>Detaches the specified SCSI ID from Rascsi</doc>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rasctl -c detach -i ${scsi_id}</arg>
</arguments>
<msg timestamp="20200909 22:59:56.064" level="INFO">Executing command 'rasctl -c detach -i 3'.</msg>
<msg timestamp="20200909 22:59:56.132" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" starttime="20200909 22:59:56.064" endtime="20200909 22:59:56.132"></status>
</kw>
<status status="PASS" starttime="20200909 22:59:56.063" endtime="20200909 22:59:56.133"></status>
</kw>
<status status="PASS" starttime="20200909 22:59:56.063" endtime="20200909 22:59:56.133"></status>
</kw>
<kw name="${scsi_id} = 4" type="foritem">
<kw name="Detach RaSCSI SCSI ID ${scsi_id}" library="rascsi_utils">
<doc>Detaches the specified SCSI ID from Rascsi</doc>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rasctl -c detach -i ${scsi_id}</arg>
</arguments>
<msg timestamp="20200909 22:59:56.134" level="INFO">Executing command 'rasctl -c detach -i 4'.</msg>
<msg timestamp="20200909 22:59:56.202" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" starttime="20200909 22:59:56.134" endtime="20200909 22:59:56.202"></status>
</kw>
<status status="PASS" starttime="20200909 22:59:56.133" endtime="20200909 22:59:56.203"></status>
</kw>
<status status="PASS" starttime="20200909 22:59:56.133" endtime="20200909 22:59:56.203"></status>
</kw>
<kw name="${scsi_id} = 5" type="foritem">
<kw name="Detach RaSCSI SCSI ID ${scsi_id}" library="rascsi_utils">
<doc>Detaches the specified SCSI ID from Rascsi</doc>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rasctl -c detach -i ${scsi_id}</arg>
</arguments>
<msg timestamp="20200909 22:59:56.204" level="INFO">Executing command 'rasctl -c detach -i 5'.</msg>
<msg timestamp="20200909 22:59:56.272" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" starttime="20200909 22:59:56.204" endtime="20200909 22:59:56.272"></status>
</kw>
<status status="PASS" starttime="20200909 22:59:56.203" endtime="20200909 22:59:56.273"></status>
</kw>
<status status="PASS" starttime="20200909 22:59:56.203" endtime="20200909 22:59:56.273"></status>
</kw>
<kw name="${scsi_id} = 6" type="foritem">
<kw name="Detach RaSCSI SCSI ID ${scsi_id}" library="rascsi_utils">
<doc>Detaches the specified SCSI ID from Rascsi</doc>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rasctl -c detach -i ${scsi_id}</arg>
</arguments>
<msg timestamp="20200909 22:59:56.274" level="INFO">Executing command 'rasctl -c detach -i 6'.</msg>
<msg timestamp="20200909 22:59:56.342" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" starttime="20200909 22:59:56.274" endtime="20200909 22:59:56.342"></status>
</kw>
<status status="PASS" starttime="20200909 22:59:56.273" endtime="20200909 22:59:56.343"></status>
</kw>
<status status="PASS" starttime="20200909 22:59:56.273" endtime="20200909 22:59:56.343"></status>
</kw>
<status status="PASS" starttime="20200909 22:59:55.855" endtime="20200909 22:59:56.343"></status>
</kw>
<status status="PASS" starttime="20200909 22:59:55.855" endtime="20200909 22:59:56.343"></status>
</kw>
<status status="PASS" starttime="20200909 22:59:53.852" endtime="20200909 22:59:56.343"></status>
</kw>
<test id="s1-s1-t1" name="MacOS formated ISO is mounted and correct size is reported">
<kw name="Given CD-ROM Drive is attached as SCSI ID 6" library="rascsi_utils">
<doc>Attaches a CD-ROM device (without any media) to the RaSCSI</doc>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rasctl -i ${scsi_id} -c attach -t cd</arg>
</arguments>
<assign>
<var>${rasctl_output}</var>
</assign>
<msg timestamp="20200909 22:59:56.346" level="INFO">Executing command 'rasctl -i 6 -c attach -t cd'.</msg>
<msg timestamp="20200909 22:59:56.412" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20200909 22:59:56.412" level="INFO">${rasctl_output} = </msg>
<status status="PASS" starttime="20200909 22:59:56.346" endtime="20200909 22:59:56.413"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${rasctl_output}</arg>
</arguments>
<msg timestamp="20200909 22:59:56.413" level="INFO"></msg>
<status status="PASS" starttime="20200909 22:59:56.413" endtime="20200909 22:59:56.413"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rasctl -l</arg>
</arguments>
<assign>
<var>${rasctl_output}</var>
</assign>
<msg timestamp="20200909 22:59:56.414" level="INFO">Executing command 'rasctl -l'.</msg>
<msg timestamp="20200909 22:59:56.482" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20200909 22:59:56.482" level="INFO">${rasctl_output} = 
+----+----+------+-------------------------------------
| ID | UN | TYPE | DEVICE STATUS
+----+----+------+-------------------------------------
|  6 |  0 | SCCD | NO MEDIA
+----+----+------+--------...</msg>
<status status="PASS" starttime="20200909 22:59:56.414" endtime="20200909 22:59:56.482"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${rasctl_output}</arg>
</arguments>
<msg timestamp="20200909 22:59:56.483" level="INFO">
+----+----+------+-------------------------------------
| ID | UN | TYPE | DEVICE STATUS
+----+----+------+-------------------------------------
|  6 |  0 | SCCD | NO MEDIA
+----+----+------+-------------------------------------</msg>
<status status="PASS" starttime="20200909 22:59:56.483" endtime="20200909 22:59:56.483"></status>
</kw>
<kw name="Rescan SCSI Bus" library="linux_scsi_utils">
<doc>Commands Linux to re-scan the SCSI bus on the local host</doc>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>sudo bash -c "echo \\"- - -\\" &gt; /sys/class/scsi_host/host0/scan"</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20200909 22:59:56.487" level="INFO">Running command 'sudo bash -c "echo \"- - -\" &gt; /sys/class/scsi_host/host0/scan"'.</msg>
<msg timestamp="20200909 23:00:00.898" level="INFO">${result} = </msg>
<status status="PASS" starttime="20200909 22:59:56.484" endtime="20200909 23:00:00.898"></status>
</kw>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>lsscsi</arg>
</arguments>
<assign>
<var>${lsscsi}</var>
</assign>
<msg timestamp="20200909 23:00:00.902" level="INFO">Running command 'lsscsi 2&gt;&amp;1'.</msg>
<msg timestamp="20200909 23:00:00.905" level="INFO">${lsscsi} = [0:0:6:0]    cd/dvd  RaSCSI   CD-ROM CDU-55S   0147  /dev/sr0 
[1:0:0:0]    disk    ATA      WDC WD2500JS-41S 6C04  /dev/sdb 
[2:0:0:0]    cd/dvd  TSSTcorp DVDWBD SH-B123L  SB04  /dev/sr1 
[4:0:0:0]  ...</msg>
<status status="PASS" starttime="20200909 23:00:00.898" endtime="20200909 23:00:00.906"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${lsscsi}</arg>
</arguments>
<msg timestamp="20200909 23:00:00.908" level="INFO">[0:0:6:0]    cd/dvd  RaSCSI   CD-ROM CDU-55S   0147  /dev/sr0 
[1:0:0:0]    disk    ATA      WDC WD2500JS-41S 6C04  /dev/sdb 
[2:0:0:0]    cd/dvd  TSSTcorp DVDWBD SH-B123L  SB04  /dev/sr1 
[4:0:0:0]    disk    ATA      Hitachi HDS72101 A41A  /dev/sdc </msg>
<status status="PASS" starttime="20200909 23:00:00.907" endtime="20200909 23:00:00.908"></status>
</kw>
<status status="PASS" starttime="20200909 22:59:56.484" endtime="20200909 23:00:00.908"></status>
</kw>
<status status="PASS" starttime="20200909 22:59:56.345" endtime="20200909 23:00:00.909"></status>
</kw>
<kw name="When Insert Removable Media marathon.iso into SCSI ID 6" library="rascsi_utils">
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rasctl -c insert -i ${scsi_id} -f /home/pi/images/${image}</arg>
</arguments>
<msg timestamp="20200909 23:00:00.912" level="INFO">Executing command 'rasctl -c insert -i 6 -f /home/pi/images/marathon.iso'.</msg>
<msg timestamp="20200909 23:00:00.950" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" starttime="20200909 23:00:00.911" endtime="20200909 23:00:00.950"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rasctl -l</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20200909 23:00:00.951" level="INFO">Executing command 'rasctl -l'.</msg>
<msg timestamp="20200909 23:00:01.022" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20200909 23:00:01.022" level="INFO">${result} = 
+----+----+------+-------------------------------------
| ID | UN | TYPE | DEVICE STATUS
+----+----+------+-------------------------------------
|  6 |  0 | SCCD | /home/pi/images/marathon.iso(WRITEP...</msg>
<status status="PASS" starttime="20200909 23:00:00.950" endtime="20200909 23:00:01.022"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20200909 23:00:01.023" level="INFO">
+----+----+------+-------------------------------------
| ID | UN | TYPE | DEVICE STATUS
+----+----+------+-------------------------------------
|  6 |  0 | SCCD | /home/pi/images/marathon.iso(WRITEPROTECT)
+----+----+------+-------------------------------------</msg>
<status status="PASS" starttime="20200909 23:00:01.023" endtime="20200909 23:00:01.023"></status>
</kw>
<status status="PASS" starttime="20200909 23:00:00.910" endtime="20200909 23:00:01.024"></status>
</kw>
<kw name="Then the size of SCSI ID 6 is equal to the size of marathon.iso" library="linux_scsi_utils">
<doc>Get the size of the SCSI device specified and the size of the drive
image and make sure they're equal</doc>
<kw name="Get size of SCSI ID ${scsi_id} device in bytes" library="linux_scsi_utils">
<doc>Given a SCSI ID, determine how big that drive is (in bytes)</doc>
<assign>
<var>${device_size}</var>
</assign>
<kw name="Get device id for SCSI ID ${scsi_id}" library="linux_scsi_utils">
<doc>Lookup the device name (ex /dev/sr0) for the specified SCSI ID</doc>
<assign>
<var>${device_id}</var>
</assign>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>lsscsi --brief |grep \\\\[0\\\\:0\\\\:${scsi_id}\\\\:0\\\\] | cut -f 5 --delimiter=" "</arg>
</arguments>
<assign>
<var>${lsscsi_output}</var>
</assign>
<msg timestamp="20200909 23:00:01.030" level="INFO">Running command 'lsscsi --brief |grep \\[0\\:0\\:6\\:0\\] | cut -f 5 --delimiter=" " 2&gt;&amp;1'.</msg>
<msg timestamp="20200909 23:00:01.034" level="INFO">${lsscsi_output} = /dev/sr0</msg>
<status status="PASS" starttime="20200909 23:00:01.027" endtime="20200909 23:00:01.035"></status>
</kw>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${lsscsi_output}</arg>
<arg>\/dev\/[\\w\\d]+</arg>
<arg>Unable to find device ID for SCSI ID ${scsi_id}</arg>
</arguments>
<status status="PASS" starttime="20200909 23:00:01.035" endtime="20200909 23:00:01.037"></status>
</kw>
<msg timestamp="20200909 23:00:01.037" level="INFO">${device_id} = /dev/sr0</msg>
<status status="PASS" starttime="20200909 23:00:01.026" endtime="20200909 23:00:01.037"></status>
</kw>
<kw name="Get size of device id ${device_id} in bytes" library="linux_scsi_utils">
<doc>Decypher the output of lsblk to determine the size of the
specified device ID</doc>
<assign>
<var>${device_size}</var>
</assign>
<kw name="Remove String Using Regexp" library="String">
<doc>Removes ``patterns`` from the given ``string``.</doc>
<arguments>
<arg>${device_id}</arg>
<arg>\/dev\/</arg>
</arguments>
<assign>
<var>${bare_device_id}</var>
</assign>
<msg timestamp="20200909 23:00:01.039" level="INFO">${bare_device_id} = sr0</msg>
<status status="PASS" starttime="20200909 23:00:01.038" endtime="20200909 23:00:01.039"></status>
</kw>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>lsblk --raw --bytes | grep ${bare_device_id} | cut -f 4 --delimiter=" "</arg>
</arguments>
<assign>
<var>${lsblk_output}</var>
</assign>
<msg timestamp="20200909 23:00:01.042" level="INFO">Running command 'lsblk --raw --bytes | grep sr0 | cut -f 4 --delimiter=" " 2&gt;&amp;1'.</msg>
<msg timestamp="20200909 23:00:01.050" level="INFO">${lsblk_output} = 35895296</msg>
<status status="PASS" starttime="20200909 23:00:01.039" endtime="20200909 23:00:01.050"></status>
</kw>
<msg timestamp="20200909 23:00:01.050" level="INFO">${device_size} = 35895296</msg>
<status status="PASS" starttime="20200909 23:00:01.038" endtime="20200909 23:00:01.050"></status>
</kw>
<msg timestamp="20200909 23:00:01.051" level="INFO">${device_size} = 35895296</msg>
<status status="PASS" starttime="20200909 23:00:01.025" endtime="20200909 23:00:01.051"></status>
</kw>
<kw name="Get Size of RaSCSI Image ${image_name} in bytes" library="rascsi_utils">
<doc>Return the size of the specified disk image in bytes</doc>
<assign>
<var>${image_size}</var>
</assign>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>du -b /home/pi/images/${image_name} | cut -f 1</arg>
</arguments>
<assign>
<var>${size_output}</var>
</assign>
<msg timestamp="20200909 23:00:01.053" level="INFO">Executing command 'du -b /home/pi/images/marathon.iso | cut -f 1'.</msg>
<msg timestamp="20200909 23:00:01.081" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20200909 23:00:01.081" level="INFO">${size_output} = 35895296</msg>
<status status="PASS" starttime="20200909 23:00:01.052" endtime="20200909 23:00:01.082"></status>
</kw>
<msg timestamp="20200909 23:00:01.082" level="INFO">${image_size} = 35895296</msg>
<status status="PASS" starttime="20200909 23:00:01.051" endtime="20200909 23:00:01.082"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${device_size}</arg>
<arg>${image_size}</arg>
<arg>The device size did not match the image size</arg>
</arguments>
<status status="PASS" starttime="20200909 23:00:01.082" endtime="20200909 23:00:01.083"></status>
</kw>
<status status="PASS" starttime="20200909 23:00:01.024" endtime="20200909 23:00:01.083"></status>
</kw>
<kw name="And the checksum of SCSI ID 6 is equal to the checksum of marathon.iso" library="linux_scsi_utils">
<doc>Empty Keyword</doc>
<kw name="Get checksum of SCSI ID ${scsi_id} device" library="linux_scsi_utils">
<doc>Calculate the checksum of the disk image on the RaSCSI host</doc>
<assign>
<var>${device_checksum}</var>
</assign>
<kw name="Get device id for SCSI ID ${scsi_id}" library="linux_scsi_utils">
<doc>Lookup the device name (ex /dev/sr0) for the specified SCSI ID</doc>
<assign>
<var>${device_id}</var>
</assign>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>lsscsi --brief |grep \\\\[0\\\\:0\\\\:${scsi_id}\\\\:0\\\\] | cut -f 5 --delimiter=" "</arg>
</arguments>
<assign>
<var>${lsscsi_output}</var>
</assign>
<msg timestamp="20200909 23:00:01.090" level="INFO">Running command 'lsscsi --brief |grep \\[0\\:0\\:6\\:0\\] | cut -f 5 --delimiter=" " 2&gt;&amp;1'.</msg>
<msg timestamp="20200909 23:00:01.093" level="INFO">${lsscsi_output} = /dev/sr0</msg>
<status status="PASS" starttime="20200909 23:00:01.087" endtime="20200909 23:00:01.093"></status>
</kw>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${lsscsi_output}</arg>
<arg>\/dev\/[\\w\\d]+</arg>
<arg>Unable to find device ID for SCSI ID ${scsi_id}</arg>
</arguments>
<status status="PASS" starttime="20200909 23:00:01.094" endtime="20200909 23:00:01.095"></status>
</kw>
<msg timestamp="20200909 23:00:01.096" level="INFO">${device_id} = /dev/sr0</msg>
<status status="PASS" starttime="20200909 23:00:01.086" endtime="20200909 23:00:01.096"></status>
</kw>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>Get checksum of file ${device_id}</arg>
</arguments>
<assign>
<var>${checksum}</var>
</assign>
<kw name="Get checksum of file /dev/sr0" library="linux_scsi_utils">
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>md5sum ${full_file_path} | cut -f 1 --delimiter=" "</arg>
</arguments>
<assign>
<var>${checksum}</var>
</assign>
<msg timestamp="20200909 23:00:01.101" level="INFO">Running command 'md5sum /dev/sr0 | cut -f 1 --delimiter=" " 2&gt;&amp;1'.</msg>
<msg timestamp="20200909 23:00:36.837" level="INFO">${checksum} = 95c88a1a8bbdbafa4922ae6a8732bc4d</msg>
<status status="PASS" starttime="20200909 23:00:01.098" endtime="20200909 23:00:36.837"></status>
</kw>
<status status="PASS" starttime="20200909 23:00:01.097" endtime="20200909 23:00:36.838"></status>
</kw>
<msg timestamp="20200909 23:00:36.838" level="INFO">${checksum} = 95c88a1a8bbdbafa4922ae6a8732bc4d</msg>
<status status="PASS" starttime="20200909 23:00:01.096" endtime="20200909 23:00:36.838"></status>
</kw>
<msg timestamp="20200909 23:00:36.838" level="INFO">${device_checksum} = 95c88a1a8bbdbafa4922ae6a8732bc4d</msg>
<status status="PASS" starttime="20200909 23:00:01.085" endtime="20200909 23:00:36.838"></status>
</kw>
<kw name="Get checksum of RaSCSI Image ${image_name}" library="rascsi_utils">
<doc>Calculate the checksum of the disk image on the RaSCSI host</doc>
<assign>
<var>${image_checksum}</var>
</assign>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>md5sum /home/pi/images/${image_name} | cut -f 1 --delimiter=" "</arg>
</arguments>
<assign>
<var>${checksum}</var>
</assign>
<msg timestamp="20200909 23:00:36.841" level="INFO">Executing command 'md5sum /home/pi/images/marathon.iso | cut -f 1 --delimiter=" "'.</msg>
<msg timestamp="20200909 23:00:37.068" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20200909 23:00:37.068" level="INFO">${checksum} = 95c88a1a8bbdbafa4922ae6a8732bc4d</msg>
<status status="PASS" starttime="20200909 23:00:36.840" endtime="20200909 23:00:37.068"></status>
</kw>
<msg timestamp="20200909 23:00:37.068" level="INFO">${image_checksum} = 95c88a1a8bbdbafa4922ae6a8732bc4d</msg>
<status status="PASS" starttime="20200909 23:00:36.839" endtime="20200909 23:00:37.069"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${device_checksum}</arg>
<arg>${image_checksum}</arg>
<arg>The device checksum did not match the image file</arg>
</arguments>
<status status="PASS" starttime="20200909 23:00:37.069" endtime="20200909 23:00:37.070"></status>
</kw>
<status status="PASS" starttime="20200909 23:00:01.084" endtime="20200909 23:00:37.070"></status>
</kw>
<kw name="Run Keywords" library="BuiltIn" type="teardown">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Detach all RaSCSI SCSI Devices</arg>
<arg>AND</arg>
<arg>Delete all SCSI devices from Linux</arg>
<arg>AND</arg>
<arg>Delete all RaSCSI drive images</arg>
</arguments>
<kw name="Detach all RaSCSI SCSI Devices" library="rascsi_utils">
<doc>Send detach commands for all of the SCSI IDs to make sure that there
aren't any left over before/after a test</doc>
<kw name="${scsi_id} IN RANGE [ 0 | 7 ]" type="for">
<kw name="${scsi_id} = 0" type="foritem">
<kw name="Detach RaSCSI SCSI ID ${scsi_id}" library="rascsi_utils">
<doc>Detaches the specified SCSI ID from Rascsi</doc>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rasctl -c detach -i ${scsi_id}</arg>
</arguments>
<msg timestamp="20200909 23:00:37.074" level="INFO">Executing command 'rasctl -c detach -i 0'.</msg>
<msg timestamp="20200909 23:00:37.131" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" starttime="20200909 23:00:37.073" endtime="20200909 23:00:37.131"></status>
</kw>
<status status="PASS" starttime="20200909 23:00:37.072" endtime="20200909 23:00:37.131"></status>
</kw>
<status status="PASS" starttime="20200909 23:00:37.072" endtime="20200909 23:00:37.131"></status>
</kw>
<kw name="${scsi_id} = 1" type="foritem">
<kw name="Detach RaSCSI SCSI ID ${scsi_id}" library="rascsi_utils">
<doc>Detaches the specified SCSI ID from Rascsi</doc>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rasctl -c detach -i ${scsi_id}</arg>
</arguments>
<msg timestamp="20200909 23:00:37.133" level="INFO">Executing command 'rasctl -c detach -i 1'.</msg>
<msg timestamp="20200909 23:00:37.191" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" starttime="20200909 23:00:37.133" endtime="20200909 23:00:37.191"></status>
</kw>
<status status="PASS" starttime="20200909 23:00:37.132" endtime="20200909 23:00:37.191"></status>
</kw>
<status status="PASS" starttime="20200909 23:00:37.131" endtime="20200909 23:00:37.191"></status>
</kw>
<kw name="${scsi_id} = 2" type="foritem">
<kw name="Detach RaSCSI SCSI ID ${scsi_id}" library="rascsi_utils">
<doc>Detaches the specified SCSI ID from Rascsi</doc>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rasctl -c detach -i ${scsi_id}</arg>
</arguments>
<msg timestamp="20200909 23:00:37.193" level="INFO">Executing command 'rasctl -c detach -i 2'.</msg>
<msg timestamp="20200909 23:00:37.251" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" starttime="20200909 23:00:37.193" endtime="20200909 23:00:37.251"></status>
</kw>
<status status="PASS" starttime="20200909 23:00:37.192" endtime="20200909 23:00:37.251"></status>
</kw>
<status status="PASS" starttime="20200909 23:00:37.191" endtime="20200909 23:00:37.251"></status>
</kw>
<kw name="${scsi_id} = 3" type="foritem">
<kw name="Detach RaSCSI SCSI ID ${scsi_id}" library="rascsi_utils">
<doc>Detaches the specified SCSI ID from Rascsi</doc>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rasctl -c detach -i ${scsi_id}</arg>
</arguments>
<msg timestamp="20200909 23:00:37.253" level="INFO">Executing command 'rasctl -c detach -i 3'.</msg>
<msg timestamp="20200909 23:00:37.321" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" starttime="20200909 23:00:37.253" endtime="20200909 23:00:37.321"></status>
</kw>
<status status="PASS" starttime="20200909 23:00:37.252" endtime="20200909 23:00:37.321"></status>
</kw>
<status status="PASS" starttime="20200909 23:00:37.251" endtime="20200909 23:00:37.321"></status>
</kw>
<kw name="${scsi_id} = 4" type="foritem">
<kw name="Detach RaSCSI SCSI ID ${scsi_id}" library="rascsi_utils">
<doc>Detaches the specified SCSI ID from Rascsi</doc>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rasctl -c detach -i ${scsi_id}</arg>
</arguments>
<msg timestamp="20200909 23:00:37.323" level="INFO">Executing command 'rasctl -c detach -i 4'.</msg>
<msg timestamp="20200909 23:00:37.381" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" starttime="20200909 23:00:37.323" endtime="20200909 23:00:37.381"></status>
</kw>
<status status="PASS" starttime="20200909 23:00:37.322" endtime="20200909 23:00:37.381"></status>
</kw>
<status status="PASS" starttime="20200909 23:00:37.322" endtime="20200909 23:00:37.381"></status>
</kw>
<kw name="${scsi_id} = 5" type="foritem">
<kw name="Detach RaSCSI SCSI ID ${scsi_id}" library="rascsi_utils">
<doc>Detaches the specified SCSI ID from Rascsi</doc>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rasctl -c detach -i ${scsi_id}</arg>
</arguments>
<msg timestamp="20200909 23:00:37.384" level="INFO">Executing command 'rasctl -c detach -i 5'.</msg>
<msg timestamp="20200909 23:00:37.441" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" starttime="20200909 23:00:37.383" endtime="20200909 23:00:37.441"></status>
</kw>
<status status="PASS" starttime="20200909 23:00:37.382" endtime="20200909 23:00:37.441"></status>
</kw>
<status status="PASS" starttime="20200909 23:00:37.382" endtime="20200909 23:00:37.441"></status>
</kw>
<kw name="${scsi_id} = 6" type="foritem">
<kw name="Detach RaSCSI SCSI ID ${scsi_id}" library="rascsi_utils">
<doc>Detaches the specified SCSI ID from Rascsi</doc>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rasctl -c detach -i ${scsi_id}</arg>
</arguments>
<msg timestamp="20200909 23:00:37.443" level="INFO">Executing command 'rasctl -c detach -i 6'.</msg>
<msg timestamp="20200909 23:00:37.511" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" starttime="20200909 23:00:37.443" endtime="20200909 23:00:37.511"></status>
</kw>
<status status="PASS" starttime="20200909 23:00:37.442" endtime="20200909 23:00:37.511"></status>
</kw>
<status status="PASS" starttime="20200909 23:00:37.442" endtime="20200909 23:00:37.511"></status>
</kw>
<status status="PASS" starttime="20200909 23:00:37.072" endtime="20200909 23:00:37.511"></status>
</kw>
<status status="PASS" starttime="20200909 23:00:37.071" endtime="20200909 23:00:37.512"></status>
</kw>
<kw name="Delete all SCSI devices from Linux" library="linux_scsi_utils">
<doc>Remove all SCSI IDs from the Linux SCSI driver</doc>
<kw name="${scsi_id} IN RANGE [ 0 | 7 ]" type="for">
<kw name="${scsi_id} = 0" type="foritem">
<kw name="Delete SCSI ID ${scsi_id} from Linux" library="linux_scsi_utils">
<doc>Remove a SCSI ID from Linux. Basically, will un-do the Scan action</doc>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>sudo bash -c "echo 1 &gt; /sys/class/scsi_device/0:0:${scsi_id}:0/device/delete" 2&gt;&amp;1 &gt; /dev/null</arg>
</arguments>
<msg timestamp="20200909 23:00:37.517" level="INFO">Running command 'sudo bash -c "echo 1 &gt; /sys/class/scsi_device/0:0:0:0/device/delete" 2&gt;&amp;1 &gt; /dev/null'.</msg>
<status status="PASS" starttime="20200909 23:00:37.514" endtime="20200909 23:00:37.529"></status>
</kw>
<status status="PASS" starttime="20200909 23:00:37.513" endtime="20200909 23:00:37.530"></status>
</kw>
<status status="PASS" starttime="20200909 23:00:37.513" endtime="20200909 23:00:37.530"></status>
</kw>
<kw name="${scsi_id} = 1" type="foritem">
<kw name="Delete SCSI ID ${scsi_id} from Linux" library="linux_scsi_utils">
<doc>Remove a SCSI ID from Linux. Basically, will un-do the Scan action</doc>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>sudo bash -c "echo 1 &gt; /sys/class/scsi_device/0:0:${scsi_id}:0/device/delete" 2&gt;&amp;1 &gt; /dev/null</arg>
</arguments>
<msg timestamp="20200909 23:00:37.534" level="INFO">Running command 'sudo bash -c "echo 1 &gt; /sys/class/scsi_device/0:0:1:0/device/delete" 2&gt;&amp;1 &gt; /dev/null'.</msg>
<status status="PASS" starttime="20200909 23:00:37.531" endtime="20200909 23:00:37.543"></status>
</kw>
<status status="PASS" starttime="20200909 23:00:37.530" endtime="20200909 23:00:37.544"></status>
</kw>
<status status="PASS" starttime="20200909 23:00:37.530" endtime="20200909 23:00:37.544"></status>
</kw>
<kw name="${scsi_id} = 2" type="foritem">
<kw name="Delete SCSI ID ${scsi_id} from Linux" library="linux_scsi_utils">
<doc>Remove a SCSI ID from Linux. Basically, will un-do the Scan action</doc>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>sudo bash -c "echo 1 &gt; /sys/class/scsi_device/0:0:${scsi_id}:0/device/delete" 2&gt;&amp;1 &gt; /dev/null</arg>
</arguments>
<msg timestamp="20200909 23:00:37.549" level="INFO">Running command 'sudo bash -c "echo 1 &gt; /sys/class/scsi_device/0:0:2:0/device/delete" 2&gt;&amp;1 &gt; /dev/null'.</msg>
<status status="PASS" starttime="20200909 23:00:37.546" endtime="20200909 23:00:37.560"></status>
</kw>
<status status="PASS" starttime="20200909 23:00:37.545" endtime="20200909 23:00:37.560"></status>
</kw>
<status status="PASS" starttime="20200909 23:00:37.544" endtime="20200909 23:00:37.561"></status>
</kw>
<kw name="${scsi_id} = 3" type="foritem">
<kw name="Delete SCSI ID ${scsi_id} from Linux" library="linux_scsi_utils">
<doc>Remove a SCSI ID from Linux. Basically, will un-do the Scan action</doc>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>sudo bash -c "echo 1 &gt; /sys/class/scsi_device/0:0:${scsi_id}:0/device/delete" 2&gt;&amp;1 &gt; /dev/null</arg>
</arguments>
<msg timestamp="20200909 23:00:37.566" level="INFO">Running command 'sudo bash -c "echo 1 &gt; /sys/class/scsi_device/0:0:3:0/device/delete" 2&gt;&amp;1 &gt; /dev/null'.</msg>
<status status="PASS" starttime="20200909 23:00:37.563" endtime="20200909 23:00:37.576"></status>
</kw>
<status status="PASS" starttime="20200909 23:00:37.561" endtime="20200909 23:00:37.577"></status>
</kw>
<status status="PASS" starttime="20200909 23:00:37.561" endtime="20200909 23:00:37.577"></status>
</kw>
<kw name="${scsi_id} = 4" type="foritem">
<kw name="Delete SCSI ID ${scsi_id} from Linux" library="linux_scsi_utils">
<doc>Remove a SCSI ID from Linux. Basically, will un-do the Scan action</doc>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>sudo bash -c "echo 1 &gt; /sys/class/scsi_device/0:0:${scsi_id}:0/device/delete" 2&gt;&amp;1 &gt; /dev/null</arg>
</arguments>
<msg timestamp="20200909 23:00:37.581" level="INFO">Running command 'sudo bash -c "echo 1 &gt; /sys/class/scsi_device/0:0:4:0/device/delete" 2&gt;&amp;1 &gt; /dev/null'.</msg>
<status status="PASS" starttime="20200909 23:00:37.579" endtime="20200909 23:00:37.590"></status>
</kw>
<status status="PASS" starttime="20200909 23:00:37.578" endtime="20200909 23:00:37.591"></status>
</kw>
<status status="PASS" starttime="20200909 23:00:37.577" endtime="20200909 23:00:37.591"></status>
</kw>
<kw name="${scsi_id} = 5" type="foritem">
<kw name="Delete SCSI ID ${scsi_id} from Linux" library="linux_scsi_utils">
<doc>Remove a SCSI ID from Linux. Basically, will un-do the Scan action</doc>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>sudo bash -c "echo 1 &gt; /sys/class/scsi_device/0:0:${scsi_id}:0/device/delete" 2&gt;&amp;1 &gt; /dev/null</arg>
</arguments>
<msg timestamp="20200909 23:00:37.595" level="INFO">Running command 'sudo bash -c "echo 1 &gt; /sys/class/scsi_device/0:0:5:0/device/delete" 2&gt;&amp;1 &gt; /dev/null'.</msg>
<status status="PASS" starttime="20200909 23:00:37.593" endtime="20200909 23:00:37.606"></status>
</kw>
<status status="PASS" starttime="20200909 23:00:37.592" endtime="20200909 23:00:37.606"></status>
</kw>
<status status="PASS" starttime="20200909 23:00:37.591" endtime="20200909 23:00:37.606"></status>
</kw>
<kw name="${scsi_id} = 6" type="foritem">
<kw name="Delete SCSI ID ${scsi_id} from Linux" library="linux_scsi_utils">
<doc>Remove a SCSI ID from Linux. Basically, will un-do the Scan action</doc>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>sudo bash -c "echo 1 &gt; /sys/class/scsi_device/0:0:${scsi_id}:0/device/delete" 2&gt;&amp;1 &gt; /dev/null</arg>
</arguments>
<msg timestamp="20200909 23:00:37.612" level="INFO">Running command 'sudo bash -c "echo 1 &gt; /sys/class/scsi_device/0:0:6:0/device/delete" 2&gt;&amp;1 &gt; /dev/null'.</msg>
<status status="PASS" starttime="20200909 23:00:37.609" endtime="20200909 23:00:37.641"></status>
</kw>
<status status="PASS" starttime="20200909 23:00:37.607" endtime="20200909 23:00:37.641"></status>
</kw>
<status status="PASS" starttime="20200909 23:00:37.607" endtime="20200909 23:00:37.642"></status>
</kw>
<status status="PASS" starttime="20200909 23:00:37.512" endtime="20200909 23:00:37.642"></status>
</kw>
<status status="PASS" starttime="20200909 23:00:37.512" endtime="20200909 23:00:37.642"></status>
</kw>
<kw name="Delete all RaSCSI drive images" library="rascsi_utils">
<doc>Delete all of the temporary drive images that were created on the RaSCSI host</doc>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>/home/pi/images/tmp_*</arg>
</arguments>
<msg timestamp="20200909 23:00:37.644" level="INFO" html="yes">File '&lt;a href="file:///home/pi/images/tmp_*"&gt;/home/pi/images/tmp_*&lt;/a&gt;' does not exist.</msg>
<status status="PASS" starttime="20200909 23:00:37.643" endtime="20200909 23:00:37.644"></status>
</kw>
<status status="PASS" starttime="20200909 23:00:37.642" endtime="20200909 23:00:37.644"></status>
</kw>
<status status="PASS" starttime="20200909 23:00:37.071" endtime="20200909 23:00:37.645"></status>
</kw>
<doc>Mount a MacOS formatted ISO and check that its size is
detected correctly. Note that Linux is not able to
mount this image. Note: Marathon was chosen because
its a reasonably small image. Large images will make
this test take a LONG time.</doc>
<status status="PASS" starttime="20200909 22:59:56.343" endtime="20200909 23:00:37.645" critical="yes"></status>
</test>
<test id="s1-s1-t2" name="ISO-9660 formated ISO is mounted correct size is reported">
<kw name="Given CD-ROM Drive is attached as SCSI ID 5" library="rascsi_utils">
<doc>Attaches a CD-ROM device (without any media) to the RaSCSI</doc>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rasctl -i ${scsi_id} -c attach -t cd</arg>
</arguments>
<assign>
<var>${rasctl_output}</var>
</assign>
<msg timestamp="20200909 23:00:37.647" level="INFO">Executing command 'rasctl -i 5 -c attach -t cd'.</msg>
<msg timestamp="20200909 23:00:37.681" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20200909 23:00:37.681" level="INFO">${rasctl_output} = </msg>
<status status="PASS" starttime="20200909 23:00:37.646" endtime="20200909 23:00:37.681"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${rasctl_output}</arg>
</arguments>
<msg timestamp="20200909 23:00:37.682" level="INFO"></msg>
<status status="PASS" starttime="20200909 23:00:37.682" endtime="20200909 23:00:37.682"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rasctl -l</arg>
</arguments>
<assign>
<var>${rasctl_output}</var>
</assign>
<msg timestamp="20200909 23:00:37.682" level="INFO">Executing command 'rasctl -l'.</msg>
<msg timestamp="20200909 23:00:37.751" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20200909 23:00:37.752" level="INFO">${rasctl_output} = 
+----+----+------+-------------------------------------
| ID | UN | TYPE | DEVICE STATUS
+----+----+------+-------------------------------------
|  5 |  0 | SCCD | NO MEDIA
+----+----+------+--------...</msg>
<status status="PASS" starttime="20200909 23:00:37.682" endtime="20200909 23:00:37.752"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${rasctl_output}</arg>
</arguments>
<msg timestamp="20200909 23:00:37.752" level="INFO">
+----+----+------+-------------------------------------
| ID | UN | TYPE | DEVICE STATUS
+----+----+------+-------------------------------------
|  5 |  0 | SCCD | NO MEDIA
+----+----+------+-------------------------------------</msg>
<status status="PASS" starttime="20200909 23:00:37.752" endtime="20200909 23:00:37.753"></status>
</kw>
<kw name="Rescan SCSI Bus" library="linux_scsi_utils">
<doc>Commands Linux to re-scan the SCSI bus on the local host</doc>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>sudo bash -c "echo \\"- - -\\" &gt; /sys/class/scsi_host/host0/scan"</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20200909 23:00:37.756" level="INFO">Running command 'sudo bash -c "echo \"- - -\" &gt; /sys/class/scsi_host/host0/scan"'.</msg>
<msg timestamp="20200909 23:00:42.262" level="INFO">${result} = </msg>
<status status="PASS" starttime="20200909 23:00:37.753" endtime="20200909 23:00:42.262"></status>
</kw>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>lsscsi</arg>
</arguments>
<assign>
<var>${lsscsi}</var>
</assign>
<msg timestamp="20200909 23:00:42.266" level="INFO">Running command 'lsscsi 2&gt;&amp;1'.</msg>
<msg timestamp="20200909 23:00:42.270" level="INFO">${lsscsi} = [0:0:5:0]    cd/dvd  RaSCSI   CD-ROM CDU-55S   0147  /dev/sr0 
[1:0:0:0]    disk    ATA      WDC WD2500JS-41S 6C04  /dev/sdb 
[2:0:0:0]    cd/dvd  TSSTcorp DVDWBD SH-B123L  SB04  /dev/sr1 
[4:0:0:0]  ...</msg>
<status status="PASS" starttime="20200909 23:00:42.262" endtime="20200909 23:00:42.270"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${lsscsi}</arg>
</arguments>
<msg timestamp="20200909 23:00:42.272" level="INFO">[0:0:5:0]    cd/dvd  RaSCSI   CD-ROM CDU-55S   0147  /dev/sr0 
[1:0:0:0]    disk    ATA      WDC WD2500JS-41S 6C04  /dev/sdb 
[2:0:0:0]    cd/dvd  TSSTcorp DVDWBD SH-B123L  SB04  /dev/sr1 
[4:0:0:0]    disk    ATA      Hitachi HDS72101 A41A  /dev/sdc </msg>
<status status="PASS" starttime="20200909 23:00:42.271" endtime="20200909 23:00:42.272"></status>
</kw>
<status status="PASS" starttime="20200909 23:00:37.753" endtime="20200909 23:00:42.273"></status>
</kw>
<status status="PASS" starttime="20200909 23:00:37.646" endtime="20200909 23:00:42.273"></status>
</kw>
<kw name="When Insert Removable Media ubuntu-12.04.5-server-amd64.iso into SCSI ID 5" library="rascsi_utils">
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rasctl -c insert -i ${scsi_id} -f /home/pi/images/${image}</arg>
</arguments>
<msg timestamp="20200909 23:00:42.276" level="INFO">Executing command 'rasctl -c insert -i 5 -f /home/pi/images/ubuntu-12.04.5-server-amd64.iso'.</msg>
<msg timestamp="20200909 23:00:42.311" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" starttime="20200909 23:00:42.275" endtime="20200909 23:00:42.312"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rasctl -l</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20200909 23:00:42.312" level="INFO">Executing command 'rasctl -l'.</msg>
<msg timestamp="20200909 23:00:42.392" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20200909 23:00:42.393" level="INFO">${result} = 
+----+----+------+-------------------------------------
| ID | UN | TYPE | DEVICE STATUS
+----+----+------+-------------------------------------
|  5 |  0 | SCCD | /home/pi/images/ubuntu-12.04.5-serv...</msg>
<status status="PASS" starttime="20200909 23:00:42.312" endtime="20200909 23:00:42.393"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20200909 23:00:42.394" level="INFO">
+----+----+------+-------------------------------------
| ID | UN | TYPE | DEVICE STATUS
+----+----+------+-------------------------------------
|  5 |  0 | SCCD | /home/pi/images/ubuntu-12.04.5-server-amd64.iso(WRITEPROTECT)
+----+----+------+-------------------------------------</msg>
<status status="PASS" starttime="20200909 23:00:42.393" endtime="20200909 23:00:42.394"></status>
</kw>
<status status="PASS" starttime="20200909 23:00:42.274" endtime="20200909 23:00:42.394"></status>
</kw>
<kw name="And Mount SCSI ID 5 as ubuntu" library="linux_scsi_utils">
<doc>Mount the specified SCSI ID at the specified path in /mnt</doc>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>sudo mkdir -p /mnt/${folder_name}</arg>
</arguments>
<msg timestamp="20200909 23:00:42.400" level="INFO">Running command 'sudo mkdir -p /mnt/ubuntu 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20200909 23:00:42.396" endtime="20200909 23:00:42.412"></status>
</kw>
<kw name="Get device id for SCSI ID ${scsi_id}" library="linux_scsi_utils">
<doc>Lookup the device name (ex /dev/sr0) for the specified SCSI ID</doc>
<assign>
<var>${device}</var>
</assign>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>lsscsi --brief |grep \\\\[0\\\\:0\\\\:${scsi_id}\\\\:0\\\\] | cut -f 5 --delimiter=" "</arg>
</arguments>
<assign>
<var>${lsscsi_output}</var>
</assign>
<msg timestamp="20200909 23:00:42.415" level="INFO">Running command 'lsscsi --brief |grep \\[0\\:0\\:5\\:0\\] | cut -f 5 --delimiter=" " 2&gt;&amp;1'.</msg>
<msg timestamp="20200909 23:00:42.417" level="INFO">${lsscsi_output} = /dev/sr0</msg>
<status status="PASS" starttime="20200909 23:00:42.413" endtime="20200909 23:00:42.417"></status>
</kw>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${lsscsi_output}</arg>
<arg>\/dev\/[\\w\\d]+</arg>
<arg>Unable to find device ID for SCSI ID ${scsi_id}</arg>
</arguments>
<status status="PASS" starttime="20200909 23:00:42.418" endtime="20200909 23:00:42.418"></status>
</kw>
<msg timestamp="20200909 23:00:42.418" level="INFO">${device} = /dev/sr0</msg>
<status status="PASS" starttime="20200909 23:00:42.412" endtime="20200909 23:00:42.418"></status>
</kw>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>sudo mount ${device} /mnt/${folder_name}</arg>
</arguments>
<msg timestamp="20200909 23:00:42.421" level="INFO">Running command 'sudo mount /dev/sr0 /mnt/ubuntu 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20200909 23:00:42.419" endtime="20200909 23:00:43.544"></status>
</kw>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>df -h</arg>
</arguments>
<assign>
<var>${df}</var>
</assign>
<msg timestamp="20200909 23:00:43.553" level="INFO">Running command 'df -h 2&gt;&amp;1'.</msg>
<msg timestamp="20200909 23:00:43.556" level="INFO">${df} = Filesystem      Size  Used Avail Use% Mounted on
udev            3.9G     0  3.9G   0% /dev
tmpfs           788M  1.7M  787M   1% /run
/dev/sdb1       221G  6.2G  204G   3% /
tmpfs           3.9G   47...</msg>
<status status="PASS" starttime="20200909 23:00:43.545" endtime="20200909 23:00:43.556"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${df}</arg>
</arguments>
<msg timestamp="20200909 23:00:43.557" level="INFO">Filesystem      Size  Used Avail Use% Mounted on
udev            3.9G     0  3.9G   0% /dev
tmpfs           788M  1.7M  787M   1% /run
/dev/sdb1       221G  6.2G  204G   3% /
tmpfs           3.9G   47M  3.9G   2% /dev/shm
tmpfs           5.0M  4.0K  5.0M   1% /run/lock
tmpfs           3.9G     0  3.9G   0% /sys/fs/cgroup
/dev/loop2       55M   55M     0 100% /snap/core18/1880
/dev/loop4       50M   50M     0 100% /snap/snap-store/467
/dev/loop5       56M   56M     0 100% /snap/core18/1885
/dev/loop6       30M   30M     0 100% /snap/snapd/8790
/dev/loop8       30M   30M     0 100% /snap/snapd/8542
/dev/loop0       63M   63M     0 100% /snap/gtk-common-themes/1506
/dev/loop1      256M  256M     0 100% /snap/gnome-3-34-1804/36
/dev/loop7      156M  156M     0 100% /snap/code/42
/dev/loop3       97M   97M     0 100% /snap/core/9804
/dev/sdc1       916G  874M  869G   1% /home
tmpfs           788M   28K  788M   1% /run/user/125
/dev/sda1       460M   17M  409M   4% /mnt/sda1
tmpfs           788M   16K  788M   1% /run/user/1000
/dev/sr0        689M  689M     0 100% /mnt/ubuntu</msg>
<status status="PASS" starttime="20200909 23:00:43.557" endtime="20200909 23:00:43.557"></status>
</kw>
<status status="PASS" starttime="20200909 23:00:42.395" endtime="20200909 23:00:43.558"></status>
</kw>
<kw name="Then SCSI ID 5 has been mounted at ubuntu" library="linux_scsi_utils">
<doc>Check that the 'df' utility reports that the specified SCSI ID is
mounted at the path specified</doc>
<kw name="Get device id for SCSI ID ${scsi_id}" library="linux_scsi_utils">
<doc>Lookup the device name (ex /dev/sr0) for the specified SCSI ID</doc>
<assign>
<var>${device}</var>
</assign>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>lsscsi --brief |grep \\\\[0\\\\:0\\\\:${scsi_id}\\\\:0\\\\] | cut -f 5 --delimiter=" "</arg>
</arguments>
<assign>
<var>${lsscsi_output}</var>
</assign>
<msg timestamp="20200909 23:00:43.561" level="INFO">Running command 'lsscsi --brief |grep \\[0\\:0\\:5\\:0\\] | cut -f 5 --delimiter=" " 2&gt;&amp;1'.</msg>
<msg timestamp="20200909 23:00:43.563" level="INFO">${lsscsi_output} = /dev/sr0</msg>
<status status="PASS" starttime="20200909 23:00:43.559" endtime="20200909 23:00:43.563"></status>
</kw>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${lsscsi_output}</arg>
<arg>\/dev\/[\\w\\d]+</arg>
<arg>Unable to find device ID for SCSI ID ${scsi_id}</arg>
</arguments>
<status status="PASS" starttime="20200909 23:00:43.564" endtime="20200909 23:00:43.565"></status>
</kw>
<msg timestamp="20200909 23:00:43.565" level="INFO">${device} = /dev/sr0</msg>
<status status="PASS" starttime="20200909 23:00:43.559" endtime="20200909 23:00:43.565"></status>
</kw>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>mount | grep ${device} | cut --delimiter=" " -f 3</arg>
</arguments>
<assign>
<var>${df_output}</var>
</assign>
<msg timestamp="20200909 23:00:43.567" level="INFO">Running command 'mount | grep /dev/sr0 | cut --delimiter=" " -f 3 2&gt;&amp;1'.</msg>
<msg timestamp="20200909 23:00:43.570" level="INFO">${df_output} = /mnt/ubuntu</msg>
<status status="PASS" starttime="20200909 23:00:43.565" endtime="20200909 23:00:43.570"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${df_output}</arg>
</arguments>
<msg timestamp="20200909 23:00:43.570" level="INFO">/mnt/ubuntu</msg>
<status status="PASS" starttime="20200909 23:00:43.570" endtime="20200909 23:00:43.570"></status>
</kw>
<status status="PASS" starttime="20200909 23:00:43.558" endtime="20200909 23:00:43.571"></status>
</kw>
<kw name="And the size of SCSI ID 5 is equal to the size of ubuntu-12.04.5-server-amd64.iso" library="linux_scsi_utils">
<doc>Get the size of the SCSI device specified and the size of the drive
image and make sure they're equal</doc>
<kw name="Get size of SCSI ID ${scsi_id} device in bytes" library="linux_scsi_utils">
<doc>Given a SCSI ID, determine how big that drive is (in bytes)</doc>
<assign>
<var>${device_size}</var>
</assign>
<kw name="Get device id for SCSI ID ${scsi_id}" library="linux_scsi_utils">
<doc>Lookup the device name (ex /dev/sr0) for the specified SCSI ID</doc>
<assign>
<var>${device_id}</var>
</assign>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>lsscsi --brief |grep \\\\[0\\\\:0\\\\:${scsi_id}\\\\:0\\\\] | cut -f 5 --delimiter=" "</arg>
</arguments>
<assign>
<var>${lsscsi_output}</var>
</assign>
<msg timestamp="20200909 23:00:43.575" level="INFO">Running command 'lsscsi --brief |grep \\[0\\:0\\:5\\:0\\] | cut -f 5 --delimiter=" " 2&gt;&amp;1'.</msg>
<msg timestamp="20200909 23:00:43.578" level="INFO">${lsscsi_output} = /dev/sr0</msg>
<status status="PASS" starttime="20200909 23:00:43.573" endtime="20200909 23:00:43.578"></status>
</kw>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${lsscsi_output}</arg>
<arg>\/dev\/[\\w\\d]+</arg>
<arg>Unable to find device ID for SCSI ID ${scsi_id}</arg>
</arguments>
<status status="PASS" starttime="20200909 23:00:43.578" endtime="20200909 23:00:43.579"></status>
</kw>
<msg timestamp="20200909 23:00:43.579" level="INFO">${device_id} = /dev/sr0</msg>
<status status="PASS" starttime="20200909 23:00:43.572" endtime="20200909 23:00:43.579"></status>
</kw>
<kw name="Get size of device id ${device_id} in bytes" library="linux_scsi_utils">
<doc>Decypher the output of lsblk to determine the size of the
specified device ID</doc>
<assign>
<var>${device_size}</var>
</assign>
<kw name="Remove String Using Regexp" library="String">
<doc>Removes ``patterns`` from the given ``string``.</doc>
<arguments>
<arg>${device_id}</arg>
<arg>\/dev\/</arg>
</arguments>
<assign>
<var>${bare_device_id}</var>
</assign>
<msg timestamp="20200909 23:00:43.581" level="INFO">${bare_device_id} = sr0</msg>
<status status="PASS" starttime="20200909 23:00:43.580" endtime="20200909 23:00:43.581"></status>
</kw>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>lsblk --raw --bytes | grep ${bare_device_id} | cut -f 4 --delimiter=" "</arg>
</arguments>
<assign>
<var>${lsblk_output}</var>
</assign>
<msg timestamp="20200909 23:00:43.583" level="INFO">Running command 'lsblk --raw --bytes | grep sr0 | cut -f 4 --delimiter=" " 2&gt;&amp;1'.</msg>
<msg timestamp="20200909 23:00:43.589" level="INFO">${lsblk_output} = 722468864</msg>
<status status="PASS" starttime="20200909 23:00:43.581" endtime="20200909 23:00:43.589"></status>
</kw>
<msg timestamp="20200909 23:00:43.590" level="INFO">${device_size} = 722468864</msg>
<status status="PASS" starttime="20200909 23:00:43.580" endtime="20200909 23:00:43.590"></status>
</kw>
<msg timestamp="20200909 23:00:43.590" level="INFO">${device_size} = 722468864</msg>
<status status="PASS" starttime="20200909 23:00:43.572" endtime="20200909 23:00:43.590"></status>
</kw>
<kw name="Get Size of RaSCSI Image ${image_name} in bytes" library="rascsi_utils">
<doc>Return the size of the specified disk image in bytes</doc>
<assign>
<var>${image_size}</var>
</assign>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>du -b /home/pi/images/${image_name} | cut -f 1</arg>
</arguments>
<assign>
<var>${size_output}</var>
</assign>
<msg timestamp="20200909 23:00:43.592" level="INFO">Executing command 'du -b /home/pi/images/ubuntu-12.04.5-server-amd64.iso | cut -f 1'.</msg>
<msg timestamp="20200909 23:00:43.616" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20200909 23:00:43.616" level="INFO">${size_output} = 722468864</msg>
<status status="PASS" starttime="20200909 23:00:43.591" endtime="20200909 23:00:43.616"></status>
</kw>
<msg timestamp="20200909 23:00:43.617" level="INFO">${image_size} = 722468864</msg>
<status status="PASS" starttime="20200909 23:00:43.590" endtime="20200909 23:00:43.617"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${device_size}</arg>
<arg>${image_size}</arg>
<arg>The device size did not match the image size</arg>
</arguments>
<status status="PASS" starttime="20200909 23:00:43.617" endtime="20200909 23:00:43.618"></status>
</kw>
<status status="PASS" starttime="20200909 23:00:43.571" endtime="20200909 23:00:43.618"></status>
</kw>
<kw name="And the filesystem type of SCSI ID 5 is iso9660" library="linux_scsi_utils">
<doc>Fetches the filesystem type of the specified SCSI ID and checks that it matches</doc>
<kw name="Get filesystem type of SCSI ID ${scsi_id}" library="linux_scsi_utils">
<doc>Get the type of file system for the specified scsi ID. It needs to be
mounted in order for this command to work</doc>
<assign>
<var>${actual_fs_type}</var>
</assign>
<kw name="Get device id for SCSI ID ${scsi_id}" library="linux_scsi_utils">
<doc>Lookup the device name (ex /dev/sr0) for the specified SCSI ID</doc>
<assign>
<var>${device_id}</var>
</assign>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>lsscsi --brief |grep \\\\[0\\\\:0\\\\:${scsi_id}\\\\:0\\\\] | cut -f 5 --delimiter=" "</arg>
</arguments>
<assign>
<var>${lsscsi_output}</var>
</assign>
<msg timestamp="20200909 23:00:43.625" level="INFO">Running command 'lsscsi --brief |grep \\[0\\:0\\:5\\:0\\] | cut -f 5 --delimiter=" " 2&gt;&amp;1'.</msg>
<msg timestamp="20200909 23:00:43.628" level="INFO">${lsscsi_output} = /dev/sr0</msg>
<status status="PASS" starttime="20200909 23:00:43.621" endtime="20200909 23:00:43.628"></status>
</kw>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${lsscsi_output}</arg>
<arg>\/dev\/[\\w\\d]+</arg>
<arg>Unable to find device ID for SCSI ID ${scsi_id}</arg>
</arguments>
<status status="PASS" starttime="20200909 23:00:43.628" endtime="20200909 23:00:43.629"></status>
</kw>
<msg timestamp="20200909 23:00:43.629" level="INFO">${device_id} = /dev/sr0</msg>
<status status="PASS" starttime="20200909 23:00:43.621" endtime="20200909 23:00:43.629"></status>
</kw>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>mount | grep ${device_id}</arg>
</arguments>
<assign>
<var>${raw}</var>
</assign>
<msg timestamp="20200909 23:00:43.631" level="INFO">Running command 'mount | grep /dev/sr0 2&gt;&amp;1'.</msg>
<msg timestamp="20200909 23:00:43.634" level="INFO">${raw} = /dev/sr0 on /mnt/ubuntu type iso9660 (ro,relatime,nojoliet,check=s,map=n,blocksize=2048)</msg>
<status status="PASS" starttime="20200909 23:00:43.629" endtime="20200909 23:00:43.634"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${raw}</arg>
</arguments>
<msg timestamp="20200909 23:00:43.635" level="INFO">/dev/sr0 on /mnt/ubuntu type iso9660 (ro,relatime,nojoliet,check=s,map=n,blocksize=2048)</msg>
<status status="PASS" starttime="20200909 23:00:43.635" endtime="20200909 23:00:43.635"></status>
</kw>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>mount |grep ${device_id} |cut --delimiter=" " -f 5</arg>
</arguments>
<assign>
<var>${filesystem_type}</var>
</assign>
<msg timestamp="20200909 23:00:43.638" level="INFO">Running command 'mount |grep /dev/sr0 |cut --delimiter=" " -f 5 2&gt;&amp;1'.</msg>
<msg timestamp="20200909 23:00:43.642" level="INFO">${filesystem_type} = iso9660</msg>
<status status="PASS" starttime="20200909 23:00:43.635" endtime="20200909 23:00:43.643"></status>
</kw>
<msg timestamp="20200909 23:00:43.643" level="INFO">${actual_fs_type} = iso9660</msg>
<status status="PASS" starttime="20200909 23:00:43.620" endtime="20200909 23:00:43.643"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${fs_type}</arg>
<arg>${actual_fs_type}</arg>
<arg>Incorrect file system type detected</arg>
</arguments>
<status status="PASS" starttime="20200909 23:00:43.643" endtime="20200909 23:00:43.644"></status>
</kw>
<status status="PASS" starttime="20200909 23:00:43.619" endtime="20200909 23:00:43.644"></status>
</kw>
<kw name="And the file pics/debian.jpg in the ubuntu directory matches the original in ISO ubuntu-12.04.5-server-amd64.iso" library="linux_scsi_utils">
<doc>Check that the file ready by the host through the RaSCSI interface and make sure
that the checksum matches the original file extracted from the ISO</doc>
<kw name="Get checksum of file /mnt/${directory}/${filename}" library="linux_scsi_utils">
<assign>
<var>${host_file_checksum}</var>
</assign>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>md5sum ${full_file_path} | cut -f 1 --delimiter=" "</arg>
</arguments>
<assign>
<var>${checksum}</var>
</assign>
<msg timestamp="20200909 23:00:43.648" level="INFO">Running command 'md5sum /mnt/ubuntu/pics/debian.jpg | cut -f 1 --delimiter=" " 2&gt;&amp;1'.</msg>
<msg timestamp="20200909 23:00:43.861" level="INFO">${checksum} = 16ff51c168405e575d32bae001f280e4</msg>
<status status="PASS" starttime="20200909 23:00:43.646" endtime="20200909 23:00:43.861"></status>
</kw>
<msg timestamp="20200909 23:00:43.862" level="INFO">${host_file_checksum} = 16ff51c168405e575d32bae001f280e4</msg>
<status status="PASS" starttime="20200909 23:00:43.645" endtime="20200909 23:00:43.862"></status>
</kw>
<kw name="Get checksum of ${filename} from ISO ${drive_image} on the RaSCSI Host" library="rascsi_utils">
<doc>Extracts the specified file from the ISO, calculates the checksum
then returns that value</doc>
<assign>
<var>${rascsi_file_checksum}</var>
</assign>
<kw name="Generate Random String" library="String">
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<arguments>
<arg>10</arg>
<arg>[LETTERS]</arg>
</arguments>
<assign>
<var>${temp_dirname}</var>
</assign>
<msg timestamp="20200909 23:00:43.864" level="INFO">${temp_dirname} = lYCSjDJuPM</msg>
<status status="PASS" starttime="20200909 23:00:43.863" endtime="20200909 23:00:43.864"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>mkdir /tmp/${temp_dirname}</arg>
<arg>sudo=True</arg>
<arg>sudo_password=${Rascsi_Password}</arg>
</arguments>
<msg timestamp="20200909 23:00:43.865" level="INFO">Executing command 'sudo mkdir /tmp/lYCSjDJuPM'.</msg>
<msg timestamp="20200909 23:00:44.051" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" starttime="20200909 23:00:43.864" endtime="20200909 23:00:44.052"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>mount /home/pi/images/${image_name} /tmp/${temp_dirname}</arg>
<arg>sudo=True</arg>
<arg>sudo_password=${Rascsi_Password}</arg>
</arguments>
<msg timestamp="20200909 23:00:44.053" level="INFO">Executing command 'sudo mount /home/pi/images/ubuntu-12.04.5-server-amd64.iso /tmp/lYCSjDJuPM'.</msg>
<msg timestamp="20200909 23:00:44.464" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" starttime="20200909 23:00:44.052" endtime="20200909 23:00:44.464"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>md5sum /tmp/${temp_dirname}/${filename} | cut -f 1 --delimiter=" "</arg>
</arguments>
<assign>
<var>${checksum}</var>
</assign>
<msg timestamp="20200909 23:00:44.466" level="INFO">Executing command 'md5sum /tmp/lYCSjDJuPM/pics/debian.jpg | cut -f 1 --delimiter=" "'.</msg>
<msg timestamp="20200909 23:00:44.542" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20200909 23:00:44.542" level="INFO">${checksum} = 16ff51c168405e575d32bae001f280e4</msg>
<status status="PASS" starttime="20200909 23:00:44.465" endtime="20200909 23:00:44.542"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>umount /tmp/${temp_dirname}</arg>
<arg>sudo=True</arg>
<arg>sudo_password=${Rascsi_Password}</arg>
</arguments>
<msg timestamp="20200909 23:00:44.543" level="INFO">Executing command 'sudo umount /tmp/lYCSjDJuPM'.</msg>
<msg timestamp="20200909 23:00:45.046" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" starttime="20200909 23:00:44.542" endtime="20200909 23:00:45.046"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm -rf /tmp/${temp_dirname}</arg>
<arg>sudo=True</arg>
<arg>sudo_password=${Rascsi_Password}</arg>
</arguments>
<msg timestamp="20200909 23:00:45.047" level="INFO">Executing command 'sudo rm -rf /tmp/lYCSjDJuPM'.</msg>
<msg timestamp="20200909 23:00:45.391" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" starttime="20200909 23:00:45.046" endtime="20200909 23:00:45.391"></status>
</kw>
<msg timestamp="20200909 23:00:45.392" level="INFO">${rascsi_file_checksum} = 16ff51c168405e575d32bae001f280e4</msg>
<status status="PASS" starttime="20200909 23:00:43.862" endtime="20200909 23:00:45.392"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_file_checksum}</arg>
<arg>${rascsi_file_checksum}</arg>
<arg>${filename} did not match between the host and the RaSCSI</arg>
</arguments>
<status status="PASS" starttime="20200909 23:00:45.392" endtime="20200909 23:00:45.393"></status>
</kw>
<status status="PASS" starttime="20200909 23:00:43.645" endtime="20200909 23:00:45.393"></status>
</kw>
<kw name="And the file install/vmlinuz in the ubuntu directory matches the original in ISO ubuntu-12.04.5-server-amd64.iso" library="linux_scsi_utils">
<doc>Check that the file ready by the host through the RaSCSI interface and make sure
that the checksum matches the original file extracted from the ISO</doc>
<kw name="Get checksum of file /mnt/${directory}/${filename}" library="linux_scsi_utils">
<assign>
<var>${host_file_checksum}</var>
</assign>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>md5sum ${full_file_path} | cut -f 1 --delimiter=" "</arg>
</arguments>
<assign>
<var>${checksum}</var>
</assign>
<msg timestamp="20200909 23:00:45.399" level="INFO">Running command 'md5sum /mnt/ubuntu/install/vmlinuz | cut -f 1 --delimiter=" " 2&gt;&amp;1'.</msg>
<msg timestamp="20200909 23:00:51.828" level="INFO">${checksum} = 3591ccf80b0181819ec7ba951abdfe18</msg>
<status status="PASS" starttime="20200909 23:00:45.396" endtime="20200909 23:00:51.828"></status>
</kw>
<msg timestamp="20200909 23:00:51.829" level="INFO">${host_file_checksum} = 3591ccf80b0181819ec7ba951abdfe18</msg>
<status status="PASS" starttime="20200909 23:00:45.395" endtime="20200909 23:00:51.829"></status>
</kw>
<kw name="Get checksum of ${filename} from ISO ${drive_image} on the RaSCSI Host" library="rascsi_utils">
<doc>Extracts the specified file from the ISO, calculates the checksum
then returns that value</doc>
<assign>
<var>${rascsi_file_checksum}</var>
</assign>
<kw name="Generate Random String" library="String">
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<arguments>
<arg>10</arg>
<arg>[LETTERS]</arg>
</arguments>
<assign>
<var>${temp_dirname}</var>
</assign>
<msg timestamp="20200909 23:00:51.831" level="INFO">${temp_dirname} = gltykSzehR</msg>
<status status="PASS" starttime="20200909 23:00:51.831" endtime="20200909 23:00:51.831"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>mkdir /tmp/${temp_dirname}</arg>
<arg>sudo=True</arg>
<arg>sudo_password=${Rascsi_Password}</arg>
</arguments>
<msg timestamp="20200909 23:00:51.833" level="INFO">Executing command 'sudo mkdir /tmp/gltykSzehR'.</msg>
<msg timestamp="20200909 23:00:52.008" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" starttime="20200909 23:00:51.832" endtime="20200909 23:00:52.008"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>mount /home/pi/images/${image_name} /tmp/${temp_dirname}</arg>
<arg>sudo=True</arg>
<arg>sudo_password=${Rascsi_Password}</arg>
</arguments>
<msg timestamp="20200909 23:00:52.010" level="INFO">Executing command 'sudo mount /home/pi/images/ubuntu-12.04.5-server-amd64.iso /tmp/gltykSzehR'.</msg>
<msg timestamp="20200909 23:00:52.282" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" starttime="20200909 23:00:52.008" endtime="20200909 23:00:52.282"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>md5sum /tmp/${temp_dirname}/${filename} | cut -f 1 --delimiter=" "</arg>
</arguments>
<assign>
<var>${checksum}</var>
</assign>
<msg timestamp="20200909 23:00:52.283" level="INFO">Executing command 'md5sum /tmp/gltykSzehR/install/vmlinuz | cut -f 1 --delimiter=" "'.</msg>
<msg timestamp="20200909 23:00:52.433" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20200909 23:00:52.433" level="INFO">${checksum} = 3591ccf80b0181819ec7ba951abdfe18</msg>
<status status="PASS" starttime="20200909 23:00:52.283" endtime="20200909 23:00:52.433"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>umount /tmp/${temp_dirname}</arg>
<arg>sudo=True</arg>
<arg>sudo_password=${Rascsi_Password}</arg>
</arguments>
<msg timestamp="20200909 23:00:52.434" level="INFO">Executing command 'sudo umount /tmp/gltykSzehR'.</msg>
<msg timestamp="20200909 23:00:52.932" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" starttime="20200909 23:00:52.434" endtime="20200909 23:00:52.933"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm -rf /tmp/${temp_dirname}</arg>
<arg>sudo=True</arg>
<arg>sudo_password=${Rascsi_Password}</arg>
</arguments>
<msg timestamp="20200909 23:00:52.934" level="INFO">Executing command 'sudo rm -rf /tmp/gltykSzehR'.</msg>
<msg timestamp="20200909 23:00:53.291" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" starttime="20200909 23:00:52.933" endtime="20200909 23:00:53.292"></status>
</kw>
<msg timestamp="20200909 23:00:53.292" level="INFO">${rascsi_file_checksum} = 3591ccf80b0181819ec7ba951abdfe18</msg>
<status status="PASS" starttime="20200909 23:00:51.830" endtime="20200909 23:00:53.292"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_file_checksum}</arg>
<arg>${rascsi_file_checksum}</arg>
<arg>${filename} did not match between the host and the RaSCSI</arg>
</arguments>
<status status="PASS" starttime="20200909 23:00:53.293" endtime="20200909 23:00:53.293"></status>
</kw>
<status status="PASS" starttime="20200909 23:00:45.394" endtime="20200909 23:00:53.294"></status>
</kw>
<kw name="Unmount SCSI ID 5" library="linux_scsi_utils" type="teardown">
<doc>Un-mount the drive specified. Currently, this doesn't use the drive ID. However,
it needs to be updated in the future to un-moune the correct device, instead of
of being hard-coded to a specific path.</doc>
<kw name="Get device id for SCSI ID ${scsi_id}" library="linux_scsi_utils">
<doc>Lookup the device name (ex /dev/sr0) for the specified SCSI ID</doc>
<assign>
<var>${device}</var>
</assign>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>lsscsi --brief |grep \\\\[0\\\\:0\\\\:${scsi_id}\\\\:0\\\\] | cut -f 5 --delimiter=" "</arg>
</arguments>
<assign>
<var>${lsscsi_output}</var>
</assign>
<msg timestamp="20200909 23:00:53.299" level="INFO">Running command 'lsscsi --brief |grep \\[0\\:0\\:5\\:0\\] | cut -f 5 --delimiter=" " 2&gt;&amp;1'.</msg>
<msg timestamp="20200909 23:00:53.303" level="INFO">${lsscsi_output} = /dev/sr0</msg>
<status status="PASS" starttime="20200909 23:00:53.296" endtime="20200909 23:00:53.304"></status>
</kw>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${lsscsi_output}</arg>
<arg>\/dev\/[\\w\\d]+</arg>
<arg>Unable to find device ID for SCSI ID ${scsi_id}</arg>
</arguments>
<status status="PASS" starttime="20200909 23:00:53.304" endtime="20200909 23:00:53.305"></status>
</kw>
<msg timestamp="20200909 23:00:53.306" level="INFO">${device} = /dev/sr0</msg>
<status status="PASS" starttime="20200909 23:00:53.295" endtime="20200909 23:00:53.306"></status>
</kw>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>sudo umount ${device}</arg>
</arguments>
<msg timestamp="20200909 23:00:53.309" level="INFO">Running command 'sudo umount /dev/sr0 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20200909 23:00:53.306" endtime="20200909 23:00:53.331"></status>
</kw>
<status status="PASS" starttime="20200909 23:00:53.294" endtime="20200909 23:00:53.332"></status>
</kw>
<doc>Mount a pre-made IDS-9660 formatted ISO and check
that it is read correctly</doc>
<status status="PASS" starttime="20200909 23:00:37.645" endtime="20200909 23:00:53.332" critical="yes"></status>
</test>
<test id="s1-s1-t3" name="CD-ROM Read Speed is as fast as expected">
<kw name="Given CD-ROM Drive is attached as SCSI ID 2" library="rascsi_utils">
<doc>Attaches a CD-ROM device (without any media) to the RaSCSI</doc>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rasctl -i ${scsi_id} -c attach -t cd</arg>
</arguments>
<assign>
<var>${rasctl_output}</var>
</assign>
<msg timestamp="20200909 23:00:53.335" level="INFO">Executing command 'rasctl -i 2 -c attach -t cd'.</msg>
<msg timestamp="20200909 23:00:53.370" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20200909 23:00:53.370" level="INFO">${rasctl_output} = </msg>
<status status="PASS" starttime="20200909 23:00:53.335" endtime="20200909 23:00:53.371"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${rasctl_output}</arg>
</arguments>
<msg timestamp="20200909 23:00:53.371" level="INFO"></msg>
<status status="PASS" starttime="20200909 23:00:53.371" endtime="20200909 23:00:53.372"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rasctl -l</arg>
</arguments>
<assign>
<var>${rasctl_output}</var>
</assign>
<msg timestamp="20200909 23:00:53.372" level="INFO">Executing command 'rasctl -l'.</msg>
<msg timestamp="20200909 23:00:53.452" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20200909 23:00:53.452" level="INFO">${rasctl_output} = 
+----+----+------+-------------------------------------
| ID | UN | TYPE | DEVICE STATUS
+----+----+------+-------------------------------------
|  2 |  0 | SCCD | NO MEDIA
|  5 |  0 | SCCD | /home/p...</msg>
<status status="PASS" starttime="20200909 23:00:53.372" endtime="20200909 23:00:53.452"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${rasctl_output}</arg>
</arguments>
<msg timestamp="20200909 23:00:53.453" level="INFO">
+----+----+------+-------------------------------------
| ID | UN | TYPE | DEVICE STATUS
+----+----+------+-------------------------------------
|  2 |  0 | SCCD | NO MEDIA
|  5 |  0 | SCCD | /home/pi/images/ubuntu-12.04.5-server-amd64.iso(WRITEPROTECT)
+----+----+------+-------------------------------------</msg>
<status status="PASS" starttime="20200909 23:00:53.453" endtime="20200909 23:00:53.453"></status>
</kw>
<kw name="Rescan SCSI Bus" library="linux_scsi_utils">
<doc>Commands Linux to re-scan the SCSI bus on the local host</doc>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>sudo bash -c "echo \\"- - -\\" &gt; /sys/class/scsi_host/host0/scan"</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20200909 23:00:53.457" level="INFO">Running command 'sudo bash -c "echo \"- - -\" &gt; /sys/class/scsi_host/host0/scan"'.</msg>
<msg timestamp="20200909 23:00:57.432" level="INFO">${result} = </msg>
<status status="PASS" starttime="20200909 23:00:53.454" endtime="20200909 23:00:57.432"></status>
</kw>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>lsscsi</arg>
</arguments>
<assign>
<var>${lsscsi}</var>
</assign>
<msg timestamp="20200909 23:00:57.438" level="INFO">Running command 'lsscsi 2&gt;&amp;1'.</msg>
<msg timestamp="20200909 23:00:57.442" level="INFO">${lsscsi} = [0:0:2:0]    cd/dvd  RaSCSI   CD-ROM CDU-55S   0147  /dev/sr2 
[0:0:5:0]    cd/dvd  RaSCSI   CD-ROM CDU-55S   0147  /dev/sr0 
[1:0:0:0]    disk    ATA      WDC WD2500JS-41S 6C04  /dev/sdb 
[2:0:0:0]  ...</msg>
<status status="PASS" starttime="20200909 23:00:57.433" endtime="20200909 23:00:57.442"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${lsscsi}</arg>
</arguments>
<msg timestamp="20200909 23:00:57.444" level="INFO">[0:0:2:0]    cd/dvd  RaSCSI   CD-ROM CDU-55S   0147  /dev/sr2 
[0:0:5:0]    cd/dvd  RaSCSI   CD-ROM CDU-55S   0147  /dev/sr0 
[1:0:0:0]    disk    ATA      WDC WD2500JS-41S 6C04  /dev/sdb 
[2:0:0:0]    cd/dvd  TSSTcorp DVDWBD SH-B123L  SB04  /dev/sr1 
[4:0:0:0]    disk    ATA      Hitachi HDS72101 A41A  /dev/sdc </msg>
<status status="PASS" starttime="20200909 23:00:57.443" endtime="20200909 23:00:57.444"></status>
</kw>
<status status="PASS" starttime="20200909 23:00:53.454" endtime="20200909 23:00:57.445"></status>
</kw>
<status status="PASS" starttime="20200909 23:00:53.334" endtime="20200909 23:00:57.445"></status>
</kw>
<kw name="When insert Removable Media ubuntu-12.04.5-server-amd64.iso into SCSI ID 2" library="rascsi_utils">
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rasctl -c insert -i ${scsi_id} -f /home/pi/images/${image}</arg>
</arguments>
<msg timestamp="20200909 23:00:57.447" level="INFO">Executing command 'rasctl -c insert -i 2 -f /home/pi/images/ubuntu-12.04.5-server-amd64.iso'.</msg>
<msg timestamp="20200909 23:00:57.483" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" starttime="20200909 23:00:57.446" endtime="20200909 23:00:57.483"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rasctl -l</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20200909 23:00:57.483" level="INFO">Executing command 'rasctl -l'.</msg>
<msg timestamp="20200909 23:00:57.552" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20200909 23:00:57.553" level="INFO">${result} = 
+----+----+------+-------------------------------------
| ID | UN | TYPE | DEVICE STATUS
+----+----+------+-------------------------------------
|  2 |  0 | SCCD | /home/pi/images/ubuntu-12.04.5-serv...</msg>
<status status="PASS" starttime="20200909 23:00:57.483" endtime="20200909 23:00:57.553"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20200909 23:00:57.554" level="INFO">
+----+----+------+-------------------------------------
| ID | UN | TYPE | DEVICE STATUS
+----+----+------+-------------------------------------
|  2 |  0 | SCCD | /home/pi/images/ubuntu-12.04.5-server-amd64.iso(WRITEPROTECT)
|  5 |  0 | SCCD | /home/pi/images/ubuntu-12.04.5-server-amd64.iso(WRITEPROTECT)
+----+----+------+-------------------------------------</msg>
<status status="PASS" starttime="20200909 23:00:57.553" endtime="20200909 23:00:57.554"></status>
</kw>
<status status="PASS" starttime="20200909 23:00:57.446" endtime="20200909 23:00:57.554"></status>
</kw>
<kw name="Then the measured read speed for 1 megabytes of data from SCSI ID 2 is greater than 750 KB/s" library="linux_scsi_utils">
<doc>Read the specified amount of data from the SCSI drive and make sure that it is
greater than the specified threshold</doc>
<kw name="Get device id for SCSI ID ${scsi_id}" library="linux_scsi_utils">
<doc>Lookup the device name (ex /dev/sr0) for the specified SCSI ID</doc>
<assign>
<var>${device_id}</var>
</assign>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>lsscsi --brief |grep \\\\[0\\\\:0\\\\:${scsi_id}\\\\:0\\\\] | cut -f 5 --delimiter=" "</arg>
</arguments>
<assign>
<var>${lsscsi_output}</var>
</assign>
<msg timestamp="20200909 23:00:57.560" level="INFO">Running command 'lsscsi --brief |grep \\[0\\:0\\:2\\:0\\] | cut -f 5 --delimiter=" " 2&gt;&amp;1'.</msg>
<msg timestamp="20200909 23:00:57.564" level="INFO">${lsscsi_output} = /dev/sr2</msg>
<status status="PASS" starttime="20200909 23:00:57.557" endtime="20200909 23:00:57.564"></status>
</kw>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${lsscsi_output}</arg>
<arg>\/dev\/[\\w\\d]+</arg>
<arg>Unable to find device ID for SCSI ID ${scsi_id}</arg>
</arguments>
<status status="PASS" starttime="20200909 23:00:57.565" endtime="20200909 23:00:57.566"></status>
</kw>
<msg timestamp="20200909 23:00:57.566" level="INFO">${device_id} = /dev/sr2</msg>
<status status="PASS" starttime="20200909 23:00:57.556" endtime="20200909 23:00:57.567"></status>
</kw>
<kw name="Generate Random String" library="String">
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<arguments>
<arg>10</arg>
<arg>[LETTERS]</arg>
</arguments>
<assign>
<var>${temp_filename}</var>
</assign>
<msg timestamp="20200909 23:00:57.567" level="INFO">${temp_filename} = UHaZqePHzX</msg>
<status status="PASS" starttime="20200909 23:00:57.567" endtime="20200909 23:00:57.567"></status>
</kw>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>sudo dd if=${device_id} of=/tmp/${temp_filename} bs=1M count=${data_size} 2&gt;&amp;1 | awk '/copied/ {print $8}'</arg>
</arguments>
<assign>
<var>${dd_time}</var>
</assign>
<msg timestamp="20200909 23:00:57.571" level="INFO">Running command 'sudo dd if=/dev/sr2 of=/tmp/UHaZqePHzX bs=1M count=1 2&gt;&amp;1 | awk '/copied/ {print $8}''.</msg>
<msg timestamp="20200909 23:00:58.917" level="INFO">${dd_time} = 1.2221</msg>
<status status="PASS" starttime="20200909 23:00:57.568" endtime="20200909 23:00:58.917"></status>
</kw>
<kw name="Convert To Number" library="BuiltIn">
<doc>Converts the given item to a floating point number.</doc>
<arguments>
<arg>${dd_time}</arg>
</arguments>
<assign>
<var>${copy_time}</var>
</assign>
<msg timestamp="20200909 23:00:58.918" level="INFO">${copy_time} = 1.2221</msg>
<status status="PASS" starttime="20200909 23:00:58.918" endtime="20200909 23:00:58.919"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the result.</doc>
<arguments>
<arg>(${data_size}*1024)/${copy_time}</arg>
</arguments>
<assign>
<var>${speed}</var>
</assign>
<msg timestamp="20200909 23:00:58.920" level="INFO">${speed} = 837.9019720153834</msg>
<status status="PASS" starttime="20200909 23:00:58.919" endtime="20200909 23:00:58.920"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Measured copy speed was ${speed} KB/s</arg>
</arguments>
<msg timestamp="20200909 23:00:58.920" level="INFO">Measured copy speed was 837.9019720153834 KB/s</msg>
<status status="PASS" starttime="20200909 23:00:58.920" endtime="20200909 23:00:58.920"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${speed}&gt;=${expected_speed}</arg>
<arg>Measured speed was not greater than minimum</arg>
</arguments>
<status status="PASS" starttime="20200909 23:00:58.921" endtime="20200909 23:00:58.922"></status>
</kw>
<kw name="Remove temporary file UHaZqePHzX" library="linux_scsi_utils" type="teardown">
<doc>Deletes the specified file from the temp directory</doc>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>sudo rm /tmp/${file_name}</arg>
</arguments>
<msg timestamp="20200909 23:00:58.926" level="INFO">Running command 'sudo rm /tmp/UHaZqePHzX 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20200909 23:00:58.923" endtime="20200909 23:00:58.937"></status>
</kw>
<status status="PASS" starttime="20200909 23:00:58.922" endtime="20200909 23:00:58.937"></status>
</kw>
<status status="PASS" starttime="20200909 23:00:57.555" endtime="20200909 23:00:58.937"></status>
</kw>
<kw name="Then the measured read speed for 10 megabytes of data from SCSI ID 2 is greater than 950 KB/s" library="linux_scsi_utils">
<doc>Read the specified amount of data from the SCSI drive and make sure that it is
greater than the specified threshold</doc>
<kw name="Get device id for SCSI ID ${scsi_id}" library="linux_scsi_utils">
<doc>Lookup the device name (ex /dev/sr0) for the specified SCSI ID</doc>
<assign>
<var>${device_id}</var>
</assign>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>lsscsi --brief |grep \\\\[0\\\\:0\\\\:${scsi_id}\\\\:0\\\\] | cut -f 5 --delimiter=" "</arg>
</arguments>
<assign>
<var>${lsscsi_output}</var>
</assign>
<msg timestamp="20200909 23:00:58.941" level="INFO">Running command 'lsscsi --brief |grep \\[0\\:0\\:2\\:0\\] | cut -f 5 --delimiter=" " 2&gt;&amp;1'.</msg>
<msg timestamp="20200909 23:00:58.945" level="INFO">${lsscsi_output} = /dev/sr2</msg>
<status status="PASS" starttime="20200909 23:00:58.939" endtime="20200909 23:00:58.945"></status>
</kw>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${lsscsi_output}</arg>
<arg>\/dev\/[\\w\\d]+</arg>
<arg>Unable to find device ID for SCSI ID ${scsi_id}</arg>
</arguments>
<status status="PASS" starttime="20200909 23:00:58.945" endtime="20200909 23:00:58.946"></status>
</kw>
<msg timestamp="20200909 23:00:58.946" level="INFO">${device_id} = /dev/sr2</msg>
<status status="PASS" starttime="20200909 23:00:58.938" endtime="20200909 23:00:58.946"></status>
</kw>
<kw name="Generate Random String" library="String">
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<arguments>
<arg>10</arg>
<arg>[LETTERS]</arg>
</arguments>
<assign>
<var>${temp_filename}</var>
</assign>
<msg timestamp="20200909 23:00:58.947" level="INFO">${temp_filename} = CyoMyUpRDB</msg>
<status status="PASS" starttime="20200909 23:00:58.946" endtime="20200909 23:00:58.947"></status>
</kw>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>sudo dd if=${device_id} of=/tmp/${temp_filename} bs=1M count=${data_size} 2&gt;&amp;1 | awk '/copied/ {print $8}'</arg>
</arguments>
<assign>
<var>${dd_time}</var>
</assign>
<msg timestamp="20200909 23:00:58.950" level="INFO">Running command 'sudo dd if=/dev/sr2 of=/tmp/CyoMyUpRDB bs=1M count=10 2&gt;&amp;1 | awk '/copied/ {print $8}''.</msg>
<msg timestamp="20200909 23:01:08.461" level="INFO">${dd_time} = 9.07548</msg>
<status status="PASS" starttime="20200909 23:00:58.947" endtime="20200909 23:01:08.461"></status>
</kw>
<kw name="Convert To Number" library="BuiltIn">
<doc>Converts the given item to a floating point number.</doc>
<arguments>
<arg>${dd_time}</arg>
</arguments>
<assign>
<var>${copy_time}</var>
</assign>
<msg timestamp="20200909 23:01:08.463" level="INFO">${copy_time} = 9.07548</msg>
<status status="PASS" starttime="20200909 23:01:08.462" endtime="20200909 23:01:08.463"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the result.</doc>
<arguments>
<arg>(${data_size}*1024)/${copy_time}</arg>
</arguments>
<assign>
<var>${speed}</var>
</assign>
<msg timestamp="20200909 23:01:08.464" level="INFO">${speed} = 1128.3149761775685</msg>
<status status="PASS" starttime="20200909 23:01:08.464" endtime="20200909 23:01:08.464"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Measured copy speed was ${speed} KB/s</arg>
</arguments>
<msg timestamp="20200909 23:01:08.465" level="INFO">Measured copy speed was 1128.3149761775685 KB/s</msg>
<status status="PASS" starttime="20200909 23:01:08.465" endtime="20200909 23:01:08.465"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${speed}&gt;=${expected_speed}</arg>
<arg>Measured speed was not greater than minimum</arg>
</arguments>
<status status="PASS" starttime="20200909 23:01:08.465" endtime="20200909 23:01:08.466"></status>
</kw>
<kw name="Remove temporary file CyoMyUpRDB" library="linux_scsi_utils" type="teardown">
<doc>Deletes the specified file from the temp directory</doc>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>sudo rm /tmp/${file_name}</arg>
</arguments>
<msg timestamp="20200909 23:01:08.471" level="INFO">Running command 'sudo rm /tmp/CyoMyUpRDB 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20200909 23:01:08.468" endtime="20200909 23:01:08.483"></status>
</kw>
<status status="PASS" starttime="20200909 23:01:08.467" endtime="20200909 23:01:08.484"></status>
</kw>
<status status="PASS" starttime="20200909 23:00:58.938" endtime="20200909 23:01:08.484"></status>
</kw>
<kw name="And the measured read speed for 100 megabytes of data from SCSI ID 2 is greater than 950 KB/s" library="linux_scsi_utils">
<doc>Read the specified amount of data from the SCSI drive and make sure that it is
greater than the specified threshold</doc>
<kw name="Get device id for SCSI ID ${scsi_id}" library="linux_scsi_utils">
<doc>Lookup the device name (ex /dev/sr0) for the specified SCSI ID</doc>
<assign>
<var>${device_id}</var>
</assign>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>lsscsi --brief |grep \\\\[0\\\\:0\\\\:${scsi_id}\\\\:0\\\\] | cut -f 5 --delimiter=" "</arg>
</arguments>
<assign>
<var>${lsscsi_output}</var>
</assign>
<msg timestamp="20200909 23:01:08.489" level="INFO">Running command 'lsscsi --brief |grep \\[0\\:0\\:2\\:0\\] | cut -f 5 --delimiter=" " 2&gt;&amp;1'.</msg>
<msg timestamp="20200909 23:01:08.492" level="INFO">${lsscsi_output} = /dev/sr2</msg>
<status status="PASS" starttime="20200909 23:01:08.486" endtime="20200909 23:01:08.492"></status>
</kw>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${lsscsi_output}</arg>
<arg>\/dev\/[\\w\\d]+</arg>
<arg>Unable to find device ID for SCSI ID ${scsi_id}</arg>
</arguments>
<status status="PASS" starttime="20200909 23:01:08.493" endtime="20200909 23:01:08.494"></status>
</kw>
<msg timestamp="20200909 23:01:08.494" level="INFO">${device_id} = /dev/sr2</msg>
<status status="PASS" starttime="20200909 23:01:08.486" endtime="20200909 23:01:08.494"></status>
</kw>
<kw name="Generate Random String" library="String">
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<arguments>
<arg>10</arg>
<arg>[LETTERS]</arg>
</arguments>
<assign>
<var>${temp_filename}</var>
</assign>
<msg timestamp="20200909 23:01:08.495" level="INFO">${temp_filename} = xIvpeqtaKu</msg>
<status status="PASS" starttime="20200909 23:01:08.495" endtime="20200909 23:01:08.495"></status>
</kw>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>sudo dd if=${device_id} of=/tmp/${temp_filename} bs=1M count=${data_size} 2&gt;&amp;1 | awk '/copied/ {print $8}'</arg>
</arguments>
<assign>
<var>${dd_time}</var>
</assign>
<msg timestamp="20200909 23:01:08.497" level="INFO">Running command 'sudo dd if=/dev/sr2 of=/tmp/xIvpeqtaKu bs=1M count=100 2&gt;&amp;1 | awk '/copied/ {print $8}''.</msg>
<msg timestamp="20200909 23:02:50.212" level="INFO">${dd_time} = 101.704</msg>
<status status="PASS" starttime="20200909 23:01:08.495" endtime="20200909 23:02:50.212"></status>
</kw>
<kw name="Convert To Number" library="BuiltIn">
<doc>Converts the given item to a floating point number.</doc>
<arguments>
<arg>${dd_time}</arg>
</arguments>
<assign>
<var>${copy_time}</var>
</assign>
<msg timestamp="20200909 23:02:50.214" level="INFO">${copy_time} = 101.704</msg>
<status status="PASS" starttime="20200909 23:02:50.213" endtime="20200909 23:02:50.214"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the result.</doc>
<arguments>
<arg>(${data_size}*1024)/${copy_time}</arg>
</arguments>
<assign>
<var>${speed}</var>
</assign>
<msg timestamp="20200909 23:02:50.215" level="INFO">${speed} = 1006.84338865728</msg>
<status status="PASS" starttime="20200909 23:02:50.214" endtime="20200909 23:02:50.215"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Measured copy speed was ${speed} KB/s</arg>
</arguments>
<msg timestamp="20200909 23:02:50.216" level="INFO">Measured copy speed was 1006.84338865728 KB/s</msg>
<status status="PASS" starttime="20200909 23:02:50.215" endtime="20200909 23:02:50.216"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${speed}&gt;=${expected_speed}</arg>
<arg>Measured speed was not greater than minimum</arg>
</arguments>
<status status="PASS" starttime="20200909 23:02:50.216" endtime="20200909 23:02:50.218"></status>
</kw>
<kw name="Remove temporary file xIvpeqtaKu" library="linux_scsi_utils" type="teardown">
<doc>Deletes the specified file from the temp directory</doc>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>sudo rm /tmp/${file_name}</arg>
</arguments>
<msg timestamp="20200909 23:02:50.223" level="INFO">Running command 'sudo rm /tmp/xIvpeqtaKu 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20200909 23:02:50.220" endtime="20200909 23:02:50.252"></status>
</kw>
<status status="PASS" starttime="20200909 23:02:50.219" endtime="20200909 23:02:50.253"></status>
</kw>
<status status="PASS" starttime="20200909 23:01:08.485" endtime="20200909 23:02:50.253"></status>
</kw>
<kw name="Run Keywords" library="BuiltIn" type="teardown">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Detach all RaSCSI SCSI Devices</arg>
<arg>AND</arg>
<arg>Delete all SCSI devices from Linux</arg>
<arg>AND</arg>
<arg>Delete all RaSCSI drive images</arg>
</arguments>
<kw name="Detach all RaSCSI SCSI Devices" library="rascsi_utils">
<doc>Send detach commands for all of the SCSI IDs to make sure that there
aren't any left over before/after a test</doc>
<kw name="${scsi_id} IN RANGE [ 0 | 7 ]" type="for">
<kw name="${scsi_id} = 0" type="foritem">
<kw name="Detach RaSCSI SCSI ID ${scsi_id}" library="rascsi_utils">
<doc>Detaches the specified SCSI ID from Rascsi</doc>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rasctl -c detach -i ${scsi_id}</arg>
</arguments>
<msg timestamp="20200909 23:02:50.258" level="INFO">Executing command 'rasctl -c detach -i 0'.</msg>
<msg timestamp="20200909 23:02:50.282" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" starttime="20200909 23:02:50.257" endtime="20200909 23:02:50.282"></status>
</kw>
<status status="PASS" starttime="20200909 23:02:50.256" endtime="20200909 23:02:50.282"></status>
</kw>
<status status="PASS" starttime="20200909 23:02:50.256" endtime="20200909 23:02:50.283"></status>
</kw>
<kw name="${scsi_id} = 1" type="foritem">
<kw name="Detach RaSCSI SCSI ID ${scsi_id}" library="rascsi_utils">
<doc>Detaches the specified SCSI ID from Rascsi</doc>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rasctl -c detach -i ${scsi_id}</arg>
</arguments>
<msg timestamp="20200909 23:02:50.284" level="INFO">Executing command 'rasctl -c detach -i 1'.</msg>
<msg timestamp="20200909 23:02:50.340" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" starttime="20200909 23:02:50.284" endtime="20200909 23:02:50.340"></status>
</kw>
<status status="PASS" starttime="20200909 23:02:50.283" endtime="20200909 23:02:50.340"></status>
</kw>
<status status="PASS" starttime="20200909 23:02:50.283" endtime="20200909 23:02:50.341"></status>
</kw>
<kw name="${scsi_id} = 2" type="foritem">
<kw name="Detach RaSCSI SCSI ID ${scsi_id}" library="rascsi_utils">
<doc>Detaches the specified SCSI ID from Rascsi</doc>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rasctl -c detach -i ${scsi_id}</arg>
</arguments>
<msg timestamp="20200909 23:02:50.342" level="INFO">Executing command 'rasctl -c detach -i 2'.</msg>
<msg timestamp="20200909 23:02:50.400" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" starttime="20200909 23:02:50.342" endtime="20200909 23:02:50.400"></status>
</kw>
<status status="PASS" starttime="20200909 23:02:50.341" endtime="20200909 23:02:50.400"></status>
</kw>
<status status="PASS" starttime="20200909 23:02:50.341" endtime="20200909 23:02:50.400"></status>
</kw>
<kw name="${scsi_id} = 3" type="foritem">
<kw name="Detach RaSCSI SCSI ID ${scsi_id}" library="rascsi_utils">
<doc>Detaches the specified SCSI ID from Rascsi</doc>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rasctl -c detach -i ${scsi_id}</arg>
</arguments>
<msg timestamp="20200909 23:02:50.402" level="INFO">Executing command 'rasctl -c detach -i 3'.</msg>
<msg timestamp="20200909 23:02:50.460" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" starttime="20200909 23:02:50.402" endtime="20200909 23:02:50.460"></status>
</kw>
<status status="PASS" starttime="20200909 23:02:50.401" endtime="20200909 23:02:50.460"></status>
</kw>
<status status="PASS" starttime="20200909 23:02:50.401" endtime="20200909 23:02:50.460"></status>
</kw>
<kw name="${scsi_id} = 4" type="foritem">
<kw name="Detach RaSCSI SCSI ID ${scsi_id}" library="rascsi_utils">
<doc>Detaches the specified SCSI ID from Rascsi</doc>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rasctl -c detach -i ${scsi_id}</arg>
</arguments>
<msg timestamp="20200909 23:02:50.462" level="INFO">Executing command 'rasctl -c detach -i 4'.</msg>
<msg timestamp="20200909 23:02:50.520" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" starttime="20200909 23:02:50.462" endtime="20200909 23:02:50.520"></status>
</kw>
<status status="PASS" starttime="20200909 23:02:50.461" endtime="20200909 23:02:50.520"></status>
</kw>
<status status="PASS" starttime="20200909 23:02:50.461" endtime="20200909 23:02:50.521"></status>
</kw>
<kw name="${scsi_id} = 5" type="foritem">
<kw name="Detach RaSCSI SCSI ID ${scsi_id}" library="rascsi_utils">
<doc>Detaches the specified SCSI ID from Rascsi</doc>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rasctl -c detach -i ${scsi_id}</arg>
</arguments>
<msg timestamp="20200909 23:02:50.522" level="INFO">Executing command 'rasctl -c detach -i 5'.</msg>
<msg timestamp="20200909 23:02:50.580" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" starttime="20200909 23:02:50.522" endtime="20200909 23:02:50.580"></status>
</kw>
<status status="PASS" starttime="20200909 23:02:50.521" endtime="20200909 23:02:50.580"></status>
</kw>
<status status="PASS" starttime="20200909 23:02:50.521" endtime="20200909 23:02:50.581"></status>
</kw>
<kw name="${scsi_id} = 6" type="foritem">
<kw name="Detach RaSCSI SCSI ID ${scsi_id}" library="rascsi_utils">
<doc>Detaches the specified SCSI ID from Rascsi</doc>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rasctl -c detach -i ${scsi_id}</arg>
</arguments>
<msg timestamp="20200909 23:02:50.583" level="INFO">Executing command 'rasctl -c detach -i 6'.</msg>
<msg timestamp="20200909 23:02:50.640" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" starttime="20200909 23:02:50.582" endtime="20200909 23:02:50.640"></status>
</kw>
<status status="PASS" starttime="20200909 23:02:50.581" endtime="20200909 23:02:50.641"></status>
</kw>
<status status="PASS" starttime="20200909 23:02:50.581" endtime="20200909 23:02:50.641"></status>
</kw>
<status status="PASS" starttime="20200909 23:02:50.256" endtime="20200909 23:02:50.641"></status>
</kw>
<status status="PASS" starttime="20200909 23:02:50.255" endtime="20200909 23:02:50.641"></status>
</kw>
<kw name="Delete all SCSI devices from Linux" library="linux_scsi_utils">
<doc>Remove all SCSI IDs from the Linux SCSI driver</doc>
<kw name="${scsi_id} IN RANGE [ 0 | 7 ]" type="for">
<kw name="${scsi_id} = 0" type="foritem">
<kw name="Delete SCSI ID ${scsi_id} from Linux" library="linux_scsi_utils">
<doc>Remove a SCSI ID from Linux. Basically, will un-do the Scan action</doc>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>sudo bash -c "echo 1 &gt; /sys/class/scsi_device/0:0:${scsi_id}:0/device/delete" 2&gt;&amp;1 &gt; /dev/null</arg>
</arguments>
<msg timestamp="20200909 23:02:50.646" level="INFO">Running command 'sudo bash -c "echo 1 &gt; /sys/class/scsi_device/0:0:0:0/device/delete" 2&gt;&amp;1 &gt; /dev/null'.</msg>
<status status="PASS" starttime="20200909 23:02:50.643" endtime="20200909 23:02:50.659"></status>
</kw>
<status status="PASS" starttime="20200909 23:02:50.643" endtime="20200909 23:02:50.659"></status>
</kw>
<status status="PASS" starttime="20200909 23:02:50.642" endtime="20200909 23:02:50.659"></status>
</kw>
<kw name="${scsi_id} = 1" type="foritem">
<kw name="Delete SCSI ID ${scsi_id} from Linux" library="linux_scsi_utils">
<doc>Remove a SCSI ID from Linux. Basically, will un-do the Scan action</doc>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>sudo bash -c "echo 1 &gt; /sys/class/scsi_device/0:0:${scsi_id}:0/device/delete" 2&gt;&amp;1 &gt; /dev/null</arg>
</arguments>
<msg timestamp="20200909 23:02:50.664" level="INFO">Running command 'sudo bash -c "echo 1 &gt; /sys/class/scsi_device/0:0:1:0/device/delete" 2&gt;&amp;1 &gt; /dev/null'.</msg>
<status status="PASS" starttime="20200909 23:02:50.661" endtime="20200909 23:02:50.672"></status>
</kw>
<status status="PASS" starttime="20200909 23:02:50.660" endtime="20200909 23:02:50.673"></status>
</kw>
<status status="PASS" starttime="20200909 23:02:50.659" endtime="20200909 23:02:50.673"></status>
</kw>
<kw name="${scsi_id} = 2" type="foritem">
<kw name="Delete SCSI ID ${scsi_id} from Linux" library="linux_scsi_utils">
<doc>Remove a SCSI ID from Linux. Basically, will un-do the Scan action</doc>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>sudo bash -c "echo 1 &gt; /sys/class/scsi_device/0:0:${scsi_id}:0/device/delete" 2&gt;&amp;1 &gt; /dev/null</arg>
</arguments>
<msg timestamp="20200909 23:02:50.677" level="INFO">Running command 'sudo bash -c "echo 1 &gt; /sys/class/scsi_device/0:0:2:0/device/delete" 2&gt;&amp;1 &gt; /dev/null'.</msg>
<status status="PASS" starttime="20200909 23:02:50.675" endtime="20200909 23:02:50.737"></status>
</kw>
<status status="PASS" starttime="20200909 23:02:50.674" endtime="20200909 23:02:50.737"></status>
</kw>
<status status="PASS" starttime="20200909 23:02:50.673" endtime="20200909 23:02:50.738"></status>
</kw>
<kw name="${scsi_id} = 3" type="foritem">
<kw name="Delete SCSI ID ${scsi_id} from Linux" library="linux_scsi_utils">
<doc>Remove a SCSI ID from Linux. Basically, will un-do the Scan action</doc>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>sudo bash -c "echo 1 &gt; /sys/class/scsi_device/0:0:${scsi_id}:0/device/delete" 2&gt;&amp;1 &gt; /dev/null</arg>
</arguments>
<msg timestamp="20200909 23:02:50.742" level="INFO">Running command 'sudo bash -c "echo 1 &gt; /sys/class/scsi_device/0:0:3:0/device/delete" 2&gt;&amp;1 &gt; /dev/null'.</msg>
<status status="PASS" starttime="20200909 23:02:50.739" endtime="20200909 23:02:50.750"></status>
</kw>
<status status="PASS" starttime="20200909 23:02:50.738" endtime="20200909 23:02:50.750"></status>
</kw>
<status status="PASS" starttime="20200909 23:02:50.738" endtime="20200909 23:02:50.750"></status>
</kw>
<kw name="${scsi_id} = 4" type="foritem">
<kw name="Delete SCSI ID ${scsi_id} from Linux" library="linux_scsi_utils">
<doc>Remove a SCSI ID from Linux. Basically, will un-do the Scan action</doc>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>sudo bash -c "echo 1 &gt; /sys/class/scsi_device/0:0:${scsi_id}:0/device/delete" 2&gt;&amp;1 &gt; /dev/null</arg>
</arguments>
<msg timestamp="20200909 23:02:50.753" level="INFO">Running command 'sudo bash -c "echo 1 &gt; /sys/class/scsi_device/0:0:4:0/device/delete" 2&gt;&amp;1 &gt; /dev/null'.</msg>
<status status="PASS" starttime="20200909 23:02:50.751" endtime="20200909 23:02:50.760"></status>
</kw>
<status status="PASS" starttime="20200909 23:02:50.750" endtime="20200909 23:02:50.761"></status>
</kw>
<status status="PASS" starttime="20200909 23:02:50.750" endtime="20200909 23:02:50.761"></status>
</kw>
<kw name="${scsi_id} = 5" type="foritem">
<kw name="Delete SCSI ID ${scsi_id} from Linux" library="linux_scsi_utils">
<doc>Remove a SCSI ID from Linux. Basically, will un-do the Scan action</doc>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>sudo bash -c "echo 1 &gt; /sys/class/scsi_device/0:0:${scsi_id}:0/device/delete" 2&gt;&amp;1 &gt; /dev/null</arg>
</arguments>
<msg timestamp="20200909 23:02:50.764" level="INFO">Running command 'sudo bash -c "echo 1 &gt; /sys/class/scsi_device/0:0:5:0/device/delete" 2&gt;&amp;1 &gt; /dev/null'.</msg>
<status status="PASS" starttime="20200909 23:02:50.762" endtime="20200909 23:02:50.792"></status>
</kw>
<status status="PASS" starttime="20200909 23:02:50.761" endtime="20200909 23:02:50.793"></status>
</kw>
<status status="PASS" starttime="20200909 23:02:50.761" endtime="20200909 23:02:50.793"></status>
</kw>
<kw name="${scsi_id} = 6" type="foritem">
<kw name="Delete SCSI ID ${scsi_id} from Linux" library="linux_scsi_utils">
<doc>Remove a SCSI ID from Linux. Basically, will un-do the Scan action</doc>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>sudo bash -c "echo 1 &gt; /sys/class/scsi_device/0:0:${scsi_id}:0/device/delete" 2&gt;&amp;1 &gt; /dev/null</arg>
</arguments>
<msg timestamp="20200909 23:02:50.797" level="INFO">Running command 'sudo bash -c "echo 1 &gt; /sys/class/scsi_device/0:0:6:0/device/delete" 2&gt;&amp;1 &gt; /dev/null'.</msg>
<status status="PASS" starttime="20200909 23:02:50.795" endtime="20200909 23:02:50.812"></status>
</kw>
<status status="PASS" starttime="20200909 23:02:50.794" endtime="20200909 23:02:50.812"></status>
</kw>
<status status="PASS" starttime="20200909 23:02:50.793" endtime="20200909 23:02:50.813"></status>
</kw>
<status status="PASS" starttime="20200909 23:02:50.642" endtime="20200909 23:02:50.813"></status>
</kw>
<status status="PASS" starttime="20200909 23:02:50.641" endtime="20200909 23:02:50.813"></status>
</kw>
<kw name="Delete all RaSCSI drive images" library="rascsi_utils">
<doc>Delete all of the temporary drive images that were created on the RaSCSI host</doc>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>/home/pi/images/tmp_*</arg>
</arguments>
<msg timestamp="20200909 23:02:50.815" level="INFO" html="yes">File '&lt;a href="file:///home/pi/images/tmp_*"&gt;/home/pi/images/tmp_*&lt;/a&gt;' does not exist.</msg>
<status status="PASS" starttime="20200909 23:02:50.814" endtime="20200909 23:02:50.815"></status>
</kw>
<status status="PASS" starttime="20200909 23:02:50.813" endtime="20200909 23:02:50.815"></status>
</kw>
<status status="PASS" starttime="20200909 23:02:50.254" endtime="20200909 23:02:50.815"></status>
</kw>
<doc>Check that the read speed from the emulated CD-ROM is within
the expected range. This should detect if a change cause the
drive to slow down significantly</doc>
<status status="PASS" starttime="20200909 23:00:53.333" endtime="20200909 23:02:50.815" critical="yes"></status>
</test>
<test id="s1-s1-t4" name="Create an ISO from a RaSCSI CD-ROM device and verify it matches">
<kw name="Given CD-ROM Drive is attached as SCSI ID 0" library="rascsi_utils">
<doc>Attaches a CD-ROM device (without any media) to the RaSCSI</doc>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rasctl -i ${scsi_id} -c attach -t cd</arg>
</arguments>
<assign>
<var>${rasctl_output}</var>
</assign>
<msg timestamp="20200909 23:02:50.817" level="INFO">Executing command 'rasctl -i 0 -c attach -t cd'.</msg>
<msg timestamp="20200909 23:02:50.852" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20200909 23:02:50.852" level="INFO">${rasctl_output} = </msg>
<status status="PASS" starttime="20200909 23:02:50.817" endtime="20200909 23:02:50.853"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${rasctl_output}</arg>
</arguments>
<msg timestamp="20200909 23:02:50.853" level="INFO"></msg>
<status status="PASS" starttime="20200909 23:02:50.853" endtime="20200909 23:02:50.853"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rasctl -l</arg>
</arguments>
<assign>
<var>${rasctl_output}</var>
</assign>
<msg timestamp="20200909 23:02:50.854" level="INFO">Executing command 'rasctl -l'.</msg>
<msg timestamp="20200909 23:02:50.921" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20200909 23:02:50.922" level="INFO">${rasctl_output} = 
+----+----+------+-------------------------------------
| ID | UN | TYPE | DEVICE STATUS
+----+----+------+-------------------------------------
|  0 |  0 | SCCD | NO MEDIA
+----+----+------+--------...</msg>
<status status="PASS" starttime="20200909 23:02:50.854" endtime="20200909 23:02:50.922"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${rasctl_output}</arg>
</arguments>
<msg timestamp="20200909 23:02:50.923" level="INFO">
+----+----+------+-------------------------------------
| ID | UN | TYPE | DEVICE STATUS
+----+----+------+-------------------------------------
|  0 |  0 | SCCD | NO MEDIA
+----+----+------+-------------------------------------</msg>
<status status="PASS" starttime="20200909 23:02:50.922" endtime="20200909 23:02:50.923"></status>
</kw>
<kw name="Rescan SCSI Bus" library="linux_scsi_utils">
<doc>Commands Linux to re-scan the SCSI bus on the local host</doc>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>sudo bash -c "echo \\"- - -\\" &gt; /sys/class/scsi_host/host0/scan"</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20200909 23:02:50.927" level="INFO">Running command 'sudo bash -c "echo \"- - -\" &gt; /sys/class/scsi_host/host0/scan"'.</msg>
<msg timestamp="20200909 23:02:55.346" level="INFO">${result} = </msg>
<status status="PASS" starttime="20200909 23:02:50.924" endtime="20200909 23:02:55.346"></status>
</kw>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>lsscsi</arg>
</arguments>
<assign>
<var>${lsscsi}</var>
</assign>
<msg timestamp="20200909 23:02:55.350" level="INFO">Running command 'lsscsi 2&gt;&amp;1'.</msg>
<msg timestamp="20200909 23:02:55.353" level="INFO">${lsscsi} = [0:0:0:0]    cd/dvd  RaSCSI   CD-ROM CDU-55S   0147  /dev/sr0 
[1:0:0:0]    disk    ATA      WDC WD2500JS-41S 6C04  /dev/sdb 
[2:0:0:0]    cd/dvd  TSSTcorp DVDWBD SH-B123L  SB04  /dev/sr1 
[4:0:0:0]  ...</msg>
<status status="PASS" starttime="20200909 23:02:55.346" endtime="20200909 23:02:55.353"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${lsscsi}</arg>
</arguments>
<msg timestamp="20200909 23:02:55.355" level="INFO">[0:0:0:0]    cd/dvd  RaSCSI   CD-ROM CDU-55S   0147  /dev/sr0 
[1:0:0:0]    disk    ATA      WDC WD2500JS-41S 6C04  /dev/sdb 
[2:0:0:0]    cd/dvd  TSSTcorp DVDWBD SH-B123L  SB04  /dev/sr1 
[4:0:0:0]    disk    ATA      Hitachi HDS72101 A41A  /dev/sdc </msg>
<status status="PASS" starttime="20200909 23:02:55.354" endtime="20200909 23:02:55.355"></status>
</kw>
<status status="PASS" starttime="20200909 23:02:50.923" endtime="20200909 23:02:55.355"></status>
</kw>
<status status="PASS" starttime="20200909 23:02:50.817" endtime="20200909 23:02:55.356"></status>
</kw>
<kw name="When Insert removable media simtower.iso into SCSI ID 0" library="rascsi_utils">
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rasctl -c insert -i ${scsi_id} -f /home/pi/images/${image}</arg>
</arguments>
<msg timestamp="20200909 23:02:55.358" level="INFO">Executing command 'rasctl -c insert -i 0 -f /home/pi/images/simtower.iso'.</msg>
<msg timestamp="20200909 23:02:55.394" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" starttime="20200909 23:02:55.358" endtime="20200909 23:02:55.394"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rasctl -l</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20200909 23:02:55.395" level="INFO">Executing command 'rasctl -l'.</msg>
<msg timestamp="20200909 23:02:55.471" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20200909 23:02:55.472" level="INFO">${result} = 
+----+----+------+-------------------------------------
| ID | UN | TYPE | DEVICE STATUS
+----+----+------+-------------------------------------
|  0 |  0 | SCCD | /home/pi/images/simtower.iso(WRITEP...</msg>
<status status="PASS" starttime="20200909 23:02:55.394" endtime="20200909 23:02:55.472"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20200909 23:02:55.472" level="INFO">
+----+----+------+-------------------------------------
| ID | UN | TYPE | DEVICE STATUS
+----+----+------+-------------------------------------
|  0 |  0 | SCCD | /home/pi/images/simtower.iso(WRITEPROTECT)
+----+----+------+-------------------------------------</msg>
<status status="PASS" starttime="20200909 23:02:55.472" endtime="20200909 23:02:55.473"></status>
</kw>
<status status="PASS" starttime="20200909 23:02:55.357" endtime="20200909 23:02:55.473"></status>
</kw>
<kw name="And create an image named dup_simtower.iso from SCSI ID 0" library="linux_scsi_utils">
<doc>Will create a disk image from the specified SCSI device</doc>
<kw name="Get device id for SCSI ID ${scsi_id}" library="linux_scsi_utils">
<doc>Lookup the device name (ex /dev/sr0) for the specified SCSI ID</doc>
<assign>
<var>${device_id}</var>
</assign>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>lsscsi --brief |grep \\\\[0\\\\:0\\\\:${scsi_id}\\\\:0\\\\] | cut -f 5 --delimiter=" "</arg>
</arguments>
<assign>
<var>${lsscsi_output}</var>
</assign>
<msg timestamp="20200909 23:02:55.479" level="INFO">Running command 'lsscsi --brief |grep \\[0\\:0\\:0\\:0\\] | cut -f 5 --delimiter=" " 2&gt;&amp;1'.</msg>
<msg timestamp="20200909 23:02:55.483" level="INFO">${lsscsi_output} = /dev/sr0</msg>
<status status="PASS" starttime="20200909 23:02:55.475" endtime="20200909 23:02:55.483"></status>
</kw>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${lsscsi_output}</arg>
<arg>\/dev\/[\\w\\d]+</arg>
<arg>Unable to find device ID for SCSI ID ${scsi_id}</arg>
</arguments>
<status status="PASS" starttime="20200909 23:02:55.484" endtime="20200909 23:02:55.485"></status>
</kw>
<msg timestamp="20200909 23:02:55.485" level="INFO">${device_id} = /dev/sr0</msg>
<status status="PASS" starttime="20200909 23:02:55.474" endtime="20200909 23:02:55.486"></status>
</kw>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>sudo dd if=${device_id} of=/tmp/${iso_name} bs=1M 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${dd_output}</var>
</assign>
<msg timestamp="20200909 23:02:55.489" level="INFO">Running command 'sudo dd if=/dev/sr0 of=/tmp/dup_simtower.iso bs=1M 2&gt;&amp;1'.</msg>
<msg timestamp="20200909 23:03:11.897" level="INFO">${dd_output} = 16+1 records in
16+1 records out
16947200 bytes (17 MB, 16 MiB) copied, 16.3933 s, 1.0 MB/s</msg>
<status status="PASS" starttime="20200909 23:02:55.486" endtime="20200909 23:03:11.897"></status>
</kw>
<kw name="File Should Not Be Empty" library="OperatingSystem">
<doc>Fails if the specified directory is empty.</doc>
<arguments>
<arg>/tmp/${iso_name}</arg>
</arguments>
<msg timestamp="20200909 23:03:11.898" level="INFO" html="yes">File '&lt;a href="file:///tmp/dup_simtower.iso"&gt;/tmp/dup_simtower.iso&lt;/a&gt;' contains 16947200 bytes.</msg>
<status status="PASS" starttime="20200909 23:03:11.897" endtime="20200909 23:03:11.898"></status>
</kw>
<status status="PASS" starttime="20200909 23:02:55.474" endtime="20200909 23:03:11.899"></status>
</kw>
<kw name="Then local file dup_simtower.iso matches RaSCSI file simtower.iso" library="linux_scsi_utils">
<doc>Calculates the checksum of the local file and the remote file
then ensures that they match</doc>
<kw name="Get checksum of file /tmp/${local_file_name}" library="linux_scsi_utils">
<assign>
<var>${local_file_checksum}</var>
</assign>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>md5sum ${full_file_path} | cut -f 1 --delimiter=" "</arg>
</arguments>
<assign>
<var>${checksum}</var>
</assign>
<msg timestamp="20200909 23:03:11.905" level="INFO">Running command 'md5sum /tmp/dup_simtower.iso | cut -f 1 --delimiter=" " 2&gt;&amp;1'.</msg>
<msg timestamp="20200909 23:03:11.945" level="INFO">${checksum} = 0f5f35896fba232c29d8462d9126495c</msg>
<status status="PASS" starttime="20200909 23:03:11.901" endtime="20200909 23:03:11.945"></status>
</kw>
<msg timestamp="20200909 23:03:11.946" level="INFO">${local_file_checksum} = 0f5f35896fba232c29d8462d9126495c</msg>
<status status="PASS" starttime="20200909 23:03:11.901" endtime="20200909 23:03:11.946"></status>
</kw>
<kw name="Get checksum of RaSCSI Image ${rascsi_file_name}" library="rascsi_utils">
<doc>Calculate the checksum of the disk image on the RaSCSI host</doc>
<assign>
<var>${remote_file_checksum}</var>
</assign>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>md5sum /home/pi/images/${image_name} | cut -f 1 --delimiter=" "</arg>
</arguments>
<assign>
<var>${checksum}</var>
</assign>
<msg timestamp="20200909 23:03:11.947" level="INFO">Executing command 'md5sum /home/pi/images/simtower.iso | cut -f 1 --delimiter=" "'.</msg>
<msg timestamp="20200909 23:03:12.063" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20200909 23:03:12.063" level="INFO">${checksum} = 0f5f35896fba232c29d8462d9126495c</msg>
<status status="PASS" starttime="20200909 23:03:11.947" endtime="20200909 23:03:12.063"></status>
</kw>
<msg timestamp="20200909 23:03:12.064" level="INFO">${remote_file_checksum} = 0f5f35896fba232c29d8462d9126495c</msg>
<status status="PASS" starttime="20200909 23:03:11.946" endtime="20200909 23:03:12.064"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${local_file_checksum}</arg>
<arg>${remote_file_checksum}</arg>
<arg>Files did not match</arg>
</arguments>
<status status="PASS" starttime="20200909 23:03:12.064" endtime="20200909 23:03:12.065"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:11.900" endtime="20200909 23:03:12.065"></status>
</kw>
<kw name="Remove temporary file dup_simtower.iso" library="linux_scsi_utils" type="teardown">
<doc>Deletes the specified file from the temp directory</doc>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>sudo rm /tmp/${file_name}</arg>
</arguments>
<msg timestamp="20200909 23:03:12.070" level="INFO">Running command 'sudo rm /tmp/dup_simtower.iso 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20200909 23:03:12.067" endtime="20200909 23:03:12.085"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:12.066" endtime="20200909 23:03:12.085"></status>
</kw>
<doc>On the RaSCSI, we'll mount an ISO, then on the host system, we
will generate a new ISO from the emulated CD-ROM and make sure
that it matches the original</doc>
<status status="PASS" starttime="20200909 23:02:50.816" endtime="20200909 23:03:12.086" critical="yes"></status>
</test>
<kw name="Run Keywords" library="BuiltIn" type="teardown">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Detach all RaSCSI SCSI Devices</arg>
<arg>AND</arg>
<arg>Delete all SCSI devices from Linux</arg>
<arg>AND</arg>
<arg>Close All Connections</arg>
</arguments>
<kw name="Detach all RaSCSI SCSI Devices" library="rascsi_utils">
<doc>Send detach commands for all of the SCSI IDs to make sure that there
aren't any left over before/after a test</doc>
<kw name="${scsi_id} IN RANGE [ 0 | 7 ]" type="for">
<kw name="${scsi_id} = 0" type="foritem">
<kw name="Detach RaSCSI SCSI ID ${scsi_id}" library="rascsi_utils">
<doc>Detaches the specified SCSI ID from Rascsi</doc>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rasctl -c detach -i ${scsi_id}</arg>
</arguments>
<msg timestamp="20200909 23:03:12.091" level="INFO">Executing command 'rasctl -c detach -i 0'.</msg>
<msg timestamp="20200909 23:03:12.130" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" starttime="20200909 23:03:12.091" endtime="20200909 23:03:12.130"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:12.090" endtime="20200909 23:03:12.131"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:12.090" endtime="20200909 23:03:12.131"></status>
</kw>
<kw name="${scsi_id} = 1" type="foritem">
<kw name="Detach RaSCSI SCSI ID ${scsi_id}" library="rascsi_utils">
<doc>Detaches the specified SCSI ID from Rascsi</doc>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rasctl -c detach -i ${scsi_id}</arg>
</arguments>
<msg timestamp="20200909 23:03:12.132" level="INFO">Executing command 'rasctl -c detach -i 1'.</msg>
<msg timestamp="20200909 23:03:12.190" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" starttime="20200909 23:03:12.132" endtime="20200909 23:03:12.190"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:12.131" endtime="20200909 23:03:12.190"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:12.131" endtime="20200909 23:03:12.190"></status>
</kw>
<kw name="${scsi_id} = 2" type="foritem">
<kw name="Detach RaSCSI SCSI ID ${scsi_id}" library="rascsi_utils">
<doc>Detaches the specified SCSI ID from Rascsi</doc>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rasctl -c detach -i ${scsi_id}</arg>
</arguments>
<msg timestamp="20200909 23:03:12.192" level="INFO">Executing command 'rasctl -c detach -i 2'.</msg>
<msg timestamp="20200909 23:03:12.250" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" starttime="20200909 23:03:12.192" endtime="20200909 23:03:12.250"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:12.191" endtime="20200909 23:03:12.251"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:12.191" endtime="20200909 23:03:12.251"></status>
</kw>
<kw name="${scsi_id} = 3" type="foritem">
<kw name="Detach RaSCSI SCSI ID ${scsi_id}" library="rascsi_utils">
<doc>Detaches the specified SCSI ID from Rascsi</doc>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rasctl -c detach -i ${scsi_id}</arg>
</arguments>
<msg timestamp="20200909 23:03:12.252" level="INFO">Executing command 'rasctl -c detach -i 3'.</msg>
<msg timestamp="20200909 23:03:12.310" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" starttime="20200909 23:03:12.252" endtime="20200909 23:03:12.310"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:12.251" endtime="20200909 23:03:12.310"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:12.251" endtime="20200909 23:03:12.310"></status>
</kw>
<kw name="${scsi_id} = 4" type="foritem">
<kw name="Detach RaSCSI SCSI ID ${scsi_id}" library="rascsi_utils">
<doc>Detaches the specified SCSI ID from Rascsi</doc>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rasctl -c detach -i ${scsi_id}</arg>
</arguments>
<msg timestamp="20200909 23:03:12.312" level="INFO">Executing command 'rasctl -c detach -i 4'.</msg>
<msg timestamp="20200909 23:03:12.370" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" starttime="20200909 23:03:12.311" endtime="20200909 23:03:12.370"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:12.311" endtime="20200909 23:03:12.370"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:12.310" endtime="20200909 23:03:12.370"></status>
</kw>
<kw name="${scsi_id} = 5" type="foritem">
<kw name="Detach RaSCSI SCSI ID ${scsi_id}" library="rascsi_utils">
<doc>Detaches the specified SCSI ID from Rascsi</doc>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rasctl -c detach -i ${scsi_id}</arg>
</arguments>
<msg timestamp="20200909 23:03:12.372" level="INFO">Executing command 'rasctl -c detach -i 5'.</msg>
<msg timestamp="20200909 23:03:12.430" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" starttime="20200909 23:03:12.371" endtime="20200909 23:03:12.430"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:12.371" endtime="20200909 23:03:12.430"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:12.371" endtime="20200909 23:03:12.430"></status>
</kw>
<kw name="${scsi_id} = 6" type="foritem">
<kw name="Detach RaSCSI SCSI ID ${scsi_id}" library="rascsi_utils">
<doc>Detaches the specified SCSI ID from Rascsi</doc>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rasctl -c detach -i ${scsi_id}</arg>
</arguments>
<msg timestamp="20200909 23:03:12.432" level="INFO">Executing command 'rasctl -c detach -i 6'.</msg>
<msg timestamp="20200909 23:03:12.490" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" starttime="20200909 23:03:12.431" endtime="20200909 23:03:12.490"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:12.431" endtime="20200909 23:03:12.490"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:12.430" endtime="20200909 23:03:12.490"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:12.089" endtime="20200909 23:03:12.490"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:12.089" endtime="20200909 23:03:12.491"></status>
</kw>
<kw name="Delete all SCSI devices from Linux" library="linux_scsi_utils">
<doc>Remove all SCSI IDs from the Linux SCSI driver</doc>
<kw name="${scsi_id} IN RANGE [ 0 | 7 ]" type="for">
<kw name="${scsi_id} = 0" type="foritem">
<kw name="Delete SCSI ID ${scsi_id} from Linux" library="linux_scsi_utils">
<doc>Remove a SCSI ID from Linux. Basically, will un-do the Scan action</doc>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>sudo bash -c "echo 1 &gt; /sys/class/scsi_device/0:0:${scsi_id}:0/device/delete" 2&gt;&amp;1 &gt; /dev/null</arg>
</arguments>
<msg timestamp="20200909 23:03:12.496" level="INFO">Running command 'sudo bash -c "echo 1 &gt; /sys/class/scsi_device/0:0:0:0/device/delete" 2&gt;&amp;1 &gt; /dev/null'.</msg>
<status status="PASS" starttime="20200909 23:03:12.493" endtime="20200909 23:03:12.520"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:12.492" endtime="20200909 23:03:12.521"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:12.492" endtime="20200909 23:03:12.521"></status>
</kw>
<kw name="${scsi_id} = 1" type="foritem">
<kw name="Delete SCSI ID ${scsi_id} from Linux" library="linux_scsi_utils">
<doc>Remove a SCSI ID from Linux. Basically, will un-do the Scan action</doc>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>sudo bash -c "echo 1 &gt; /sys/class/scsi_device/0:0:${scsi_id}:0/device/delete" 2&gt;&amp;1 &gt; /dev/null</arg>
</arguments>
<msg timestamp="20200909 23:03:12.525" level="INFO">Running command 'sudo bash -c "echo 1 &gt; /sys/class/scsi_device/0:0:1:0/device/delete" 2&gt;&amp;1 &gt; /dev/null'.</msg>
<status status="PASS" starttime="20200909 23:03:12.522" endtime="20200909 23:03:12.535"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:12.522" endtime="20200909 23:03:12.535"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:12.521" endtime="20200909 23:03:12.535"></status>
</kw>
<kw name="${scsi_id} = 2" type="foritem">
<kw name="Delete SCSI ID ${scsi_id} from Linux" library="linux_scsi_utils">
<doc>Remove a SCSI ID from Linux. Basically, will un-do the Scan action</doc>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>sudo bash -c "echo 1 &gt; /sys/class/scsi_device/0:0:${scsi_id}:0/device/delete" 2&gt;&amp;1 &gt; /dev/null</arg>
</arguments>
<msg timestamp="20200909 23:03:12.539" level="INFO">Running command 'sudo bash -c "echo 1 &gt; /sys/class/scsi_device/0:0:2:0/device/delete" 2&gt;&amp;1 &gt; /dev/null'.</msg>
<status status="PASS" starttime="20200909 23:03:12.537" endtime="20200909 23:03:12.547"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:12.536" endtime="20200909 23:03:12.547"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:12.536" endtime="20200909 23:03:12.547"></status>
</kw>
<kw name="${scsi_id} = 3" type="foritem">
<kw name="Delete SCSI ID ${scsi_id} from Linux" library="linux_scsi_utils">
<doc>Remove a SCSI ID from Linux. Basically, will un-do the Scan action</doc>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>sudo bash -c "echo 1 &gt; /sys/class/scsi_device/0:0:${scsi_id}:0/device/delete" 2&gt;&amp;1 &gt; /dev/null</arg>
</arguments>
<msg timestamp="20200909 23:03:12.550" level="INFO">Running command 'sudo bash -c "echo 1 &gt; /sys/class/scsi_device/0:0:3:0/device/delete" 2&gt;&amp;1 &gt; /dev/null'.</msg>
<status status="PASS" starttime="20200909 23:03:12.548" endtime="20200909 23:03:12.557"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:12.547" endtime="20200909 23:03:12.558"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:12.547" endtime="20200909 23:03:12.558"></status>
</kw>
<kw name="${scsi_id} = 4" type="foritem">
<kw name="Delete SCSI ID ${scsi_id} from Linux" library="linux_scsi_utils">
<doc>Remove a SCSI ID from Linux. Basically, will un-do the Scan action</doc>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>sudo bash -c "echo 1 &gt; /sys/class/scsi_device/0:0:${scsi_id}:0/device/delete" 2&gt;&amp;1 &gt; /dev/null</arg>
</arguments>
<msg timestamp="20200909 23:03:12.562" level="INFO">Running command 'sudo bash -c "echo 1 &gt; /sys/class/scsi_device/0:0:4:0/device/delete" 2&gt;&amp;1 &gt; /dev/null'.</msg>
<status status="PASS" starttime="20200909 23:03:12.559" endtime="20200909 23:03:12.569"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:12.558" endtime="20200909 23:03:12.570"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:12.558" endtime="20200909 23:03:12.570"></status>
</kw>
<kw name="${scsi_id} = 5" type="foritem">
<kw name="Delete SCSI ID ${scsi_id} from Linux" library="linux_scsi_utils">
<doc>Remove a SCSI ID from Linux. Basically, will un-do the Scan action</doc>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>sudo bash -c "echo 1 &gt; /sys/class/scsi_device/0:0:${scsi_id}:0/device/delete" 2&gt;&amp;1 &gt; /dev/null</arg>
</arguments>
<msg timestamp="20200909 23:03:12.573" level="INFO">Running command 'sudo bash -c "echo 1 &gt; /sys/class/scsi_device/0:0:5:0/device/delete" 2&gt;&amp;1 &gt; /dev/null'.</msg>
<status status="PASS" starttime="20200909 23:03:12.571" endtime="20200909 23:03:12.580"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:12.570" endtime="20200909 23:03:12.580"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:12.570" endtime="20200909 23:03:12.580"></status>
</kw>
<kw name="${scsi_id} = 6" type="foritem">
<kw name="Delete SCSI ID ${scsi_id} from Linux" library="linux_scsi_utils">
<doc>Remove a SCSI ID from Linux. Basically, will un-do the Scan action</doc>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>sudo bash -c "echo 1 &gt; /sys/class/scsi_device/0:0:${scsi_id}:0/device/delete" 2&gt;&amp;1 &gt; /dev/null</arg>
</arguments>
<msg timestamp="20200909 23:03:12.584" level="INFO">Running command 'sudo bash -c "echo 1 &gt; /sys/class/scsi_device/0:0:6:0/device/delete" 2&gt;&amp;1 &gt; /dev/null'.</msg>
<status status="PASS" starttime="20200909 23:03:12.581" endtime="20200909 23:03:12.591"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:12.581" endtime="20200909 23:03:12.591"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:12.581" endtime="20200909 23:03:12.591"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:12.491" endtime="20200909 23:03:12.591"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:12.491" endtime="20200909 23:03:12.591"></status>
</kw>
<kw name="Close All Connections" library="SSHLibrary">
<doc>Closes all open connections.</doc>
<status status="PASS" starttime="20200909 23:03:12.592" endtime="20200909 23:03:12.593"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:12.088" endtime="20200909 23:03:12.593"></status>
</kw>
<doc>Test the RaSCSI CD-ROM emulation functionality.</doc>
<status status="PASS" starttime="20200909 22:59:53.722" endtime="20200909 23:03:12.593"></status>
</suite>
<suite id="s1-s2" name="Rascsi Device Information" source="/home/akuker/RASCSI/test/robot/rascsi_device_information.robot">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Open Connection to Rascsi and Log In</arg>
<arg>AND</arg>
<arg>The Rascsi Service is Started</arg>
<arg>AND</arg>
<arg>The RaSCSI Service Should be Running</arg>
<arg>AND</arg>
<arg>Detach all RaSCSI SCSI Devices</arg>
</arguments>
<kw name="Open Connection to Rascsi and Log In" library="rascsi_utils">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${Rascsi_Host}</arg>
</arguments>
<status status="PASS" starttime="20200909 23:03:12.607" endtime="20200909 23:03:12.607"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given ``username`` and ``password``.</doc>
<arguments>
<arg>${Rascsi_Username}</arg>
<arg>${Rascsi_Password}</arg>
</arguments>
<msg timestamp="20200909 23:03:12.608" level="INFO">Logging into 'rascsi.local:22' as 'pi'.</msg>
<msg timestamp="20200909 23:03:14.170" level="INFO">Read output: Linux rascsi 4.19.118-v7+ #1311 SMP Mon Apr 27 14:21:24 BST 2020 armv7l

The programs included with the Debian GNU/Linux system are free software;
the exact distribution terms for each program are described in the
individual files in /usr/share/doc/*/copyright.

Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent
permitted by applicable law.
Last login: Wed Sep  9 23:00:52 2020 from 192.168.68.156

SSH is enabled and the default password for the 'pi' user has not been changed.
This is a security risk - please login as the 'pi' user and type 'passwd' to set a new password.


Wi-Fi is currently blocked by rfkill.
Use raspi-config to set the country before use.

pi@rascsi:~$</msg>
<status status="PASS" starttime="20200909 23:03:12.607" endtime="20200909 23:03:14.170"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:12.606" endtime="20200909 23:03:14.170"></status>
</kw>
<kw name="The Rascsi Service is Started" library="linux_services">
<kw name="Convert To Lower Case" library="String">
<doc>Converts string to lower case.</doc>
<arguments>
<arg>${service_name}</arg>
</arguments>
<assign>
<var>${lc_service_name}</var>
</assign>
<msg timestamp="20200909 23:03:14.171" level="INFO">${lc_service_name} = rascsi</msg>
<status status="PASS" starttime="20200909 23:03:14.171" endtime="20200909 23:03:14.171"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>systemctl start ${lc_service_name}</arg>
<arg>sudo=True</arg>
<arg>sudo_password=${Rascsi_Password}</arg>
</arguments>
<msg timestamp="20200909 23:03:14.172" level="INFO">Executing command 'sudo systemctl start rascsi'.</msg>
<msg timestamp="20200909 23:03:14.506" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" starttime="20200909 23:03:14.172" endtime="20200909 23:03:14.506"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:14.170" endtime="20200909 23:03:14.507"></status>
</kw>
<kw name="The RaSCSI Service Should be Running" library="linux_services">
<kw name="Convert To Lower Case" library="String">
<doc>Converts string to lower case.</doc>
<arguments>
<arg>${service_name}</arg>
</arguments>
<assign>
<var>${lc_service_name}</var>
</assign>
<msg timestamp="20200909 23:03:14.508" level="INFO">${lc_service_name} = rascsi</msg>
<status status="PASS" starttime="20200909 23:03:14.507" endtime="20200909 23:03:14.508"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>systemctl status ${lc_service_name}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20200909 23:03:14.508" level="INFO">Executing command 'systemctl status rascsi'.</msg>
<msg timestamp="20200909 23:03:14.611" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20200909 23:03:14.611" level="INFO">${output} = ‚óè rascsi.service - RaSCSI service
   Loaded: loaded (/etc/systemd/system/rascsi.service; enabled; vendor preset: enabled)
   Active: active (running) since Wed 2020-09-09 22:58:23 CDT; 4min 51s ago
 M...</msg>
<status status="PASS" starttime="20200909 23:03:14.508" endtime="20200909 23:03:14.611"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>Active: active (running)</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" starttime="20200909 23:03:14.611" endtime="20200909 23:03:14.612"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:14.507" endtime="20200909 23:03:14.612"></status>
</kw>
<kw name="Detach all RaSCSI SCSI Devices" library="rascsi_utils">
<doc>Send detach commands for all of the SCSI IDs to make sure that there
aren't any left over before/after a test</doc>
<kw name="${scsi_id} IN RANGE [ 0 | 7 ]" type="for">
<kw name="${scsi_id} = 0" type="foritem">
<kw name="Detach RaSCSI SCSI ID ${scsi_id}" library="rascsi_utils">
<doc>Detaches the specified SCSI ID from Rascsi</doc>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rasctl -c detach -i ${scsi_id}</arg>
</arguments>
<msg timestamp="20200909 23:03:14.614" level="INFO">Executing command 'rasctl -c detach -i 0'.</msg>
<msg timestamp="20200909 23:03:14.691" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" starttime="20200909 23:03:14.613" endtime="20200909 23:03:14.691"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:14.613" endtime="20200909 23:03:14.692"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:14.613" endtime="20200909 23:03:14.692"></status>
</kw>
<kw name="${scsi_id} = 1" type="foritem">
<kw name="Detach RaSCSI SCSI ID ${scsi_id}" library="rascsi_utils">
<doc>Detaches the specified SCSI ID from Rascsi</doc>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rasctl -c detach -i ${scsi_id}</arg>
</arguments>
<msg timestamp="20200909 23:03:14.693" level="INFO">Executing command 'rasctl -c detach -i 1'.</msg>
<msg timestamp="20200909 23:03:14.761" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" starttime="20200909 23:03:14.693" endtime="20200909 23:03:14.761"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:14.692" endtime="20200909 23:03:14.761"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:14.692" endtime="20200909 23:03:14.762"></status>
</kw>
<kw name="${scsi_id} = 2" type="foritem">
<kw name="Detach RaSCSI SCSI ID ${scsi_id}" library="rascsi_utils">
<doc>Detaches the specified SCSI ID from Rascsi</doc>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rasctl -c detach -i ${scsi_id}</arg>
</arguments>
<msg timestamp="20200909 23:03:14.763" level="INFO">Executing command 'rasctl -c detach -i 2'.</msg>
<msg timestamp="20200909 23:03:14.831" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" starttime="20200909 23:03:14.763" endtime="20200909 23:03:14.831"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:14.762" endtime="20200909 23:03:14.832"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:14.762" endtime="20200909 23:03:14.832"></status>
</kw>
<kw name="${scsi_id} = 3" type="foritem">
<kw name="Detach RaSCSI SCSI ID ${scsi_id}" library="rascsi_utils">
<doc>Detaches the specified SCSI ID from Rascsi</doc>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rasctl -c detach -i ${scsi_id}</arg>
</arguments>
<msg timestamp="20200909 23:03:14.833" level="INFO">Executing command 'rasctl -c detach -i 3'.</msg>
<msg timestamp="20200909 23:03:14.901" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" starttime="20200909 23:03:14.833" endtime="20200909 23:03:14.901"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:14.832" endtime="20200909 23:03:14.902"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:14.832" endtime="20200909 23:03:14.902"></status>
</kw>
<kw name="${scsi_id} = 4" type="foritem">
<kw name="Detach RaSCSI SCSI ID ${scsi_id}" library="rascsi_utils">
<doc>Detaches the specified SCSI ID from Rascsi</doc>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rasctl -c detach -i ${scsi_id}</arg>
</arguments>
<msg timestamp="20200909 23:03:14.903" level="INFO">Executing command 'rasctl -c detach -i 4'.</msg>
<msg timestamp="20200909 23:03:14.971" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" starttime="20200909 23:03:14.903" endtime="20200909 23:03:14.971"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:14.902" endtime="20200909 23:03:14.972"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:14.902" endtime="20200909 23:03:14.972"></status>
</kw>
<kw name="${scsi_id} = 5" type="foritem">
<kw name="Detach RaSCSI SCSI ID ${scsi_id}" library="rascsi_utils">
<doc>Detaches the specified SCSI ID from Rascsi</doc>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rasctl -c detach -i ${scsi_id}</arg>
</arguments>
<msg timestamp="20200909 23:03:14.973" level="INFO">Executing command 'rasctl -c detach -i 5'.</msg>
<msg timestamp="20200909 23:03:15.041" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" starttime="20200909 23:03:14.973" endtime="20200909 23:03:15.041"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:14.972" endtime="20200909 23:03:15.042"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:14.972" endtime="20200909 23:03:15.042"></status>
</kw>
<kw name="${scsi_id} = 6" type="foritem">
<kw name="Detach RaSCSI SCSI ID ${scsi_id}" library="rascsi_utils">
<doc>Detaches the specified SCSI ID from Rascsi</doc>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rasctl -c detach -i ${scsi_id}</arg>
</arguments>
<msg timestamp="20200909 23:03:15.043" level="INFO">Executing command 'rasctl -c detach -i 6'.</msg>
<msg timestamp="20200909 23:03:15.111" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" starttime="20200909 23:03:15.043" endtime="20200909 23:03:15.111"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:15.042" endtime="20200909 23:03:15.112"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:15.042" endtime="20200909 23:03:15.112"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:14.613" endtime="20200909 23:03:15.112"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:14.613" endtime="20200909 23:03:15.112"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:12.606" endtime="20200909 23:03:15.112"></status>
</kw>
<test id="s1-s2-t1" name="Apple Hard Drive reports the correct device information">
<kw name="Run Keyword And Ignore Error" library="BuiltIn" type="setup">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Delete drive image tmp_apple_drive.hda</arg>
</arguments>
<kw name="Delete drive image tmp_apple_drive.hda" library="rascsi_utils">
<doc>Delete a disk drive image that was created on the raspberry pi</doc>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>/home/pi/images/${file_name}</arg>
</arguments>
<msg timestamp="20200909 23:03:15.115" level="INFO" html="yes">File '&lt;a href="file:///home/pi/images/tmp_apple_drive.hda"&gt;/home/pi/images/tmp_apple_drive.hda&lt;/a&gt;' does not exist.</msg>
<status status="PASS" starttime="20200909 23:03:15.115" endtime="20200909 23:03:15.116"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:15.114" endtime="20200909 23:03:15.116"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:15.114" endtime="20200909 23:03:15.116"></status>
</kw>
<kw name="Given Create Blank Rascsi Drive Image of Size 10 megabytes named tmp_apple_drive.hda" library="rascsi_utils">
<doc>Creates an empty drive image on the Rascsi host of the specified size and file name</doc>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>dd if=/dev/zero of=/home/pi/images/${file_name} bs=1M count=${drive_size}</arg>
</arguments>
<msg timestamp="20200909 23:03:15.118" level="INFO">Executing command 'dd if=/dev/zero of=/home/pi/images/tmp_apple_drive.hda bs=1M count=10'.</msg>
<msg timestamp="20200909 23:03:15.262" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" starttime="20200909 23:03:15.118" endtime="20200909 23:03:15.262"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:15.117" endtime="20200909 23:03:15.263"></status>
</kw>
<kw name="When Drive image tmp_apple_drive.hda is attached as SCSI ID 0" library="rascsi_utils">
<doc>Attaches an existing drive image to the RaSCSI</doc>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rasctl -i ${scsi_id} -c attach -f /home/pi/images/${drive_image_file}</arg>
</arguments>
<assign>
<var>${rasctl_output}</var>
</assign>
<msg timestamp="20200909 23:03:15.265" level="INFO">Executing command 'rasctl -i 0 -c attach -f /home/pi/images/tmp_apple_drive.hda'.</msg>
<msg timestamp="20200909 23:03:15.320" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20200909 23:03:15.320" level="INFO">${rasctl_output} = </msg>
<status status="PASS" starttime="20200909 23:03:15.264" endtime="20200909 23:03:15.320"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${rasctl_output}</arg>
</arguments>
<msg timestamp="20200909 23:03:15.321" level="INFO"></msg>
<status status="PASS" starttime="20200909 23:03:15.321" endtime="20200909 23:03:15.321"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rasctl -l</arg>
</arguments>
<assign>
<var>${rasctl_output}</var>
</assign>
<msg timestamp="20200909 23:03:15.322" level="INFO">Executing command 'rasctl -l'.</msg>
<msg timestamp="20200909 23:03:15.380" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20200909 23:03:15.380" level="INFO">${rasctl_output} = 
+----+----+------+-------------------------------------
| ID | UN | TYPE | DEVICE STATUS
+----+----+------+-------------------------------------
|  0 |  0 | SCHD | /home/pi/images/tmp_apple_drive.hda...</msg>
<status status="PASS" starttime="20200909 23:03:15.321" endtime="20200909 23:03:15.380"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${rasctl_output}</arg>
</arguments>
<msg timestamp="20200909 23:03:15.381" level="INFO">
+----+----+------+-------------------------------------
| ID | UN | TYPE | DEVICE STATUS
+----+----+------+-------------------------------------
|  0 |  0 | SCHD | /home/pi/images/tmp_apple_drive.hda
+----+----+------+-------------------------------------</msg>
<status status="PASS" starttime="20200909 23:03:15.380" endtime="20200909 23:03:15.381"></status>
</kw>
<kw name="Rescan SCSI Bus" library="linux_scsi_utils">
<doc>Commands Linux to re-scan the SCSI bus on the local host</doc>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>sudo bash -c "echo \\"- - -\\" &gt; /sys/class/scsi_host/host0/scan"</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20200909 23:03:15.385" level="INFO">Running command 'sudo bash -c "echo \"- - -\" &gt; /sys/class/scsi_host/host0/scan"'.</msg>
<msg timestamp="20200909 23:03:19.813" level="INFO">${result} = </msg>
<status status="PASS" starttime="20200909 23:03:15.382" endtime="20200909 23:03:19.813"></status>
</kw>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>lsscsi</arg>
</arguments>
<assign>
<var>${lsscsi}</var>
</assign>
<msg timestamp="20200909 23:03:19.817" level="INFO">Running command 'lsscsi 2&gt;&amp;1'.</msg>
<msg timestamp="20200909 23:03:19.821" level="INFO">${lsscsi} = [0:0:0:0]    disk     SEAGATE           ST225N 0147  /dev/sdd 
[1:0:0:0]    disk    ATA      WDC WD2500JS-41S 6C04  /dev/sdb 
[2:0:0:0]    cd/dvd  TSSTcorp DVDWBD SH-B123L  SB04  /dev/sr1 
[4:0:0:0]  ...</msg>
<status status="PASS" starttime="20200909 23:03:19.814" endtime="20200909 23:03:19.821"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${lsscsi}</arg>
</arguments>
<msg timestamp="20200909 23:03:19.823" level="INFO">[0:0:0:0]    disk     SEAGATE           ST225N 0147  /dev/sdd 
[1:0:0:0]    disk    ATA      WDC WD2500JS-41S 6C04  /dev/sdb 
[2:0:0:0]    cd/dvd  TSSTcorp DVDWBD SH-B123L  SB04  /dev/sr1 
[4:0:0:0]    disk    ATA      Hitachi HDS72101 A41A  /dev/sdc </msg>
<status status="PASS" starttime="20200909 23:03:19.822" endtime="20200909 23:03:19.823"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:15.381" endtime="20200909 23:03:19.823"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:15.263" endtime="20200909 23:03:19.823"></status>
</kw>
<kw name="Then Rasctl reports SCSI ID 0 of type HD" library="rascsi_utils">
<doc>Executes rasctl and verifies that the drive is configured as the specified type</doc>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rasctl -l</arg>
</arguments>
<assign>
<var>${rasctl_output}</var>
</assign>
<msg timestamp="20200909 23:03:19.825" level="INFO">Executing command 'rasctl -l'.</msg>
<msg timestamp="20200909 23:03:19.861" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20200909 23:03:19.861" level="INFO">${rasctl_output} = 
+----+----+------+-------------------------------------
| ID | UN | TYPE | DEVICE STATUS
+----+----+------+-------------------------------------
|  0 |  0 | SCHD | /home/pi/images/tmp_apple_drive.hda...</msg>
<status status="PASS" starttime="20200909 23:03:19.825" endtime="20200909 23:03:19.862"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${rasctl_output}</arg>
</arguments>
<msg timestamp="20200909 23:03:19.862" level="INFO">
+----+----+------+-------------------------------------
| ID | UN | TYPE | DEVICE STATUS
+----+----+------+-------------------------------------
|  0 |  0 | SCHD | /home/pi/images/tmp_apple_drive.hda
+----+----+------+-------------------------------------</msg>
<status status="PASS" starttime="20200909 23:03:19.862" endtime="20200909 23:03:19.862"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${rasctl_output}</arg>
<arg>|${SPACE*2}${scsi_id}${SPACE}|${SPACE*2}0${SPACE}|${SPACE}SC${type}${SPACE}|</arg>
</arguments>
<status status="PASS" starttime="20200909 23:03:19.863" endtime="20200909 23:03:19.864"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:19.824" endtime="20200909 23:03:19.864"></status>
</kw>
<kw name="And SCSI ID 0 is detected by Linux" library="linux_scsi_utils">
<doc>Checks to see if a specific SCSI ID is found by lsscsi</doc>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>lsscsi</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20200909 23:03:19.869" level="INFO">Running command 'lsscsi 2&gt;&amp;1'.</msg>
<msg timestamp="20200909 23:03:19.872" level="INFO">${result} = [0:0:0:0]    disk     SEAGATE           ST225N 0147  /dev/sdd 
[1:0:0:0]    disk    ATA      WDC WD2500JS-41S 6C04  /dev/sdb 
[2:0:0:0]    cd/dvd  TSSTcorp DVDWBD SH-B123L  SB04  /dev/sr1 
[4:0:0:0]  ...</msg>
<status status="PASS" starttime="20200909 23:03:19.866" endtime="20200909 23:03:19.872"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20200909 23:03:19.873" level="INFO">[0:0:0:0]    disk     SEAGATE           ST225N 0147  /dev/sdd 
[1:0:0:0]    disk    ATA      WDC WD2500JS-41S 6C04  /dev/sdb 
[2:0:0:0]    cd/dvd  TSSTcorp DVDWBD SH-B123L  SB04  /dev/sr1 
[4:0:0:0]    disk    ATA      Hitachi HDS72101 A41A  /dev/sdc </msg>
<status status="PASS" starttime="20200909 23:03:19.873" endtime="20200909 23:03:19.874"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>[0:0:${scsi_id}:0]</arg>
</arguments>
<status status="PASS" starttime="20200909 23:03:19.874" endtime="20200909 23:03:19.874"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:19.865" endtime="20200909 23:03:19.874"></status>
</kw>
<kw name="And SCSI ID 0 reports vendor ${SPACE}SEAGATE" library="linux_scsi_utils">
<doc>Reads the SCSI vendor from sysfs and checks that it matches expected value</doc>
<kw name="Get File" library="OperatingSystem">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>/sys/class/scsi_device/0:0:${scsi_id}:0/device/vendor</arg>
</arguments>
<assign>
<var>${read_scsi_info}</var>
</assign>
<msg timestamp="20200909 23:03:19.876" level="INFO" html="yes">Getting file '&lt;a href="file:///sys/class/scsi_device/0:0:0:0/device/vendor"&gt;/sys/class/scsi_device/0:0:0:0/device/vendor&lt;/a&gt;'.</msg>
<msg timestamp="20200909 23:03:19.876" level="INFO">${read_scsi_info} =  SEAGATE
</msg>
<status status="PASS" starttime="20200909 23:03:19.875" endtime="20200909 23:03:19.876"></status>
</kw>
<kw name="Remove String Using Regexp" library="String">
<doc>Removes ``patterns`` from the given ``string``.</doc>
<arguments>
<arg>${read_scsi_info}</arg>
<arg>${\n}</arg>
</arguments>
<assign>
<var>${read_scsi_info}</var>
</assign>
<msg timestamp="20200909 23:03:19.876" level="INFO">${read_scsi_info} =  SEAGATE</msg>
<status status="PASS" starttime="20200909 23:03:19.876" endtime="20200909 23:03:19.877"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Vendor ID read from sysfs was --${read_scsi_info}--</arg>
</arguments>
<msg timestamp="20200909 23:03:19.877" level="INFO">Vendor ID read from sysfs was -- SEAGATE--</msg>
<status status="PASS" starttime="20200909 23:03:19.877" endtime="20200909 23:03:19.877"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${read_scsi_info}</arg>
<arg>${scsi_vendor}</arg>
<arg>Incorrect SCSI vendor reported for ID ${scsi_id}</arg>
</arguments>
<status status="PASS" starttime="20200909 23:03:19.877" endtime="20200909 23:03:19.878"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:19.875" endtime="20200909 23:03:19.878"></status>
</kw>
<kw name="And SCSI ID 0 reports revision 0147" library="linux_scsi_utils">
<doc>Reads the SCSI vendor from sysfs and checks that it matches expected value</doc>
<kw name="Get File" library="OperatingSystem">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>/sys/class/scsi_device/0:0:${scsi_id}:0/device/rev</arg>
</arguments>
<assign>
<var>${read_scsi_info}</var>
</assign>
<msg timestamp="20200909 23:03:19.879" level="INFO" html="yes">Getting file '&lt;a href="file:///sys/class/scsi_device/0:0:0:0/device/rev"&gt;/sys/class/scsi_device/0:0:0:0/device/rev&lt;/a&gt;'.</msg>
<msg timestamp="20200909 23:03:19.879" level="INFO">${read_scsi_info} = 0147
</msg>
<status status="PASS" starttime="20200909 23:03:19.878" endtime="20200909 23:03:19.879"></status>
</kw>
<kw name="Remove String Using Regexp" library="String">
<doc>Removes ``patterns`` from the given ``string``.</doc>
<arguments>
<arg>${read_scsi_info}</arg>
<arg>${\n}</arg>
</arguments>
<assign>
<var>${read_scsi_info}</var>
</assign>
<msg timestamp="20200909 23:03:19.879" level="INFO">${read_scsi_info} = 0147</msg>
<status status="PASS" starttime="20200909 23:03:19.879" endtime="20200909 23:03:19.880"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>SCSI revision read from sysfs was ${read_scsi_info}</arg>
</arguments>
<msg timestamp="20200909 23:03:19.880" level="INFO">SCSI revision read from sysfs was 0147</msg>
<status status="PASS" starttime="20200909 23:03:19.880" endtime="20200909 23:03:19.880"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${read_scsi_info}</arg>
<arg>${scsi_rev}</arg>
<arg>Incorrect SCSI version reported for ID ${scsi_id}</arg>
</arguments>
<status status="PASS" starttime="20200909 23:03:19.880" endtime="20200909 23:03:19.880"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:19.878" endtime="20200909 23:03:19.881"></status>
</kw>
<kw name="And SCSI ID 0 reports model ${SPACE*10}ST225N" library="linux_scsi_utils">
<doc>Reads the SCSI vendor from sysfs and checks that it matches expected value</doc>
<kw name="Get File" library="OperatingSystem">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>/sys/class/scsi_device/0:0:${scsi_id}:0/device/model</arg>
</arguments>
<assign>
<var>${read_scsi_info}</var>
</assign>
<msg timestamp="20200909 23:03:19.882" level="INFO" html="yes">Getting file '&lt;a href="file:///sys/class/scsi_device/0:0:0:0/device/model"&gt;/sys/class/scsi_device/0:0:0:0/device/model&lt;/a&gt;'.</msg>
<msg timestamp="20200909 23:03:19.882" level="INFO">${read_scsi_info} =           ST225N
</msg>
<status status="PASS" starttime="20200909 23:03:19.882" endtime="20200909 23:03:19.882"></status>
</kw>
<kw name="Remove String Using Regexp" library="String">
<doc>Removes ``patterns`` from the given ``string``.</doc>
<arguments>
<arg>${read_scsi_info}</arg>
<arg>${\n}</arg>
</arguments>
<assign>
<var>${read_scsi_info}</var>
</assign>
<msg timestamp="20200909 23:03:19.883" level="INFO">${read_scsi_info} =           ST225N</msg>
<status status="PASS" starttime="20200909 23:03:19.882" endtime="20200909 23:03:19.883"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>SCSI model read from sysfs was --${read_scsi_info}--</arg>
</arguments>
<msg timestamp="20200909 23:03:19.883" level="INFO">SCSI model read from sysfs was --          ST225N--</msg>
<status status="PASS" starttime="20200909 23:03:19.883" endtime="20200909 23:03:19.883"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${read_scsi_info}</arg>
<arg>${scsi_model}</arg>
<arg>Incorrect SCSI model reported for ID ${scsi_id}</arg>
</arguments>
<status status="PASS" starttime="20200909 23:03:19.883" endtime="20200909 23:03:19.884"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:19.881" endtime="20200909 23:03:19.884"></status>
</kw>
<kw name="And SCSI ID 0 reports type ${Scsi_device_type_hard_drive}" library="linux_scsi_utils">
<doc>Reads the SCSI type from sysfs and checks that it matches expected value</doc>
<kw name="Get File" library="OperatingSystem">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>/sys/class/scsi_device/0:0:${scsi_id}:0/device/type</arg>
</arguments>
<assign>
<var>${read_scsi_info}</var>
</assign>
<msg timestamp="20200909 23:03:19.885" level="INFO" html="yes">Getting file '&lt;a href="file:///sys/class/scsi_device/0:0:0:0/device/type"&gt;/sys/class/scsi_device/0:0:0:0/device/type&lt;/a&gt;'.</msg>
<msg timestamp="20200909 23:03:19.885" level="INFO">${read_scsi_info} = 0
</msg>
<status status="PASS" starttime="20200909 23:03:19.884" endtime="20200909 23:03:19.885"></status>
</kw>
<kw name="Remove String Using Regexp" library="String">
<doc>Removes ``patterns`` from the given ``string``.</doc>
<arguments>
<arg>${read_scsi_info}</arg>
<arg>${\n}</arg>
</arguments>
<assign>
<var>${read_scsi_info}</var>
</assign>
<msg timestamp="20200909 23:03:19.885" level="INFO">${read_scsi_info} = 0</msg>
<status status="PASS" starttime="20200909 23:03:19.885" endtime="20200909 23:03:19.885"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>SCSI model read from sysfs was ${read_scsi_info}</arg>
</arguments>
<msg timestamp="20200909 23:03:19.886" level="INFO">SCSI model read from sysfs was 0</msg>
<status status="PASS" starttime="20200909 23:03:19.885" endtime="20200909 23:03:19.886"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${read_scsi_info}</arg>
<arg>${scsi_type}</arg>
<arg>Incorrect SCSI type reported for ID ${scsi_id}</arg>
</arguments>
<status status="PASS" starttime="20200909 23:03:19.886" endtime="20200909 23:03:19.886"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:19.884" endtime="20200909 23:03:19.886"></status>
</kw>
<kw name="Run Keywords" library="BuiltIn" type="teardown">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Detach all RaSCSI SCSI Devices</arg>
<arg>AND</arg>
<arg>Delete all SCSI devices from Linux</arg>
<arg>AND</arg>
<arg>Delete all RaSCSI drive images</arg>
</arguments>
<kw name="Detach all RaSCSI SCSI Devices" library="rascsi_utils">
<doc>Send detach commands for all of the SCSI IDs to make sure that there
aren't any left over before/after a test</doc>
<kw name="${scsi_id} IN RANGE [ 0 | 7 ]" type="for">
<kw name="${scsi_id} = 0" type="foritem">
<kw name="Detach RaSCSI SCSI ID ${scsi_id}" library="rascsi_utils">
<doc>Detaches the specified SCSI ID from Rascsi</doc>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rasctl -c detach -i ${scsi_id}</arg>
</arguments>
<msg timestamp="20200909 23:03:19.889" level="INFO">Executing command 'rasctl -c detach -i 0'.</msg>
<msg timestamp="20200909 23:03:20.427" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" starttime="20200909 23:03:19.888" endtime="20200909 23:03:20.427"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:19.888" endtime="20200909 23:03:20.428"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:19.888" endtime="20200909 23:03:20.428"></status>
</kw>
<kw name="${scsi_id} = 1" type="foritem">
<kw name="Detach RaSCSI SCSI ID ${scsi_id}" library="rascsi_utils">
<doc>Detaches the specified SCSI ID from Rascsi</doc>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rasctl -c detach -i ${scsi_id}</arg>
</arguments>
<msg timestamp="20200909 23:03:20.429" level="INFO">Executing command 'rasctl -c detach -i 1'.</msg>
<msg timestamp="20200909 23:03:20.490" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" starttime="20200909 23:03:20.429" endtime="20200909 23:03:20.490"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:20.428" endtime="20200909 23:03:20.490"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:20.428" endtime="20200909 23:03:20.490"></status>
</kw>
<kw name="${scsi_id} = 2" type="foritem">
<kw name="Detach RaSCSI SCSI ID ${scsi_id}" library="rascsi_utils">
<doc>Detaches the specified SCSI ID from Rascsi</doc>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rasctl -c detach -i ${scsi_id}</arg>
</arguments>
<msg timestamp="20200909 23:03:20.492" level="INFO">Executing command 'rasctl -c detach -i 2'.</msg>
<msg timestamp="20200909 23:03:20.550" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" starttime="20200909 23:03:20.492" endtime="20200909 23:03:20.550"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:20.491" endtime="20200909 23:03:20.550"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:20.491" endtime="20200909 23:03:20.550"></status>
</kw>
<kw name="${scsi_id} = 3" type="foritem">
<kw name="Detach RaSCSI SCSI ID ${scsi_id}" library="rascsi_utils">
<doc>Detaches the specified SCSI ID from Rascsi</doc>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rasctl -c detach -i ${scsi_id}</arg>
</arguments>
<msg timestamp="20200909 23:03:20.552" level="INFO">Executing command 'rasctl -c detach -i 3'.</msg>
<msg timestamp="20200909 23:03:20.610" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" starttime="20200909 23:03:20.552" endtime="20200909 23:03:20.610"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:20.551" endtime="20200909 23:03:20.610"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:20.551" endtime="20200909 23:03:20.610"></status>
</kw>
<kw name="${scsi_id} = 4" type="foritem">
<kw name="Detach RaSCSI SCSI ID ${scsi_id}" library="rascsi_utils">
<doc>Detaches the specified SCSI ID from Rascsi</doc>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rasctl -c detach -i ${scsi_id}</arg>
</arguments>
<msg timestamp="20200909 23:03:20.612" level="INFO">Executing command 'rasctl -c detach -i 4'.</msg>
<msg timestamp="20200909 23:03:20.670" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" starttime="20200909 23:03:20.612" endtime="20200909 23:03:20.670"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:20.611" endtime="20200909 23:03:20.670"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:20.610" endtime="20200909 23:03:20.670"></status>
</kw>
<kw name="${scsi_id} = 5" type="foritem">
<kw name="Detach RaSCSI SCSI ID ${scsi_id}" library="rascsi_utils">
<doc>Detaches the specified SCSI ID from Rascsi</doc>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rasctl -c detach -i ${scsi_id}</arg>
</arguments>
<msg timestamp="20200909 23:03:20.672" level="INFO">Executing command 'rasctl -c detach -i 5'.</msg>
<msg timestamp="20200909 23:03:20.741" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" starttime="20200909 23:03:20.672" endtime="20200909 23:03:20.741"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:20.671" endtime="20200909 23:03:20.741"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:20.670" endtime="20200909 23:03:20.742"></status>
</kw>
<kw name="${scsi_id} = 6" type="foritem">
<kw name="Detach RaSCSI SCSI ID ${scsi_id}" library="rascsi_utils">
<doc>Detaches the specified SCSI ID from Rascsi</doc>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rasctl -c detach -i ${scsi_id}</arg>
</arguments>
<msg timestamp="20200909 23:03:20.743" level="INFO">Executing command 'rasctl -c detach -i 6'.</msg>
<msg timestamp="20200909 23:03:20.811" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" starttime="20200909 23:03:20.743" endtime="20200909 23:03:20.811"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:20.742" endtime="20200909 23:03:20.811"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:20.742" endtime="20200909 23:03:20.812"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:19.888" endtime="20200909 23:03:20.812"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:19.887" endtime="20200909 23:03:20.812"></status>
</kw>
<kw name="Delete all SCSI devices from Linux" library="linux_scsi_utils">
<doc>Remove all SCSI IDs from the Linux SCSI driver</doc>
<kw name="${scsi_id} IN RANGE [ 0 | 7 ]" type="for">
<kw name="${scsi_id} = 0" type="foritem">
<kw name="Delete SCSI ID ${scsi_id} from Linux" library="linux_scsi_utils">
<doc>Remove a SCSI ID from Linux. Basically, will un-do the Scan action</doc>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>sudo bash -c "echo 1 &gt; /sys/class/scsi_device/0:0:${scsi_id}:0/device/delete" 2&gt;&amp;1 &gt; /dev/null</arg>
</arguments>
<msg timestamp="20200909 23:03:20.817" level="INFO">Running command 'sudo bash -c "echo 1 &gt; /sys/class/scsi_device/0:0:0:0/device/delete" 2&gt;&amp;1 &gt; /dev/null'.</msg>
<status status="PASS" starttime="20200909 23:03:20.814" endtime="20200909 23:03:20.880"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:20.813" endtime="20200909 23:03:20.881"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:20.813" endtime="20200909 23:03:20.881"></status>
</kw>
<kw name="${scsi_id} = 1" type="foritem">
<kw name="Delete SCSI ID ${scsi_id} from Linux" library="linux_scsi_utils">
<doc>Remove a SCSI ID from Linux. Basically, will un-do the Scan action</doc>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>sudo bash -c "echo 1 &gt; /sys/class/scsi_device/0:0:${scsi_id}:0/device/delete" 2&gt;&amp;1 &gt; /dev/null</arg>
</arguments>
<msg timestamp="20200909 23:03:20.885" level="INFO">Running command 'sudo bash -c "echo 1 &gt; /sys/class/scsi_device/0:0:1:0/device/delete" 2&gt;&amp;1 &gt; /dev/null'.</msg>
<status status="PASS" starttime="20200909 23:03:20.883" endtime="20200909 23:03:20.894"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:20.882" endtime="20200909 23:03:20.894"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:20.881" endtime="20200909 23:03:20.894"></status>
</kw>
<kw name="${scsi_id} = 2" type="foritem">
<kw name="Delete SCSI ID ${scsi_id} from Linux" library="linux_scsi_utils">
<doc>Remove a SCSI ID from Linux. Basically, will un-do the Scan action</doc>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>sudo bash -c "echo 1 &gt; /sys/class/scsi_device/0:0:${scsi_id}:0/device/delete" 2&gt;&amp;1 &gt; /dev/null</arg>
</arguments>
<msg timestamp="20200909 23:03:20.899" level="INFO">Running command 'sudo bash -c "echo 1 &gt; /sys/class/scsi_device/0:0:2:0/device/delete" 2&gt;&amp;1 &gt; /dev/null'.</msg>
<status status="PASS" starttime="20200909 23:03:20.896" endtime="20200909 23:03:20.906"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:20.895" endtime="20200909 23:03:20.907"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:20.895" endtime="20200909 23:03:20.907"></status>
</kw>
<kw name="${scsi_id} = 3" type="foritem">
<kw name="Delete SCSI ID ${scsi_id} from Linux" library="linux_scsi_utils">
<doc>Remove a SCSI ID from Linux. Basically, will un-do the Scan action</doc>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>sudo bash -c "echo 1 &gt; /sys/class/scsi_device/0:0:${scsi_id}:0/device/delete" 2&gt;&amp;1 &gt; /dev/null</arg>
</arguments>
<msg timestamp="20200909 23:03:20.910" level="INFO">Running command 'sudo bash -c "echo 1 &gt; /sys/class/scsi_device/0:0:3:0/device/delete" 2&gt;&amp;1 &gt; /dev/null'.</msg>
<status status="PASS" starttime="20200909 23:03:20.908" endtime="20200909 23:03:20.919"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:20.907" endtime="20200909 23:03:20.920"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:20.907" endtime="20200909 23:03:20.920"></status>
</kw>
<kw name="${scsi_id} = 4" type="foritem">
<kw name="Delete SCSI ID ${scsi_id} from Linux" library="linux_scsi_utils">
<doc>Remove a SCSI ID from Linux. Basically, will un-do the Scan action</doc>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>sudo bash -c "echo 1 &gt; /sys/class/scsi_device/0:0:${scsi_id}:0/device/delete" 2&gt;&amp;1 &gt; /dev/null</arg>
</arguments>
<msg timestamp="20200909 23:03:20.924" level="INFO">Running command 'sudo bash -c "echo 1 &gt; /sys/class/scsi_device/0:0:4:0/device/delete" 2&gt;&amp;1 &gt; /dev/null'.</msg>
<status status="PASS" starttime="20200909 23:03:20.921" endtime="20200909 23:03:20.931"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:20.920" endtime="20200909 23:03:20.932"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:20.920" endtime="20200909 23:03:20.932"></status>
</kw>
<kw name="${scsi_id} = 5" type="foritem">
<kw name="Delete SCSI ID ${scsi_id} from Linux" library="linux_scsi_utils">
<doc>Remove a SCSI ID from Linux. Basically, will un-do the Scan action</doc>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>sudo bash -c "echo 1 &gt; /sys/class/scsi_device/0:0:${scsi_id}:0/device/delete" 2&gt;&amp;1 &gt; /dev/null</arg>
</arguments>
<msg timestamp="20200909 23:03:20.936" level="INFO">Running command 'sudo bash -c "echo 1 &gt; /sys/class/scsi_device/0:0:5:0/device/delete" 2&gt;&amp;1 &gt; /dev/null'.</msg>
<status status="PASS" starttime="20200909 23:03:20.933" endtime="20200909 23:03:20.946"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:20.932" endtime="20200909 23:03:20.946"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:20.932" endtime="20200909 23:03:20.946"></status>
</kw>
<kw name="${scsi_id} = 6" type="foritem">
<kw name="Delete SCSI ID ${scsi_id} from Linux" library="linux_scsi_utils">
<doc>Remove a SCSI ID from Linux. Basically, will un-do the Scan action</doc>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>sudo bash -c "echo 1 &gt; /sys/class/scsi_device/0:0:${scsi_id}:0/device/delete" 2&gt;&amp;1 &gt; /dev/null</arg>
</arguments>
<msg timestamp="20200909 23:03:20.951" level="INFO">Running command 'sudo bash -c "echo 1 &gt; /sys/class/scsi_device/0:0:6:0/device/delete" 2&gt;&amp;1 &gt; /dev/null'.</msg>
<status status="PASS" starttime="20200909 23:03:20.949" endtime="20200909 23:03:20.958"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:20.947" endtime="20200909 23:03:20.958"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:20.947" endtime="20200909 23:03:20.958"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:20.813" endtime="20200909 23:03:20.959"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:20.812" endtime="20200909 23:03:20.959"></status>
</kw>
<kw name="Delete all RaSCSI drive images" library="rascsi_utils">
<doc>Delete all of the temporary drive images that were created on the RaSCSI host</doc>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>/home/pi/images/tmp_*</arg>
</arguments>
<msg timestamp="20200909 23:03:20.961" level="INFO" html="yes">File '&lt;a href="file:///home/pi/images/tmp_*"&gt;/home/pi/images/tmp_*&lt;/a&gt;' does not exist.</msg>
<status status="PASS" starttime="20200909 23:03:20.960" endtime="20200909 23:03:20.961"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:20.959" endtime="20200909 23:03:20.961"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:19.887" endtime="20200909 23:03:20.961"></status>
</kw>
<doc>Create an empty Apple hard drive and verify that the SCSI
information is reported correctly to the Linux host</doc>
<status status="PASS" starttime="20200909 23:03:15.112" endtime="20200909 23:03:20.962" critical="yes"></status>
</test>
<test id="s1-s2-t2" name="XM6 Hard Drive reports the correct device information">
<kw name="Run Keyword And Ignore Error" library="BuiltIn" type="setup">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Delete drive image tmp_xm6_scsi_drive.hds</arg>
</arguments>
<kw name="Delete drive image tmp_xm6_scsi_drive.hds" library="rascsi_utils">
<doc>Delete a disk drive image that was created on the raspberry pi</doc>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>/home/pi/images/${file_name}</arg>
</arguments>
<msg timestamp="20200909 23:03:20.965" level="INFO" html="yes">File '&lt;a href="file:///home/pi/images/tmp_xm6_scsi_drive.hds"&gt;/home/pi/images/tmp_xm6_scsi_drive.hds&lt;/a&gt;' does not exist.</msg>
<status status="PASS" starttime="20200909 23:03:20.965" endtime="20200909 23:03:20.965"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:20.964" endtime="20200909 23:03:20.966"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:20.964" endtime="20200909 23:03:20.966"></status>
</kw>
<kw name="Given Create Blank Rascsi Drive Image of Size 10 megabytes named tmp_xm6_scsi_drive.hds" library="rascsi_utils">
<doc>Creates an empty drive image on the Rascsi host of the specified size and file name</doc>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>dd if=/dev/zero of=/home/pi/images/${file_name} bs=1M count=${drive_size}</arg>
</arguments>
<msg timestamp="20200909 23:03:20.968" level="INFO">Executing command 'dd if=/dev/zero of=/home/pi/images/tmp_xm6_scsi_drive.hds bs=1M count=10'.</msg>
<msg timestamp="20200909 23:03:21.104" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" starttime="20200909 23:03:20.967" endtime="20200909 23:03:21.104"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:20.967" endtime="20200909 23:03:21.105"></status>
</kw>
<kw name="When Drive image tmp_xm6_scsi_drive.hds is attached as SCSI ID 1" library="rascsi_utils">
<doc>Attaches an existing drive image to the RaSCSI</doc>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rasctl -i ${scsi_id} -c attach -f /home/pi/images/${drive_image_file}</arg>
</arguments>
<assign>
<var>${rasctl_output}</var>
</assign>
<msg timestamp="20200909 23:03:21.107" level="INFO">Executing command 'rasctl -i 1 -c attach -f /home/pi/images/tmp_xm6_scsi_drive.hds'.</msg>
<msg timestamp="20200909 23:03:21.170" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20200909 23:03:21.170" level="INFO">${rasctl_output} = </msg>
<status status="PASS" starttime="20200909 23:03:21.106" endtime="20200909 23:03:21.170"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${rasctl_output}</arg>
</arguments>
<msg timestamp="20200909 23:03:21.171" level="INFO"></msg>
<status status="PASS" starttime="20200909 23:03:21.171" endtime="20200909 23:03:21.171"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rasctl -l</arg>
</arguments>
<assign>
<var>${rasctl_output}</var>
</assign>
<msg timestamp="20200909 23:03:21.172" level="INFO">Executing command 'rasctl -l'.</msg>
<msg timestamp="20200909 23:03:21.230" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20200909 23:03:21.230" level="INFO">${rasctl_output} = 
+----+----+------+-------------------------------------
| ID | UN | TYPE | DEVICE STATUS
+----+----+------+-------------------------------------
|  1 |  0 | SCHD | /home/pi/images/tmp_xm6_scsi_drive....</msg>
<status status="PASS" starttime="20200909 23:03:21.171" endtime="20200909 23:03:21.230"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${rasctl_output}</arg>
</arguments>
<msg timestamp="20200909 23:03:21.231" level="INFO">
+----+----+------+-------------------------------------
| ID | UN | TYPE | DEVICE STATUS
+----+----+------+-------------------------------------
|  1 |  0 | SCHD | /home/pi/images/tmp_xm6_scsi_drive.hds
+----+----+------+-------------------------------------</msg>
<status status="PASS" starttime="20200909 23:03:21.231" endtime="20200909 23:03:21.231"></status>
</kw>
<kw name="Rescan SCSI Bus" library="linux_scsi_utils">
<doc>Commands Linux to re-scan the SCSI bus on the local host</doc>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>sudo bash -c "echo \\"- - -\\" &gt; /sys/class/scsi_host/host0/scan"</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20200909 23:03:21.235" level="INFO">Running command 'sudo bash -c "echo \"- - -\" &gt; /sys/class/scsi_host/host0/scan"'.</msg>
<msg timestamp="20200909 23:03:25.566" level="INFO">${result} = </msg>
<status status="PASS" starttime="20200909 23:03:21.232" endtime="20200909 23:03:25.566"></status>
</kw>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>lsscsi</arg>
</arguments>
<assign>
<var>${lsscsi}</var>
</assign>
<msg timestamp="20200909 23:03:25.570" level="INFO">Running command 'lsscsi 2&gt;&amp;1'.</msg>
<msg timestamp="20200909 23:03:25.573" level="INFO">${lsscsi} = [0:0:1:0]    disk    RaSCSI   PRODRIVE LPS10S  0147  /dev/sdd 
[1:0:0:0]    disk    ATA      WDC WD2500JS-41S 6C04  /dev/sdb 
[2:0:0:0]    cd/dvd  TSSTcorp DVDWBD SH-B123L  SB04  /dev/sr1 
[4:0:0:0]  ...</msg>
<status status="PASS" starttime="20200909 23:03:25.566" endtime="20200909 23:03:25.573"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${lsscsi}</arg>
</arguments>
<msg timestamp="20200909 23:03:25.575" level="INFO">[0:0:1:0]    disk    RaSCSI   PRODRIVE LPS10S  0147  /dev/sdd 
[1:0:0:0]    disk    ATA      WDC WD2500JS-41S 6C04  /dev/sdb 
[2:0:0:0]    cd/dvd  TSSTcorp DVDWBD SH-B123L  SB04  /dev/sr1 
[4:0:0:0]    disk    ATA      Hitachi HDS72101 A41A  /dev/sdc </msg>
<status status="PASS" starttime="20200909 23:03:25.574" endtime="20200909 23:03:25.575"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:21.231" endtime="20200909 23:03:25.575"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:21.106" endtime="20200909 23:03:25.575"></status>
</kw>
<kw name="Then Rasctl reports SCSI ID 1 of type HD" library="rascsi_utils">
<doc>Executes rasctl and verifies that the drive is configured as the specified type</doc>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rasctl -l</arg>
</arguments>
<assign>
<var>${rasctl_output}</var>
</assign>
<msg timestamp="20200909 23:03:25.577" level="INFO">Executing command 'rasctl -l'.</msg>
<msg timestamp="20200909 23:03:25.612" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20200909 23:03:25.613" level="INFO">${rasctl_output} = 
+----+----+------+-------------------------------------
| ID | UN | TYPE | DEVICE STATUS
+----+----+------+-------------------------------------
|  1 |  0 | SCHD | /home/pi/images/tmp_xm6_scsi_drive....</msg>
<status status="PASS" starttime="20200909 23:03:25.576" endtime="20200909 23:03:25.613"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${rasctl_output}</arg>
</arguments>
<msg timestamp="20200909 23:03:25.613" level="INFO">
+----+----+------+-------------------------------------
| ID | UN | TYPE | DEVICE STATUS
+----+----+------+-------------------------------------
|  1 |  0 | SCHD | /home/pi/images/tmp_xm6_scsi_drive.hds
+----+----+------+-------------------------------------</msg>
<status status="PASS" starttime="20200909 23:03:25.613" endtime="20200909 23:03:25.614"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${rasctl_output}</arg>
<arg>|${SPACE*2}${scsi_id}${SPACE}|${SPACE*2}0${SPACE}|${SPACE}SC${type}${SPACE}|</arg>
</arguments>
<status status="PASS" starttime="20200909 23:03:25.614" endtime="20200909 23:03:25.615"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:25.576" endtime="20200909 23:03:25.615"></status>
</kw>
<kw name="And SCSI ID 1 is detected by Linux" library="linux_scsi_utils">
<doc>Checks to see if a specific SCSI ID is found by lsscsi</doc>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>lsscsi</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20200909 23:03:25.620" level="INFO">Running command 'lsscsi 2&gt;&amp;1'.</msg>
<msg timestamp="20200909 23:03:25.623" level="INFO">${result} = [0:0:1:0]    disk    RaSCSI   PRODRIVE LPS10S  0147  /dev/sdd 
[1:0:0:0]    disk    ATA      WDC WD2500JS-41S 6C04  /dev/sdb 
[2:0:0:0]    cd/dvd  TSSTcorp DVDWBD SH-B123L  SB04  /dev/sr1 
[4:0:0:0]  ...</msg>
<status status="PASS" starttime="20200909 23:03:25.617" endtime="20200909 23:03:25.623"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20200909 23:03:25.624" level="INFO">[0:0:1:0]    disk    RaSCSI   PRODRIVE LPS10S  0147  /dev/sdd 
[1:0:0:0]    disk    ATA      WDC WD2500JS-41S 6C04  /dev/sdb 
[2:0:0:0]    cd/dvd  TSSTcorp DVDWBD SH-B123L  SB04  /dev/sr1 
[4:0:0:0]    disk    ATA      Hitachi HDS72101 A41A  /dev/sdc </msg>
<status status="PASS" starttime="20200909 23:03:25.624" endtime="20200909 23:03:25.624"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>[0:0:${scsi_id}:0]</arg>
</arguments>
<status status="PASS" starttime="20200909 23:03:25.625" endtime="20200909 23:03:25.625"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:25.616" endtime="20200909 23:03:25.625"></status>
</kw>
<kw name="And SCSI ID 1 reports vendor RaSCSI${SPACE*2}" library="linux_scsi_utils">
<doc>Reads the SCSI vendor from sysfs and checks that it matches expected value</doc>
<kw name="Get File" library="OperatingSystem">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>/sys/class/scsi_device/0:0:${scsi_id}:0/device/vendor</arg>
</arguments>
<assign>
<var>${read_scsi_info}</var>
</assign>
<msg timestamp="20200909 23:03:25.627" level="INFO" html="yes">Getting file '&lt;a href="file:///sys/class/scsi_device/0:0:1:0/device/vendor"&gt;/sys/class/scsi_device/0:0:1:0/device/vendor&lt;/a&gt;'.</msg>
<msg timestamp="20200909 23:03:25.627" level="INFO">${read_scsi_info} = RaSCSI  
</msg>
<status status="PASS" starttime="20200909 23:03:25.627" endtime="20200909 23:03:25.627"></status>
</kw>
<kw name="Remove String Using Regexp" library="String">
<doc>Removes ``patterns`` from the given ``string``.</doc>
<arguments>
<arg>${read_scsi_info}</arg>
<arg>${\n}</arg>
</arguments>
<assign>
<var>${read_scsi_info}</var>
</assign>
<msg timestamp="20200909 23:03:25.628" level="INFO">${read_scsi_info} = RaSCSI  </msg>
<status status="PASS" starttime="20200909 23:03:25.627" endtime="20200909 23:03:25.628"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Vendor ID read from sysfs was --${read_scsi_info}--</arg>
</arguments>
<msg timestamp="20200909 23:03:25.628" level="INFO">Vendor ID read from sysfs was --RaSCSI  --</msg>
<status status="PASS" starttime="20200909 23:03:25.628" endtime="20200909 23:03:25.628"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${read_scsi_info}</arg>
<arg>${scsi_vendor}</arg>
<arg>Incorrect SCSI vendor reported for ID ${scsi_id}</arg>
</arguments>
<status status="PASS" starttime="20200909 23:03:25.629" endtime="20200909 23:03:25.629"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:25.626" endtime="20200909 23:03:25.629"></status>
</kw>
<kw name="And SCSI ID 1 reports revision 0147" library="linux_scsi_utils">
<doc>Reads the SCSI vendor from sysfs and checks that it matches expected value</doc>
<kw name="Get File" library="OperatingSystem">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>/sys/class/scsi_device/0:0:${scsi_id}:0/device/rev</arg>
</arguments>
<assign>
<var>${read_scsi_info}</var>
</assign>
<msg timestamp="20200909 23:03:25.631" level="INFO" html="yes">Getting file '&lt;a href="file:///sys/class/scsi_device/0:0:1:0/device/rev"&gt;/sys/class/scsi_device/0:0:1:0/device/rev&lt;/a&gt;'.</msg>
<msg timestamp="20200909 23:03:25.631" level="INFO">${read_scsi_info} = 0147
</msg>
<status status="PASS" starttime="20200909 23:03:25.630" endtime="20200909 23:03:25.631"></status>
</kw>
<kw name="Remove String Using Regexp" library="String">
<doc>Removes ``patterns`` from the given ``string``.</doc>
<arguments>
<arg>${read_scsi_info}</arg>
<arg>${\n}</arg>
</arguments>
<assign>
<var>${read_scsi_info}</var>
</assign>
<msg timestamp="20200909 23:03:25.632" level="INFO">${read_scsi_info} = 0147</msg>
<status status="PASS" starttime="20200909 23:03:25.631" endtime="20200909 23:03:25.632"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>SCSI revision read from sysfs was ${read_scsi_info}</arg>
</arguments>
<msg timestamp="20200909 23:03:25.632" level="INFO">SCSI revision read from sysfs was 0147</msg>
<status status="PASS" starttime="20200909 23:03:25.632" endtime="20200909 23:03:25.632"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${read_scsi_info}</arg>
<arg>${scsi_rev}</arg>
<arg>Incorrect SCSI version reported for ID ${scsi_id}</arg>
</arguments>
<status status="PASS" starttime="20200909 23:03:25.632" endtime="20200909 23:03:25.633"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:25.630" endtime="20200909 23:03:25.633"></status>
</kw>
<kw name="And SCSI ID 1 reports model PRODRIVE LPS10S${SPACE}" library="linux_scsi_utils">
<doc>Reads the SCSI vendor from sysfs and checks that it matches expected value</doc>
<kw name="Get File" library="OperatingSystem">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>/sys/class/scsi_device/0:0:${scsi_id}:0/device/model</arg>
</arguments>
<assign>
<var>${read_scsi_info}</var>
</assign>
<msg timestamp="20200909 23:03:25.634" level="INFO" html="yes">Getting file '&lt;a href="file:///sys/class/scsi_device/0:0:1:0/device/model"&gt;/sys/class/scsi_device/0:0:1:0/device/model&lt;/a&gt;'.</msg>
<msg timestamp="20200909 23:03:25.634" level="INFO">${read_scsi_info} = PRODRIVE LPS10S 
</msg>
<status status="PASS" starttime="20200909 23:03:25.634" endtime="20200909 23:03:25.634"></status>
</kw>
<kw name="Remove String Using Regexp" library="String">
<doc>Removes ``patterns`` from the given ``string``.</doc>
<arguments>
<arg>${read_scsi_info}</arg>
<arg>${\n}</arg>
</arguments>
<assign>
<var>${read_scsi_info}</var>
</assign>
<msg timestamp="20200909 23:03:25.635" level="INFO">${read_scsi_info} = PRODRIVE LPS10S </msg>
<status status="PASS" starttime="20200909 23:03:25.634" endtime="20200909 23:03:25.635"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>SCSI model read from sysfs was --${read_scsi_info}--</arg>
</arguments>
<msg timestamp="20200909 23:03:25.635" level="INFO">SCSI model read from sysfs was --PRODRIVE LPS10S --</msg>
<status status="PASS" starttime="20200909 23:03:25.635" endtime="20200909 23:03:25.635"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${read_scsi_info}</arg>
<arg>${scsi_model}</arg>
<arg>Incorrect SCSI model reported for ID ${scsi_id}</arg>
</arguments>
<status status="PASS" starttime="20200909 23:03:25.635" endtime="20200909 23:03:25.636"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:25.633" endtime="20200909 23:03:25.636"></status>
</kw>
<kw name="And SCSI ID 1 reports type ${Scsi_device_type_hard_drive}" library="linux_scsi_utils">
<doc>Reads the SCSI type from sysfs and checks that it matches expected value</doc>
<kw name="Get File" library="OperatingSystem">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>/sys/class/scsi_device/0:0:${scsi_id}:0/device/type</arg>
</arguments>
<assign>
<var>${read_scsi_info}</var>
</assign>
<msg timestamp="20200909 23:03:25.637" level="INFO" html="yes">Getting file '&lt;a href="file:///sys/class/scsi_device/0:0:1:0/device/type"&gt;/sys/class/scsi_device/0:0:1:0/device/type&lt;/a&gt;'.</msg>
<msg timestamp="20200909 23:03:25.637" level="INFO">${read_scsi_info} = 0
</msg>
<status status="PASS" starttime="20200909 23:03:25.637" endtime="20200909 23:03:25.637"></status>
</kw>
<kw name="Remove String Using Regexp" library="String">
<doc>Removes ``patterns`` from the given ``string``.</doc>
<arguments>
<arg>${read_scsi_info}</arg>
<arg>${\n}</arg>
</arguments>
<assign>
<var>${read_scsi_info}</var>
</assign>
<msg timestamp="20200909 23:03:25.638" level="INFO">${read_scsi_info} = 0</msg>
<status status="PASS" starttime="20200909 23:03:25.637" endtime="20200909 23:03:25.638"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>SCSI model read from sysfs was ${read_scsi_info}</arg>
</arguments>
<msg timestamp="20200909 23:03:25.638" level="INFO">SCSI model read from sysfs was 0</msg>
<status status="PASS" starttime="20200909 23:03:25.638" endtime="20200909 23:03:25.638"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${read_scsi_info}</arg>
<arg>${scsi_type}</arg>
<arg>Incorrect SCSI type reported for ID ${scsi_id}</arg>
</arguments>
<status status="PASS" starttime="20200909 23:03:25.638" endtime="20200909 23:03:25.639"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:25.636" endtime="20200909 23:03:25.639"></status>
</kw>
<kw name="Run Keywords" library="BuiltIn" type="teardown">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Detach all RaSCSI SCSI Devices</arg>
<arg>AND</arg>
<arg>Delete all SCSI devices from Linux</arg>
<arg>AND</arg>
<arg>Delete all RaSCSI drive images</arg>
</arguments>
<kw name="Detach all RaSCSI SCSI Devices" library="rascsi_utils">
<doc>Send detach commands for all of the SCSI IDs to make sure that there
aren't any left over before/after a test</doc>
<kw name="${scsi_id} IN RANGE [ 0 | 7 ]" type="for">
<kw name="${scsi_id} = 0" type="foritem">
<kw name="Detach RaSCSI SCSI ID ${scsi_id}" library="rascsi_utils">
<doc>Detaches the specified SCSI ID from Rascsi</doc>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rasctl -c detach -i ${scsi_id}</arg>
</arguments>
<msg timestamp="20200909 23:03:25.641" level="INFO">Executing command 'rasctl -c detach -i 0'.</msg>
<msg timestamp="20200909 23:03:26.185" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" starttime="20200909 23:03:25.641" endtime="20200909 23:03:26.186"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:25.640" endtime="20200909 23:03:26.186"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:25.640" endtime="20200909 23:03:26.186"></status>
</kw>
<kw name="${scsi_id} = 1" type="foritem">
<kw name="Detach RaSCSI SCSI ID ${scsi_id}" library="rascsi_utils">
<doc>Detaches the specified SCSI ID from Rascsi</doc>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rasctl -c detach -i ${scsi_id}</arg>
</arguments>
<msg timestamp="20200909 23:03:26.188" level="INFO">Executing command 'rasctl -c detach -i 1'.</msg>
<msg timestamp="20200909 23:03:26.250" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" starttime="20200909 23:03:26.187" endtime="20200909 23:03:26.250"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:26.187" endtime="20200909 23:03:26.250"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:26.186" endtime="20200909 23:03:26.250"></status>
</kw>
<kw name="${scsi_id} = 2" type="foritem">
<kw name="Detach RaSCSI SCSI ID ${scsi_id}" library="rascsi_utils">
<doc>Detaches the specified SCSI ID from Rascsi</doc>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rasctl -c detach -i ${scsi_id}</arg>
</arguments>
<msg timestamp="20200909 23:03:26.252" level="INFO">Executing command 'rasctl -c detach -i 2'.</msg>
<msg timestamp="20200909 23:03:26.310" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" starttime="20200909 23:03:26.252" endtime="20200909 23:03:26.310"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:26.251" endtime="20200909 23:03:26.310"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:26.251" endtime="20200909 23:03:26.310"></status>
</kw>
<kw name="${scsi_id} = 3" type="foritem">
<kw name="Detach RaSCSI SCSI ID ${scsi_id}" library="rascsi_utils">
<doc>Detaches the specified SCSI ID from Rascsi</doc>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rasctl -c detach -i ${scsi_id}</arg>
</arguments>
<msg timestamp="20200909 23:03:26.312" level="INFO">Executing command 'rasctl -c detach -i 3'.</msg>
<msg timestamp="20200909 23:03:26.370" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" starttime="20200909 23:03:26.312" endtime="20200909 23:03:26.370"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:26.311" endtime="20200909 23:03:26.370"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:26.311" endtime="20200909 23:03:26.370"></status>
</kw>
<kw name="${scsi_id} = 4" type="foritem">
<kw name="Detach RaSCSI SCSI ID ${scsi_id}" library="rascsi_utils">
<doc>Detaches the specified SCSI ID from Rascsi</doc>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rasctl -c detach -i ${scsi_id}</arg>
</arguments>
<msg timestamp="20200909 23:03:26.372" level="INFO">Executing command 'rasctl -c detach -i 4'.</msg>
<msg timestamp="20200909 23:03:26.441" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" starttime="20200909 23:03:26.372" endtime="20200909 23:03:26.441"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:26.371" endtime="20200909 23:03:26.442"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:26.371" endtime="20200909 23:03:26.442"></status>
</kw>
<kw name="${scsi_id} = 5" type="foritem">
<kw name="Detach RaSCSI SCSI ID ${scsi_id}" library="rascsi_utils">
<doc>Detaches the specified SCSI ID from Rascsi</doc>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rasctl -c detach -i ${scsi_id}</arg>
</arguments>
<msg timestamp="20200909 23:03:26.444" level="INFO">Executing command 'rasctl -c detach -i 5'.</msg>
<msg timestamp="20200909 23:03:26.511" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" starttime="20200909 23:03:26.443" endtime="20200909 23:03:26.511"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:26.442" endtime="20200909 23:03:26.512"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:26.442" endtime="20200909 23:03:26.512"></status>
</kw>
<kw name="${scsi_id} = 6" type="foritem">
<kw name="Detach RaSCSI SCSI ID ${scsi_id}" library="rascsi_utils">
<doc>Detaches the specified SCSI ID from Rascsi</doc>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rasctl -c detach -i ${scsi_id}</arg>
</arguments>
<msg timestamp="20200909 23:03:26.513" level="INFO">Executing command 'rasctl -c detach -i 6'.</msg>
<msg timestamp="20200909 23:03:26.581" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" starttime="20200909 23:03:26.513" endtime="20200909 23:03:26.581"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:26.512" endtime="20200909 23:03:26.582"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:26.512" endtime="20200909 23:03:26.582"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:25.640" endtime="20200909 23:03:26.582"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:25.639" endtime="20200909 23:03:26.582"></status>
</kw>
<kw name="Delete all SCSI devices from Linux" library="linux_scsi_utils">
<doc>Remove all SCSI IDs from the Linux SCSI driver</doc>
<kw name="${scsi_id} IN RANGE [ 0 | 7 ]" type="for">
<kw name="${scsi_id} = 0" type="foritem">
<kw name="Delete SCSI ID ${scsi_id} from Linux" library="linux_scsi_utils">
<doc>Remove a SCSI ID from Linux. Basically, will un-do the Scan action</doc>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>sudo bash -c "echo 1 &gt; /sys/class/scsi_device/0:0:${scsi_id}:0/device/delete" 2&gt;&amp;1 &gt; /dev/null</arg>
</arguments>
<msg timestamp="20200909 23:03:26.588" level="INFO">Running command 'sudo bash -c "echo 1 &gt; /sys/class/scsi_device/0:0:0:0/device/delete" 2&gt;&amp;1 &gt; /dev/null'.</msg>
<status status="PASS" starttime="20200909 23:03:26.585" endtime="20200909 23:03:26.600"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:26.584" endtime="20200909 23:03:26.601"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:26.584" endtime="20200909 23:03:26.601"></status>
</kw>
<kw name="${scsi_id} = 1" type="foritem">
<kw name="Delete SCSI ID ${scsi_id} from Linux" library="linux_scsi_utils">
<doc>Remove a SCSI ID from Linux. Basically, will un-do the Scan action</doc>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>sudo bash -c "echo 1 &gt; /sys/class/scsi_device/0:0:${scsi_id}:0/device/delete" 2&gt;&amp;1 &gt; /dev/null</arg>
</arguments>
<msg timestamp="20200909 23:03:26.605" level="INFO">Running command 'sudo bash -c "echo 1 &gt; /sys/class/scsi_device/0:0:1:0/device/delete" 2&gt;&amp;1 &gt; /dev/null'.</msg>
<status status="PASS" starttime="20200909 23:03:26.602" endtime="20200909 23:03:26.673"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:26.601" endtime="20200909 23:03:26.674"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:26.601" endtime="20200909 23:03:26.674"></status>
</kw>
<kw name="${scsi_id} = 2" type="foritem">
<kw name="Delete SCSI ID ${scsi_id} from Linux" library="linux_scsi_utils">
<doc>Remove a SCSI ID from Linux. Basically, will un-do the Scan action</doc>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>sudo bash -c "echo 1 &gt; /sys/class/scsi_device/0:0:${scsi_id}:0/device/delete" 2&gt;&amp;1 &gt; /dev/null</arg>
</arguments>
<msg timestamp="20200909 23:03:26.677" level="INFO">Running command 'sudo bash -c "echo 1 &gt; /sys/class/scsi_device/0:0:2:0/device/delete" 2&gt;&amp;1 &gt; /dev/null'.</msg>
<status status="PASS" starttime="20200909 23:03:26.675" endtime="20200909 23:03:26.684"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:26.675" endtime="20200909 23:03:26.685"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:26.674" endtime="20200909 23:03:26.685"></status>
</kw>
<kw name="${scsi_id} = 3" type="foritem">
<kw name="Delete SCSI ID ${scsi_id} from Linux" library="linux_scsi_utils">
<doc>Remove a SCSI ID from Linux. Basically, will un-do the Scan action</doc>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>sudo bash -c "echo 1 &gt; /sys/class/scsi_device/0:0:${scsi_id}:0/device/delete" 2&gt;&amp;1 &gt; /dev/null</arg>
</arguments>
<msg timestamp="20200909 23:03:26.688" level="INFO">Running command 'sudo bash -c "echo 1 &gt; /sys/class/scsi_device/0:0:3:0/device/delete" 2&gt;&amp;1 &gt; /dev/null'.</msg>
<status status="PASS" starttime="20200909 23:03:26.686" endtime="20200909 23:03:26.695"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:26.685" endtime="20200909 23:03:26.696"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:26.685" endtime="20200909 23:03:26.696"></status>
</kw>
<kw name="${scsi_id} = 4" type="foritem">
<kw name="Delete SCSI ID ${scsi_id} from Linux" library="linux_scsi_utils">
<doc>Remove a SCSI ID from Linux. Basically, will un-do the Scan action</doc>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>sudo bash -c "echo 1 &gt; /sys/class/scsi_device/0:0:${scsi_id}:0/device/delete" 2&gt;&amp;1 &gt; /dev/null</arg>
</arguments>
<msg timestamp="20200909 23:03:26.699" level="INFO">Running command 'sudo bash -c "echo 1 &gt; /sys/class/scsi_device/0:0:4:0/device/delete" 2&gt;&amp;1 &gt; /dev/null'.</msg>
<status status="PASS" starttime="20200909 23:03:26.697" endtime="20200909 23:03:26.706"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:26.696" endtime="20200909 23:03:26.707"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:26.696" endtime="20200909 23:03:26.707"></status>
</kw>
<kw name="${scsi_id} = 5" type="foritem">
<kw name="Delete SCSI ID ${scsi_id} from Linux" library="linux_scsi_utils">
<doc>Remove a SCSI ID from Linux. Basically, will un-do the Scan action</doc>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>sudo bash -c "echo 1 &gt; /sys/class/scsi_device/0:0:${scsi_id}:0/device/delete" 2&gt;&amp;1 &gt; /dev/null</arg>
</arguments>
<msg timestamp="20200909 23:03:26.710" level="INFO">Running command 'sudo bash -c "echo 1 &gt; /sys/class/scsi_device/0:0:5:0/device/delete" 2&gt;&amp;1 &gt; /dev/null'.</msg>
<status status="PASS" starttime="20200909 23:03:26.708" endtime="20200909 23:03:26.719"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:26.707" endtime="20200909 23:03:26.720"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:26.707" endtime="20200909 23:03:26.720"></status>
</kw>
<kw name="${scsi_id} = 6" type="foritem">
<kw name="Delete SCSI ID ${scsi_id} from Linux" library="linux_scsi_utils">
<doc>Remove a SCSI ID from Linux. Basically, will un-do the Scan action</doc>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>sudo bash -c "echo 1 &gt; /sys/class/scsi_device/0:0:${scsi_id}:0/device/delete" 2&gt;&amp;1 &gt; /dev/null</arg>
</arguments>
<msg timestamp="20200909 23:03:26.724" level="INFO">Running command 'sudo bash -c "echo 1 &gt; /sys/class/scsi_device/0:0:6:0/device/delete" 2&gt;&amp;1 &gt; /dev/null'.</msg>
<status status="PASS" starttime="20200909 23:03:26.721" endtime="20200909 23:03:26.734"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:26.720" endtime="20200909 23:03:26.735"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:26.720" endtime="20200909 23:03:26.735"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:26.583" endtime="20200909 23:03:26.735"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:26.583" endtime="20200909 23:03:26.735"></status>
</kw>
<kw name="Delete all RaSCSI drive images" library="rascsi_utils">
<doc>Delete all of the temporary drive images that were created on the RaSCSI host</doc>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>/home/pi/images/tmp_*</arg>
</arguments>
<msg timestamp="20200909 23:03:26.736" level="INFO" html="yes">File '&lt;a href="file:///home/pi/images/tmp_*"&gt;/home/pi/images/tmp_*&lt;/a&gt;' does not exist.</msg>
<status status="PASS" starttime="20200909 23:03:26.736" endtime="20200909 23:03:26.736"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:26.735" endtime="20200909 23:03:26.736"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:25.639" endtime="20200909 23:03:26.736"></status>
</kw>
<doc>Create an empty XM6 hard drive and verify that the SCSI
information is reported correctly to the Linux host</doc>
<status status="PASS" starttime="20200909 23:03:20.962" endtime="20200909 23:03:26.737" critical="yes"></status>
</test>
<test id="s1-s2-t3" name="NEC Hard Drive reports the correct device information">
<kw name="Run Keyword And Ignore Error" library="BuiltIn" type="setup">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Delete drive image tmp_nec_hard_drive.hdn</arg>
</arguments>
<kw name="Delete drive image tmp_nec_hard_drive.hdn" library="rascsi_utils">
<doc>Delete a disk drive image that was created on the raspberry pi</doc>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>/home/pi/images/${file_name}</arg>
</arguments>
<msg timestamp="20200909 23:03:26.739" level="INFO" html="yes">File '&lt;a href="file:///home/pi/images/tmp_nec_hard_drive.hdn"&gt;/home/pi/images/tmp_nec_hard_drive.hdn&lt;/a&gt;' does not exist.</msg>
<status status="PASS" starttime="20200909 23:03:26.739" endtime="20200909 23:03:26.739"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:26.739" endtime="20200909 23:03:26.740"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:26.738" endtime="20200909 23:03:26.740"></status>
</kw>
<kw name="Given Create Blank Rascsi Drive Image of Size 10 megabytes named tmp_nec_hard_drive.hdn" library="rascsi_utils">
<doc>Creates an empty drive image on the Rascsi host of the specified size and file name</doc>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>dd if=/dev/zero of=/home/pi/images/${file_name} bs=1M count=${drive_size}</arg>
</arguments>
<msg timestamp="20200909 23:03:26.741" level="INFO">Executing command 'dd if=/dev/zero of=/home/pi/images/tmp_nec_hard_drive.hdn bs=1M count=10'.</msg>
<msg timestamp="20200909 23:03:26.887" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" starttime="20200909 23:03:26.741" endtime="20200909 23:03:26.887"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:26.740" endtime="20200909 23:03:26.888"></status>
</kw>
<kw name="When Drive image tmp_nec_hard_drive.hdn is attached as SCSI ID 2" library="rascsi_utils">
<doc>Attaches an existing drive image to the RaSCSI</doc>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rasctl -i ${scsi_id} -c attach -f /home/pi/images/${drive_image_file}</arg>
</arguments>
<assign>
<var>${rasctl_output}</var>
</assign>
<msg timestamp="20200909 23:03:26.891" level="INFO">Executing command 'rasctl -i 2 -c attach -f /home/pi/images/tmp_nec_hard_drive.hdn'.</msg>
<msg timestamp="20200909 23:03:26.950" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20200909 23:03:26.950" level="INFO">${rasctl_output} = </msg>
<status status="PASS" starttime="20200909 23:03:26.889" endtime="20200909 23:03:26.950"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${rasctl_output}</arg>
</arguments>
<msg timestamp="20200909 23:03:26.951" level="INFO"></msg>
<status status="PASS" starttime="20200909 23:03:26.951" endtime="20200909 23:03:26.951"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rasctl -l</arg>
</arguments>
<assign>
<var>${rasctl_output}</var>
</assign>
<msg timestamp="20200909 23:03:26.952" level="INFO">Executing command 'rasctl -l'.</msg>
<msg timestamp="20200909 23:03:27.010" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20200909 23:03:27.010" level="INFO">${rasctl_output} = 
+----+----+------+-------------------------------------
| ID | UN | TYPE | DEVICE STATUS
+----+----+------+-------------------------------------
|  2 |  0 | SCHD | /home/pi/images/tmp_nec_hard_drive....</msg>
<status status="PASS" starttime="20200909 23:03:26.951" endtime="20200909 23:03:27.010"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${rasctl_output}</arg>
</arguments>
<msg timestamp="20200909 23:03:27.011" level="INFO">
+----+----+------+-------------------------------------
| ID | UN | TYPE | DEVICE STATUS
+----+----+------+-------------------------------------
|  2 |  0 | SCHD | /home/pi/images/tmp_nec_hard_drive.hdn
+----+----+------+-------------------------------------</msg>
<status status="PASS" starttime="20200909 23:03:27.011" endtime="20200909 23:03:27.011"></status>
</kw>
<kw name="Rescan SCSI Bus" library="linux_scsi_utils">
<doc>Commands Linux to re-scan the SCSI bus on the local host</doc>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>sudo bash -c "echo \\"- - -\\" &gt; /sys/class/scsi_host/host0/scan"</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20200909 23:03:27.015" level="INFO">Running command 'sudo bash -c "echo \"- - -\" &gt; /sys/class/scsi_host/host0/scan"'.</msg>
<msg timestamp="20200909 23:03:31.461" level="INFO">${result} = </msg>
<status status="PASS" starttime="20200909 23:03:27.012" endtime="20200909 23:03:31.462"></status>
</kw>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>lsscsi</arg>
</arguments>
<assign>
<var>${lsscsi}</var>
</assign>
<msg timestamp="20200909 23:03:31.466" level="INFO">Running command 'lsscsi 2&gt;&amp;1'.</msg>
<msg timestamp="20200909 23:03:31.469" level="INFO">${lsscsi} = [0:0:2:0]    disk    NECCSI   PRODRIVE LPS10S  0147  /dev/sdd 
[1:0:0:0]    disk    ATA      WDC WD2500JS-41S 6C04  /dev/sdb 
[2:0:0:0]    cd/dvd  TSSTcorp DVDWBD SH-B123L  SB04  /dev/sr1 
[4:0:0:0]  ...</msg>
<status status="PASS" starttime="20200909 23:03:31.462" endtime="20200909 23:03:31.470"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${lsscsi}</arg>
</arguments>
<msg timestamp="20200909 23:03:31.471" level="INFO">[0:0:2:0]    disk    NECCSI   PRODRIVE LPS10S  0147  /dev/sdd 
[1:0:0:0]    disk    ATA      WDC WD2500JS-41S 6C04  /dev/sdb 
[2:0:0:0]    cd/dvd  TSSTcorp DVDWBD SH-B123L  SB04  /dev/sr1 
[4:0:0:0]    disk    ATA      Hitachi HDS72101 A41A  /dev/sdc </msg>
<status status="PASS" starttime="20200909 23:03:31.470" endtime="20200909 23:03:31.471"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:27.011" endtime="20200909 23:03:31.471"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:26.888" endtime="20200909 23:03:31.472"></status>
</kw>
<kw name="Then Rasctl reports SCSI ID 2 of type HD" library="rascsi_utils">
<doc>Executes rasctl and verifies that the drive is configured as the specified type</doc>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rasctl -l</arg>
</arguments>
<assign>
<var>${rasctl_output}</var>
</assign>
<msg timestamp="20200909 23:03:31.473" level="INFO">Executing command 'rasctl -l'.</msg>
<msg timestamp="20200909 23:03:31.509" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20200909 23:03:31.509" level="INFO">${rasctl_output} = 
+----+----+------+-------------------------------------
| ID | UN | TYPE | DEVICE STATUS
+----+----+------+-------------------------------------
|  2 |  0 | SCHD | /home/pi/images/tmp_nec_hard_drive....</msg>
<status status="PASS" starttime="20200909 23:03:31.473" endtime="20200909 23:03:31.509"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${rasctl_output}</arg>
</arguments>
<msg timestamp="20200909 23:03:31.510" level="INFO">
+----+----+------+-------------------------------------
| ID | UN | TYPE | DEVICE STATUS
+----+----+------+-------------------------------------
|  2 |  0 | SCHD | /home/pi/images/tmp_nec_hard_drive.hdn
+----+----+------+-------------------------------------</msg>
<status status="PASS" starttime="20200909 23:03:31.509" endtime="20200909 23:03:31.510"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${rasctl_output}</arg>
<arg>|${SPACE*2}${scsi_id}${SPACE}|${SPACE*2}0${SPACE}|${SPACE}SC${type}${SPACE}|</arg>
</arguments>
<status status="PASS" starttime="20200909 23:03:31.510" endtime="20200909 23:03:31.512"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:31.472" endtime="20200909 23:03:31.512"></status>
</kw>
<kw name="And SCSI ID 2 is detected by Linux" library="linux_scsi_utils">
<doc>Checks to see if a specific SCSI ID is found by lsscsi</doc>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>lsscsi</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20200909 23:03:31.517" level="INFO">Running command 'lsscsi 2&gt;&amp;1'.</msg>
<msg timestamp="20200909 23:03:31.520" level="INFO">${result} = [0:0:2:0]    disk    NECCSI   PRODRIVE LPS10S  0147  /dev/sdd 
[1:0:0:0]    disk    ATA      WDC WD2500JS-41S 6C04  /dev/sdb 
[2:0:0:0]    cd/dvd  TSSTcorp DVDWBD SH-B123L  SB04  /dev/sr1 
[4:0:0:0]  ...</msg>
<status status="PASS" starttime="20200909 23:03:31.514" endtime="20200909 23:03:31.520"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20200909 23:03:31.521" level="INFO">[0:0:2:0]    disk    NECCSI   PRODRIVE LPS10S  0147  /dev/sdd 
[1:0:0:0]    disk    ATA      WDC WD2500JS-41S 6C04  /dev/sdb 
[2:0:0:0]    cd/dvd  TSSTcorp DVDWBD SH-B123L  SB04  /dev/sr1 
[4:0:0:0]    disk    ATA      Hitachi HDS72101 A41A  /dev/sdc </msg>
<status status="PASS" starttime="20200909 23:03:31.520" endtime="20200909 23:03:31.521"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>[0:0:${scsi_id}:0]</arg>
</arguments>
<status status="PASS" starttime="20200909 23:03:31.521" endtime="20200909 23:03:31.521"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:31.513" endtime="20200909 23:03:31.522"></status>
</kw>
<kw name="And SCSI ID 2 reports vendor NECCSI${SPACE*2}" library="linux_scsi_utils">
<doc>Reads the SCSI vendor from sysfs and checks that it matches expected value</doc>
<kw name="Get File" library="OperatingSystem">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>/sys/class/scsi_device/0:0:${scsi_id}:0/device/vendor</arg>
</arguments>
<assign>
<var>${read_scsi_info}</var>
</assign>
<msg timestamp="20200909 23:03:31.523" level="INFO" html="yes">Getting file '&lt;a href="file:///sys/class/scsi_device/0:0:2:0/device/vendor"&gt;/sys/class/scsi_device/0:0:2:0/device/vendor&lt;/a&gt;'.</msg>
<msg timestamp="20200909 23:03:31.523" level="INFO">${read_scsi_info} = NECCSI  
</msg>
<status status="PASS" starttime="20200909 23:03:31.523" endtime="20200909 23:03:31.523"></status>
</kw>
<kw name="Remove String Using Regexp" library="String">
<doc>Removes ``patterns`` from the given ``string``.</doc>
<arguments>
<arg>${read_scsi_info}</arg>
<arg>${\n}</arg>
</arguments>
<assign>
<var>${read_scsi_info}</var>
</assign>
<msg timestamp="20200909 23:03:31.524" level="INFO">${read_scsi_info} = NECCSI  </msg>
<status status="PASS" starttime="20200909 23:03:31.523" endtime="20200909 23:03:31.524"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Vendor ID read from sysfs was --${read_scsi_info}--</arg>
</arguments>
<msg timestamp="20200909 23:03:31.524" level="INFO">Vendor ID read from sysfs was --NECCSI  --</msg>
<status status="PASS" starttime="20200909 23:03:31.524" endtime="20200909 23:03:31.524"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${read_scsi_info}</arg>
<arg>${scsi_vendor}</arg>
<arg>Incorrect SCSI vendor reported for ID ${scsi_id}</arg>
</arguments>
<status status="PASS" starttime="20200909 23:03:31.525" endtime="20200909 23:03:31.525"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:31.522" endtime="20200909 23:03:31.525"></status>
</kw>
<kw name="And SCSI ID 2 reports revision 0147" library="linux_scsi_utils">
<doc>Reads the SCSI vendor from sysfs and checks that it matches expected value</doc>
<kw name="Get File" library="OperatingSystem">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>/sys/class/scsi_device/0:0:${scsi_id}:0/device/rev</arg>
</arguments>
<assign>
<var>${read_scsi_info}</var>
</assign>
<msg timestamp="20200909 23:03:31.526" level="INFO" html="yes">Getting file '&lt;a href="file:///sys/class/scsi_device/0:0:2:0/device/rev"&gt;/sys/class/scsi_device/0:0:2:0/device/rev&lt;/a&gt;'.</msg>
<msg timestamp="20200909 23:03:31.526" level="INFO">${read_scsi_info} = 0147
</msg>
<status status="PASS" starttime="20200909 23:03:31.526" endtime="20200909 23:03:31.526"></status>
</kw>
<kw name="Remove String Using Regexp" library="String">
<doc>Removes ``patterns`` from the given ``string``.</doc>
<arguments>
<arg>${read_scsi_info}</arg>
<arg>${\n}</arg>
</arguments>
<assign>
<var>${read_scsi_info}</var>
</assign>
<msg timestamp="20200909 23:03:31.527" level="INFO">${read_scsi_info} = 0147</msg>
<status status="PASS" starttime="20200909 23:03:31.526" endtime="20200909 23:03:31.527"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>SCSI revision read from sysfs was ${read_scsi_info}</arg>
</arguments>
<msg timestamp="20200909 23:03:31.527" level="INFO">SCSI revision read from sysfs was 0147</msg>
<status status="PASS" starttime="20200909 23:03:31.527" endtime="20200909 23:03:31.527"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${read_scsi_info}</arg>
<arg>${scsi_rev}</arg>
<arg>Incorrect SCSI version reported for ID ${scsi_id}</arg>
</arguments>
<status status="PASS" starttime="20200909 23:03:31.527" endtime="20200909 23:03:31.528"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:31.525" endtime="20200909 23:03:31.528"></status>
</kw>
<kw name="And SCSI ID 2 reports model PRODRIVE LPS10S${SPACE}" library="linux_scsi_utils">
<doc>Reads the SCSI vendor from sysfs and checks that it matches expected value</doc>
<kw name="Get File" library="OperatingSystem">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>/sys/class/scsi_device/0:0:${scsi_id}:0/device/model</arg>
</arguments>
<assign>
<var>${read_scsi_info}</var>
</assign>
<msg timestamp="20200909 23:03:31.529" level="INFO" html="yes">Getting file '&lt;a href="file:///sys/class/scsi_device/0:0:2:0/device/model"&gt;/sys/class/scsi_device/0:0:2:0/device/model&lt;/a&gt;'.</msg>
<msg timestamp="20200909 23:03:31.529" level="INFO">${read_scsi_info} = PRODRIVE LPS10S 
</msg>
<status status="PASS" starttime="20200909 23:03:31.529" endtime="20200909 23:03:31.529"></status>
</kw>
<kw name="Remove String Using Regexp" library="String">
<doc>Removes ``patterns`` from the given ``string``.</doc>
<arguments>
<arg>${read_scsi_info}</arg>
<arg>${\n}</arg>
</arguments>
<assign>
<var>${read_scsi_info}</var>
</assign>
<msg timestamp="20200909 23:03:31.530" level="INFO">${read_scsi_info} = PRODRIVE LPS10S </msg>
<status status="PASS" starttime="20200909 23:03:31.529" endtime="20200909 23:03:31.530"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>SCSI model read from sysfs was --${read_scsi_info}--</arg>
</arguments>
<msg timestamp="20200909 23:03:31.530" level="INFO">SCSI model read from sysfs was --PRODRIVE LPS10S --</msg>
<status status="PASS" starttime="20200909 23:03:31.530" endtime="20200909 23:03:31.530"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${read_scsi_info}</arg>
<arg>${scsi_model}</arg>
<arg>Incorrect SCSI model reported for ID ${scsi_id}</arg>
</arguments>
<status status="PASS" starttime="20200909 23:03:31.530" endtime="20200909 23:03:31.531"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:31.528" endtime="20200909 23:03:31.531"></status>
</kw>
<kw name="And SCSI ID 2 reports type ${Scsi_device_type_hard_drive}" library="linux_scsi_utils">
<doc>Reads the SCSI type from sysfs and checks that it matches expected value</doc>
<kw name="Get File" library="OperatingSystem">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>/sys/class/scsi_device/0:0:${scsi_id}:0/device/type</arg>
</arguments>
<assign>
<var>${read_scsi_info}</var>
</assign>
<msg timestamp="20200909 23:03:31.532" level="INFO" html="yes">Getting file '&lt;a href="file:///sys/class/scsi_device/0:0:2:0/device/type"&gt;/sys/class/scsi_device/0:0:2:0/device/type&lt;/a&gt;'.</msg>
<msg timestamp="20200909 23:03:31.532" level="INFO">${read_scsi_info} = 0
</msg>
<status status="PASS" starttime="20200909 23:03:31.532" endtime="20200909 23:03:31.532"></status>
</kw>
<kw name="Remove String Using Regexp" library="String">
<doc>Removes ``patterns`` from the given ``string``.</doc>
<arguments>
<arg>${read_scsi_info}</arg>
<arg>${\n}</arg>
</arguments>
<assign>
<var>${read_scsi_info}</var>
</assign>
<msg timestamp="20200909 23:03:31.533" level="INFO">${read_scsi_info} = 0</msg>
<status status="PASS" starttime="20200909 23:03:31.532" endtime="20200909 23:03:31.533"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>SCSI model read from sysfs was ${read_scsi_info}</arg>
</arguments>
<msg timestamp="20200909 23:03:31.547" level="INFO">SCSI model read from sysfs was 0</msg>
<status status="PASS" starttime="20200909 23:03:31.533" endtime="20200909 23:03:31.547"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${read_scsi_info}</arg>
<arg>${scsi_type}</arg>
<arg>Incorrect SCSI type reported for ID ${scsi_id}</arg>
</arguments>
<status status="PASS" starttime="20200909 23:03:31.548" endtime="20200909 23:03:31.548"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:31.531" endtime="20200909 23:03:31.548"></status>
</kw>
<kw name="Run Keywords" library="BuiltIn" type="teardown">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Detach all RaSCSI SCSI Devices</arg>
<arg>AND</arg>
<arg>Delete all SCSI devices from Linux</arg>
<arg>AND</arg>
<arg>Delete all RaSCSI drive images</arg>
</arguments>
<kw name="Detach all RaSCSI SCSI Devices" library="rascsi_utils">
<doc>Send detach commands for all of the SCSI IDs to make sure that there
aren't any left over before/after a test</doc>
<kw name="${scsi_id} IN RANGE [ 0 | 7 ]" type="for">
<kw name="${scsi_id} = 0" type="foritem">
<kw name="Detach RaSCSI SCSI ID ${scsi_id}" library="rascsi_utils">
<doc>Detaches the specified SCSI ID from Rascsi</doc>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rasctl -c detach -i ${scsi_id}</arg>
</arguments>
<msg timestamp="20200909 23:03:31.550" level="INFO">Executing command 'rasctl -c detach -i 0'.</msg>
<msg timestamp="20200909 23:03:32.082" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" starttime="20200909 23:03:31.550" endtime="20200909 23:03:32.082"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:31.550" endtime="20200909 23:03:32.082"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:31.549" endtime="20200909 23:03:32.082"></status>
</kw>
<kw name="${scsi_id} = 1" type="foritem">
<kw name="Detach RaSCSI SCSI ID ${scsi_id}" library="rascsi_utils">
<doc>Detaches the specified SCSI ID from Rascsi</doc>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rasctl -c detach -i ${scsi_id}</arg>
</arguments>
<msg timestamp="20200909 23:03:32.084" level="INFO">Executing command 'rasctl -c detach -i 1'.</msg>
<msg timestamp="20200909 23:03:32.150" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" starttime="20200909 23:03:32.084" endtime="20200909 23:03:32.150"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:32.083" endtime="20200909 23:03:32.150"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:32.082" endtime="20200909 23:03:32.150"></status>
</kw>
<kw name="${scsi_id} = 2" type="foritem">
<kw name="Detach RaSCSI SCSI ID ${scsi_id}" library="rascsi_utils">
<doc>Detaches the specified SCSI ID from Rascsi</doc>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rasctl -c detach -i ${scsi_id}</arg>
</arguments>
<msg timestamp="20200909 23:03:32.152" level="INFO">Executing command 'rasctl -c detach -i 2'.</msg>
<msg timestamp="20200909 23:03:32.210" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" starttime="20200909 23:03:32.152" endtime="20200909 23:03:32.210"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:32.151" endtime="20200909 23:03:32.210"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:32.150" endtime="20200909 23:03:32.210"></status>
</kw>
<kw name="${scsi_id} = 3" type="foritem">
<kw name="Detach RaSCSI SCSI ID ${scsi_id}" library="rascsi_utils">
<doc>Detaches the specified SCSI ID from Rascsi</doc>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rasctl -c detach -i ${scsi_id}</arg>
</arguments>
<msg timestamp="20200909 23:03:32.212" level="INFO">Executing command 'rasctl -c detach -i 3'.</msg>
<msg timestamp="20200909 23:03:32.270" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" starttime="20200909 23:03:32.212" endtime="20200909 23:03:32.270"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:32.211" endtime="20200909 23:03:32.270"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:32.210" endtime="20200909 23:03:32.270"></status>
</kw>
<kw name="${scsi_id} = 4" type="foritem">
<kw name="Detach RaSCSI SCSI ID ${scsi_id}" library="rascsi_utils">
<doc>Detaches the specified SCSI ID from Rascsi</doc>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rasctl -c detach -i ${scsi_id}</arg>
</arguments>
<msg timestamp="20200909 23:03:32.272" level="INFO">Executing command 'rasctl -c detach -i 4'.</msg>
<msg timestamp="20200909 23:03:32.341" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" starttime="20200909 23:03:32.272" endtime="20200909 23:03:32.341"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:32.271" endtime="20200909 23:03:32.341"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:32.270" endtime="20200909 23:03:32.342"></status>
</kw>
<kw name="${scsi_id} = 5" type="foritem">
<kw name="Detach RaSCSI SCSI ID ${scsi_id}" library="rascsi_utils">
<doc>Detaches the specified SCSI ID from Rascsi</doc>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rasctl -c detach -i ${scsi_id}</arg>
</arguments>
<msg timestamp="20200909 23:03:32.343" level="INFO">Executing command 'rasctl -c detach -i 5'.</msg>
<msg timestamp="20200909 23:03:32.411" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" starttime="20200909 23:03:32.343" endtime="20200909 23:03:32.411"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:32.342" endtime="20200909 23:03:32.412"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:32.342" endtime="20200909 23:03:32.412"></status>
</kw>
<kw name="${scsi_id} = 6" type="foritem">
<kw name="Detach RaSCSI SCSI ID ${scsi_id}" library="rascsi_utils">
<doc>Detaches the specified SCSI ID from Rascsi</doc>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rasctl -c detach -i ${scsi_id}</arg>
</arguments>
<msg timestamp="20200909 23:03:32.414" level="INFO">Executing command 'rasctl -c detach -i 6'.</msg>
<msg timestamp="20200909 23:03:32.481" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" starttime="20200909 23:03:32.413" endtime="20200909 23:03:32.481"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:32.412" endtime="20200909 23:03:32.482"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:32.412" endtime="20200909 23:03:32.482"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:31.549" endtime="20200909 23:03:32.482"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:31.549" endtime="20200909 23:03:32.482"></status>
</kw>
<kw name="Delete all SCSI devices from Linux" library="linux_scsi_utils">
<doc>Remove all SCSI IDs from the Linux SCSI driver</doc>
<kw name="${scsi_id} IN RANGE [ 0 | 7 ]" type="for">
<kw name="${scsi_id} = 0" type="foritem">
<kw name="Delete SCSI ID ${scsi_id} from Linux" library="linux_scsi_utils">
<doc>Remove a SCSI ID from Linux. Basically, will un-do the Scan action</doc>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>sudo bash -c "echo 1 &gt; /sys/class/scsi_device/0:0:${scsi_id}:0/device/delete" 2&gt;&amp;1 &gt; /dev/null</arg>
</arguments>
<msg timestamp="20200909 23:03:32.487" level="INFO">Running command 'sudo bash -c "echo 1 &gt; /sys/class/scsi_device/0:0:0:0/device/delete" 2&gt;&amp;1 &gt; /dev/null'.</msg>
<status status="PASS" starttime="20200909 23:03:32.484" endtime="20200909 23:03:32.500"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:32.484" endtime="20200909 23:03:32.500"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:32.483" endtime="20200909 23:03:32.500"></status>
</kw>
<kw name="${scsi_id} = 1" type="foritem">
<kw name="Delete SCSI ID ${scsi_id} from Linux" library="linux_scsi_utils">
<doc>Remove a SCSI ID from Linux. Basically, will un-do the Scan action</doc>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>sudo bash -c "echo 1 &gt; /sys/class/scsi_device/0:0:${scsi_id}:0/device/delete" 2&gt;&amp;1 &gt; /dev/null</arg>
</arguments>
<msg timestamp="20200909 23:03:32.504" level="INFO">Running command 'sudo bash -c "echo 1 &gt; /sys/class/scsi_device/0:0:1:0/device/delete" 2&gt;&amp;1 &gt; /dev/null'.</msg>
<status status="PASS" starttime="20200909 23:03:32.502" endtime="20200909 23:03:32.515"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:32.501" endtime="20200909 23:03:32.516"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:32.500" endtime="20200909 23:03:32.516"></status>
</kw>
<kw name="${scsi_id} = 2" type="foritem">
<kw name="Delete SCSI ID ${scsi_id} from Linux" library="linux_scsi_utils">
<doc>Remove a SCSI ID from Linux. Basically, will un-do the Scan action</doc>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>sudo bash -c "echo 1 &gt; /sys/class/scsi_device/0:0:${scsi_id}:0/device/delete" 2&gt;&amp;1 &gt; /dev/null</arg>
</arguments>
<msg timestamp="20200909 23:03:32.521" level="INFO">Running command 'sudo bash -c "echo 1 &gt; /sys/class/scsi_device/0:0:2:0/device/delete" 2&gt;&amp;1 &gt; /dev/null'.</msg>
<status status="PASS" starttime="20200909 23:03:32.518" endtime="20200909 23:03:32.589"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:32.517" endtime="20200909 23:03:32.589"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:32.516" endtime="20200909 23:03:32.590"></status>
</kw>
<kw name="${scsi_id} = 3" type="foritem">
<kw name="Delete SCSI ID ${scsi_id} from Linux" library="linux_scsi_utils">
<doc>Remove a SCSI ID from Linux. Basically, will un-do the Scan action</doc>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>sudo bash -c "echo 1 &gt; /sys/class/scsi_device/0:0:${scsi_id}:0/device/delete" 2&gt;&amp;1 &gt; /dev/null</arg>
</arguments>
<msg timestamp="20200909 23:03:32.593" level="INFO">Running command 'sudo bash -c "echo 1 &gt; /sys/class/scsi_device/0:0:3:0/device/delete" 2&gt;&amp;1 &gt; /dev/null'.</msg>
<status status="PASS" starttime="20200909 23:03:32.591" endtime="20200909 23:03:32.602"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:32.590" endtime="20200909 23:03:32.602"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:32.590" endtime="20200909 23:03:32.603"></status>
</kw>
<kw name="${scsi_id} = 4" type="foritem">
<kw name="Delete SCSI ID ${scsi_id} from Linux" library="linux_scsi_utils">
<doc>Remove a SCSI ID from Linux. Basically, will un-do the Scan action</doc>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>sudo bash -c "echo 1 &gt; /sys/class/scsi_device/0:0:${scsi_id}:0/device/delete" 2&gt;&amp;1 &gt; /dev/null</arg>
</arguments>
<msg timestamp="20200909 23:03:32.606" level="INFO">Running command 'sudo bash -c "echo 1 &gt; /sys/class/scsi_device/0:0:4:0/device/delete" 2&gt;&amp;1 &gt; /dev/null'.</msg>
<status status="PASS" starttime="20200909 23:03:32.604" endtime="20200909 23:03:32.615"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:32.603" endtime="20200909 23:03:32.615"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:32.603" endtime="20200909 23:03:32.615"></status>
</kw>
<kw name="${scsi_id} = 5" type="foritem">
<kw name="Delete SCSI ID ${scsi_id} from Linux" library="linux_scsi_utils">
<doc>Remove a SCSI ID from Linux. Basically, will un-do the Scan action</doc>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>sudo bash -c "echo 1 &gt; /sys/class/scsi_device/0:0:${scsi_id}:0/device/delete" 2&gt;&amp;1 &gt; /dev/null</arg>
</arguments>
<msg timestamp="20200909 23:03:32.618" level="INFO">Running command 'sudo bash -c "echo 1 &gt; /sys/class/scsi_device/0:0:5:0/device/delete" 2&gt;&amp;1 &gt; /dev/null'.</msg>
<status status="PASS" starttime="20200909 23:03:32.616" endtime="20200909 23:03:32.628"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:32.616" endtime="20200909 23:03:32.628"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:32.616" endtime="20200909 23:03:32.628"></status>
</kw>
<kw name="${scsi_id} = 6" type="foritem">
<kw name="Delete SCSI ID ${scsi_id} from Linux" library="linux_scsi_utils">
<doc>Remove a SCSI ID from Linux. Basically, will un-do the Scan action</doc>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>sudo bash -c "echo 1 &gt; /sys/class/scsi_device/0:0:${scsi_id}:0/device/delete" 2&gt;&amp;1 &gt; /dev/null</arg>
</arguments>
<msg timestamp="20200909 23:03:32.632" level="INFO">Running command 'sudo bash -c "echo 1 &gt; /sys/class/scsi_device/0:0:6:0/device/delete" 2&gt;&amp;1 &gt; /dev/null'.</msg>
<status status="PASS" starttime="20200909 23:03:32.629" endtime="20200909 23:03:32.642"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:32.629" endtime="20200909 23:03:32.643"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:32.628" endtime="20200909 23:03:32.643"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:32.483" endtime="20200909 23:03:32.643"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:32.482" endtime="20200909 23:03:32.643"></status>
</kw>
<kw name="Delete all RaSCSI drive images" library="rascsi_utils">
<doc>Delete all of the temporary drive images that were created on the RaSCSI host</doc>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>/home/pi/images/tmp_*</arg>
</arguments>
<msg timestamp="20200909 23:03:32.646" level="INFO" html="yes">File '&lt;a href="file:///home/pi/images/tmp_*"&gt;/home/pi/images/tmp_*&lt;/a&gt;' does not exist.</msg>
<status status="PASS" starttime="20200909 23:03:32.645" endtime="20200909 23:03:32.646"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:32.644" endtime="20200909 23:03:32.646"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:31.549" endtime="20200909 23:03:32.646"></status>
</kw>
<doc>Create an empty NEC hard drive and verify that the SCSI
information is reported correctly to the Linux host</doc>
<status status="PASS" starttime="20200909 23:03:26.737" endtime="20200909 23:03:32.646" critical="yes"></status>
</test>
<test id="s1-s2-t4" name="Anex86 Hard Drive reports the correct device information">
<kw name="Run Keyword And Ignore Error" library="BuiltIn" type="setup">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Delete drive image tmp_anex86_hard_drive.hdi</arg>
</arguments>
<kw name="Delete drive image tmp_anex86_hard_drive.hdi" library="rascsi_utils">
<doc>Delete a disk drive image that was created on the raspberry pi</doc>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>/home/pi/images/${file_name}</arg>
</arguments>
<msg timestamp="20200909 23:03:32.651" level="INFO" html="yes">File '&lt;a href="file:///home/pi/images/tmp_anex86_hard_drive.hdi"&gt;/home/pi/images/tmp_anex86_hard_drive.hdi&lt;/a&gt;' does not exist.</msg>
<status status="PASS" starttime="20200909 23:03:32.650" endtime="20200909 23:03:32.651"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:32.649" endtime="20200909 23:03:32.651"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:32.649" endtime="20200909 23:03:32.651"></status>
</kw>
<kw name="Given Create Blank Rascsi Drive Image of Size 10 megabytes named tmp_anex86_hard_drive.hdi" library="rascsi_utils">
<doc>Creates an empty drive image on the Rascsi host of the specified size and file name</doc>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>dd if=/dev/zero of=/home/pi/images/${file_name} bs=1M count=${drive_size}</arg>
</arguments>
<msg timestamp="20200909 23:03:32.653" level="INFO">Executing command 'dd if=/dev/zero of=/home/pi/images/tmp_anex86_hard_drive.hdi bs=1M count=10'.</msg>
<msg timestamp="20200909 23:03:33.578" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" starttime="20200909 23:03:32.653" endtime="20200909 23:03:33.579"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:32.652" endtime="20200909 23:03:33.579"></status>
</kw>
<kw name="When Drive image tmp_anex86_hard_drive.hdi is attached as SCSI ID 3" library="rascsi_utils">
<doc>Attaches an existing drive image to the RaSCSI</doc>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rasctl -i ${scsi_id} -c attach -f /home/pi/images/${drive_image_file}</arg>
</arguments>
<assign>
<var>${rasctl_output}</var>
</assign>
<msg timestamp="20200909 23:03:33.581" level="INFO">Executing command 'rasctl -i 3 -c attach -f /home/pi/images/tmp_anex86_hard_drive.hdi'.</msg>
<msg timestamp="20200909 23:03:33.661" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20200909 23:03:33.661" level="INFO">${rasctl_output} = Error : File open error [/home/pi/images/tmp_anex86_hard_drive.hdi]
error : Bad file descriptor</msg>
<status status="PASS" starttime="20200909 23:03:33.581" endtime="20200909 23:03:33.662"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${rasctl_output}</arg>
</arguments>
<msg timestamp="20200909 23:03:33.662" level="INFO">Error : File open error [/home/pi/images/tmp_anex86_hard_drive.hdi]
error : Bad file descriptor</msg>
<status status="PASS" starttime="20200909 23:03:33.662" endtime="20200909 23:03:33.662"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rasctl -l</arg>
</arguments>
<assign>
<var>${rasctl_output}</var>
</assign>
<msg timestamp="20200909 23:03:33.663" level="INFO">Executing command 'rasctl -l'.</msg>
<msg timestamp="20200909 23:03:33.731" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20200909 23:03:33.731" level="INFO">${rasctl_output} = No device is installed.</msg>
<status status="PASS" starttime="20200909 23:03:33.663" endtime="20200909 23:03:33.731"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${rasctl_output}</arg>
</arguments>
<msg timestamp="20200909 23:03:33.732" level="INFO">No device is installed.</msg>
<status status="PASS" starttime="20200909 23:03:33.732" endtime="20200909 23:03:33.732"></status>
</kw>
<kw name="Rescan SCSI Bus" library="linux_scsi_utils">
<doc>Commands Linux to re-scan the SCSI bus on the local host</doc>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>sudo bash -c "echo \\"- - -\\" &gt; /sys/class/scsi_host/host0/scan"</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20200909 23:03:33.736" level="INFO">Running command 'sudo bash -c "echo \"- - -\" &gt; /sys/class/scsi_host/host0/scan"'.</msg>
<msg timestamp="20200909 23:03:38.158" level="INFO">${result} = </msg>
<status status="PASS" starttime="20200909 23:03:33.733" endtime="20200909 23:03:38.158"></status>
</kw>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>lsscsi</arg>
</arguments>
<assign>
<var>${lsscsi}</var>
</assign>
<msg timestamp="20200909 23:03:38.162" level="INFO">Running command 'lsscsi 2&gt;&amp;1'.</msg>
<msg timestamp="20200909 23:03:38.165" level="INFO">${lsscsi} = [1:0:0:0]    disk    ATA      WDC WD2500JS-41S 6C04  /dev/sdb 
[2:0:0:0]    cd/dvd  TSSTcorp DVDWBD SH-B123L  SB04  /dev/sr1 
[4:0:0:0]    disk    ATA      Hitachi HDS72101 A41A  /dev/sdc </msg>
<status status="PASS" starttime="20200909 23:03:38.159" endtime="20200909 23:03:38.165"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${lsscsi}</arg>
</arguments>
<msg timestamp="20200909 23:03:38.167" level="INFO">[1:0:0:0]    disk    ATA      WDC WD2500JS-41S 6C04  /dev/sdb 
[2:0:0:0]    cd/dvd  TSSTcorp DVDWBD SH-B123L  SB04  /dev/sr1 
[4:0:0:0]    disk    ATA      Hitachi HDS72101 A41A  /dev/sdc </msg>
<status status="PASS" starttime="20200909 23:03:38.166" endtime="20200909 23:03:38.167"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:33.732" endtime="20200909 23:03:38.167"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:33.580" endtime="20200909 23:03:38.167"></status>
</kw>
<kw name="Then Rasctl reports SCSI ID 3 of type HD" library="rascsi_utils">
<doc>Executes rasctl and verifies that the drive is configured as the specified type</doc>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rasctl -l</arg>
</arguments>
<assign>
<var>${rasctl_output}</var>
</assign>
<msg timestamp="20200909 23:03:38.169" level="INFO">Executing command 'rasctl -l'.</msg>
<msg timestamp="20200909 23:03:38.204" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20200909 23:03:38.205" level="INFO">${rasctl_output} = No device is installed.</msg>
<status status="PASS" starttime="20200909 23:03:38.168" endtime="20200909 23:03:38.205"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${rasctl_output}</arg>
</arguments>
<msg timestamp="20200909 23:03:38.205" level="INFO">No device is installed.</msg>
<status status="PASS" starttime="20200909 23:03:38.205" endtime="20200909 23:03:38.205"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${rasctl_output}</arg>
<arg>|${SPACE*2}${scsi_id}${SPACE}|${SPACE*2}0${SPACE}|${SPACE}SC${type}${SPACE}|</arg>
</arguments>
<msg timestamp="20200909 23:03:38.208" level="FAIL">'No device is installed.' does not contain '|  3 |  0 | SCHD |'</msg>
<status status="FAIL" starttime="20200909 23:03:38.206" endtime="20200909 23:03:38.208"></status>
</kw>
<status status="FAIL" starttime="20200909 23:03:38.168" endtime="20200909 23:03:38.208"></status>
</kw>
<kw name="Run Keywords" library="BuiltIn" type="teardown">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Detach all RaSCSI SCSI Devices</arg>
<arg>AND</arg>
<arg>Delete all SCSI devices from Linux</arg>
<arg>AND</arg>
<arg>Delete all RaSCSI drive images</arg>
</arguments>
<kw name="Detach all RaSCSI SCSI Devices" library="rascsi_utils">
<doc>Send detach commands for all of the SCSI IDs to make sure that there
aren't any left over before/after a test</doc>
<kw name="${scsi_id} IN RANGE [ 0 | 7 ]" type="for">
<kw name="${scsi_id} = 0" type="foritem">
<kw name="Detach RaSCSI SCSI ID ${scsi_id}" library="rascsi_utils">
<doc>Detaches the specified SCSI ID from Rascsi</doc>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rasctl -c detach -i ${scsi_id}</arg>
</arguments>
<msg timestamp="20200909 23:03:38.212" level="INFO">Executing command 'rasctl -c detach -i 0'.</msg>
<msg timestamp="20200909 23:03:38.281" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" starttime="20200909 23:03:38.212" endtime="20200909 23:03:38.282"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:38.211" endtime="20200909 23:03:38.282"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:38.211" endtime="20200909 23:03:38.282"></status>
</kw>
<kw name="${scsi_id} = 1" type="foritem">
<kw name="Detach RaSCSI SCSI ID ${scsi_id}" library="rascsi_utils">
<doc>Detaches the specified SCSI ID from Rascsi</doc>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rasctl -c detach -i ${scsi_id}</arg>
</arguments>
<msg timestamp="20200909 23:03:38.284" level="INFO">Executing command 'rasctl -c detach -i 1'.</msg>
<msg timestamp="20200909 23:03:38.351" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" starttime="20200909 23:03:38.283" endtime="20200909 23:03:38.351"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:38.282" endtime="20200909 23:03:38.352"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:38.282" endtime="20200909 23:03:38.352"></status>
</kw>
<kw name="${scsi_id} = 2" type="foritem">
<kw name="Detach RaSCSI SCSI ID ${scsi_id}" library="rascsi_utils">
<doc>Detaches the specified SCSI ID from Rascsi</doc>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rasctl -c detach -i ${scsi_id}</arg>
</arguments>
<msg timestamp="20200909 23:03:38.353" level="INFO">Executing command 'rasctl -c detach -i 2'.</msg>
<msg timestamp="20200909 23:03:38.421" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" starttime="20200909 23:03:38.353" endtime="20200909 23:03:38.421"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:38.352" endtime="20200909 23:03:38.422"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:38.352" endtime="20200909 23:03:38.422"></status>
</kw>
<kw name="${scsi_id} = 3" type="foritem">
<kw name="Detach RaSCSI SCSI ID ${scsi_id}" library="rascsi_utils">
<doc>Detaches the specified SCSI ID from Rascsi</doc>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rasctl -c detach -i ${scsi_id}</arg>
</arguments>
<msg timestamp="20200909 23:03:38.423" level="INFO">Executing command 'rasctl -c detach -i 3'.</msg>
<msg timestamp="20200909 23:03:38.491" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" starttime="20200909 23:03:38.423" endtime="20200909 23:03:38.491"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:38.422" endtime="20200909 23:03:38.492"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:38.422" endtime="20200909 23:03:38.492"></status>
</kw>
<kw name="${scsi_id} = 4" type="foritem">
<kw name="Detach RaSCSI SCSI ID ${scsi_id}" library="rascsi_utils">
<doc>Detaches the specified SCSI ID from Rascsi</doc>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rasctl -c detach -i ${scsi_id}</arg>
</arguments>
<msg timestamp="20200909 23:03:38.493" level="INFO">Executing command 'rasctl -c detach -i 4'.</msg>
<msg timestamp="20200909 23:03:38.561" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" starttime="20200909 23:03:38.493" endtime="20200909 23:03:38.561"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:38.492" endtime="20200909 23:03:38.562"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:38.492" endtime="20200909 23:03:38.562"></status>
</kw>
<kw name="${scsi_id} = 5" type="foritem">
<kw name="Detach RaSCSI SCSI ID ${scsi_id}" library="rascsi_utils">
<doc>Detaches the specified SCSI ID from Rascsi</doc>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rasctl -c detach -i ${scsi_id}</arg>
</arguments>
<msg timestamp="20200909 23:03:38.563" level="INFO">Executing command 'rasctl -c detach -i 5'.</msg>
<msg timestamp="20200909 23:03:38.631" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" starttime="20200909 23:03:38.563" endtime="20200909 23:03:38.632"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:38.562" endtime="20200909 23:03:38.632"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:38.562" endtime="20200909 23:03:38.632"></status>
</kw>
<kw name="${scsi_id} = 6" type="foritem">
<kw name="Detach RaSCSI SCSI ID ${scsi_id}" library="rascsi_utils">
<doc>Detaches the specified SCSI ID from Rascsi</doc>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rasctl -c detach -i ${scsi_id}</arg>
</arguments>
<msg timestamp="20200909 23:03:38.634" level="INFO">Executing command 'rasctl -c detach -i 6'.</msg>
<msg timestamp="20200909 23:03:38.701" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" starttime="20200909 23:03:38.633" endtime="20200909 23:03:38.701"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:38.632" endtime="20200909 23:03:38.702"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:38.632" endtime="20200909 23:03:38.702"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:38.210" endtime="20200909 23:03:38.702"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:38.210" endtime="20200909 23:03:38.702"></status>
</kw>
<kw name="Delete all SCSI devices from Linux" library="linux_scsi_utils">
<doc>Remove all SCSI IDs from the Linux SCSI driver</doc>
<kw name="${scsi_id} IN RANGE [ 0 | 7 ]" type="for">
<kw name="${scsi_id} = 0" type="foritem">
<kw name="Delete SCSI ID ${scsi_id} from Linux" library="linux_scsi_utils">
<doc>Remove a SCSI ID from Linux. Basically, will un-do the Scan action</doc>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>sudo bash -c "echo 1 &gt; /sys/class/scsi_device/0:0:${scsi_id}:0/device/delete" 2&gt;&amp;1 &gt; /dev/null</arg>
</arguments>
<msg timestamp="20200909 23:03:38.707" level="INFO">Running command 'sudo bash -c "echo 1 &gt; /sys/class/scsi_device/0:0:0:0/device/delete" 2&gt;&amp;1 &gt; /dev/null'.</msg>
<status status="PASS" starttime="20200909 23:03:38.704" endtime="20200909 23:03:38.720"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:38.704" endtime="20200909 23:03:38.720"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:38.703" endtime="20200909 23:03:38.721"></status>
</kw>
<kw name="${scsi_id} = 1" type="foritem">
<kw name="Delete SCSI ID ${scsi_id} from Linux" library="linux_scsi_utils">
<doc>Remove a SCSI ID from Linux. Basically, will un-do the Scan action</doc>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>sudo bash -c "echo 1 &gt; /sys/class/scsi_device/0:0:${scsi_id}:0/device/delete" 2&gt;&amp;1 &gt; /dev/null</arg>
</arguments>
<msg timestamp="20200909 23:03:38.725" level="INFO">Running command 'sudo bash -c "echo 1 &gt; /sys/class/scsi_device/0:0:1:0/device/delete" 2&gt;&amp;1 &gt; /dev/null'.</msg>
<status status="PASS" starttime="20200909 23:03:38.723" endtime="20200909 23:03:38.736"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:38.722" endtime="20200909 23:03:38.737"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:38.721" endtime="20200909 23:03:38.737"></status>
</kw>
<kw name="${scsi_id} = 2" type="foritem">
<kw name="Delete SCSI ID ${scsi_id} from Linux" library="linux_scsi_utils">
<doc>Remove a SCSI ID from Linux. Basically, will un-do the Scan action</doc>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>sudo bash -c "echo 1 &gt; /sys/class/scsi_device/0:0:${scsi_id}:0/device/delete" 2&gt;&amp;1 &gt; /dev/null</arg>
</arguments>
<msg timestamp="20200909 23:03:38.741" level="INFO">Running command 'sudo bash -c "echo 1 &gt; /sys/class/scsi_device/0:0:2:0/device/delete" 2&gt;&amp;1 &gt; /dev/null'.</msg>
<status status="PASS" starttime="20200909 23:03:38.738" endtime="20200909 23:03:38.751"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:38.737" endtime="20200909 23:03:38.752"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:38.737" endtime="20200909 23:03:38.752"></status>
</kw>
<kw name="${scsi_id} = 3" type="foritem">
<kw name="Delete SCSI ID ${scsi_id} from Linux" library="linux_scsi_utils">
<doc>Remove a SCSI ID from Linux. Basically, will un-do the Scan action</doc>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>sudo bash -c "echo 1 &gt; /sys/class/scsi_device/0:0:${scsi_id}:0/device/delete" 2&gt;&amp;1 &gt; /dev/null</arg>
</arguments>
<msg timestamp="20200909 23:03:38.757" level="INFO">Running command 'sudo bash -c "echo 1 &gt; /sys/class/scsi_device/0:0:3:0/device/delete" 2&gt;&amp;1 &gt; /dev/null'.</msg>
<status status="PASS" starttime="20200909 23:03:38.754" endtime="20200909 23:03:38.768"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:38.753" endtime="20200909 23:03:38.769"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:38.752" endtime="20200909 23:03:38.769"></status>
</kw>
<kw name="${scsi_id} = 4" type="foritem">
<kw name="Delete SCSI ID ${scsi_id} from Linux" library="linux_scsi_utils">
<doc>Remove a SCSI ID from Linux. Basically, will un-do the Scan action</doc>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>sudo bash -c "echo 1 &gt; /sys/class/scsi_device/0:0:${scsi_id}:0/device/delete" 2&gt;&amp;1 &gt; /dev/null</arg>
</arguments>
<msg timestamp="20200909 23:03:38.774" level="INFO">Running command 'sudo bash -c "echo 1 &gt; /sys/class/scsi_device/0:0:4:0/device/delete" 2&gt;&amp;1 &gt; /dev/null'.</msg>
<status status="PASS" starttime="20200909 23:03:38.771" endtime="20200909 23:03:38.785"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:38.770" endtime="20200909 23:03:38.785"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:38.769" endtime="20200909 23:03:38.785"></status>
</kw>
<kw name="${scsi_id} = 5" type="foritem">
<kw name="Delete SCSI ID ${scsi_id} from Linux" library="linux_scsi_utils">
<doc>Remove a SCSI ID from Linux. Basically, will un-do the Scan action</doc>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>sudo bash -c "echo 1 &gt; /sys/class/scsi_device/0:0:${scsi_id}:0/device/delete" 2&gt;&amp;1 &gt; /dev/null</arg>
</arguments>
<msg timestamp="20200909 23:03:38.789" level="INFO">Running command 'sudo bash -c "echo 1 &gt; /sys/class/scsi_device/0:0:5:0/device/delete" 2&gt;&amp;1 &gt; /dev/null'.</msg>
<status status="PASS" starttime="20200909 23:03:38.787" endtime="20200909 23:03:38.798"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:38.786" endtime="20200909 23:03:38.799"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:38.785" endtime="20200909 23:03:38.799"></status>
</kw>
<kw name="${scsi_id} = 6" type="foritem">
<kw name="Delete SCSI ID ${scsi_id} from Linux" library="linux_scsi_utils">
<doc>Remove a SCSI ID from Linux. Basically, will un-do the Scan action</doc>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>sudo bash -c "echo 1 &gt; /sys/class/scsi_device/0:0:${scsi_id}:0/device/delete" 2&gt;&amp;1 &gt; /dev/null</arg>
</arguments>
<msg timestamp="20200909 23:03:38.803" level="INFO">Running command 'sudo bash -c "echo 1 &gt; /sys/class/scsi_device/0:0:6:0/device/delete" 2&gt;&amp;1 &gt; /dev/null'.</msg>
<status status="PASS" starttime="20200909 23:03:38.801" endtime="20200909 23:03:38.814"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:38.800" endtime="20200909 23:03:38.815"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:38.799" endtime="20200909 23:03:38.815"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:38.703" endtime="20200909 23:03:38.815"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:38.702" endtime="20200909 23:03:38.815"></status>
</kw>
<kw name="Delete all RaSCSI drive images" library="rascsi_utils">
<doc>Delete all of the temporary drive images that were created on the RaSCSI host</doc>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>/home/pi/images/tmp_*</arg>
</arguments>
<msg timestamp="20200909 23:03:38.817" level="INFO" html="yes">File '&lt;a href="file:///home/pi/images/tmp_*"&gt;/home/pi/images/tmp_*&lt;/a&gt;' does not exist.</msg>
<status status="PASS" starttime="20200909 23:03:38.817" endtime="20200909 23:03:38.818"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:38.816" endtime="20200909 23:03:38.818"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:38.209" endtime="20200909 23:03:38.818"></status>
</kw>
<doc>Create an empty Anex86 hard drive and verify that the SCSI
information is reported correctly to the Linux host</doc>
<status status="FAIL" starttime="20200909 23:03:32.647" endtime="20200909 23:03:38.818" critical="yes">'No device is installed.' does not contain '|  3 |  0 | SCHD |'</status>
</test>
<test id="s1-s2-t5" name="CD-ROM drive reports the correct device information">
<kw name="When CD-ROM Drive is attached as SCSI ID 4" library="rascsi_utils">
<doc>Attaches a CD-ROM device (without any media) to the RaSCSI</doc>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rasctl -i ${scsi_id} -c attach -t cd</arg>
</arguments>
<assign>
<var>${rasctl_output}</var>
</assign>
<msg timestamp="20200909 23:03:38.822" level="INFO">Executing command 'rasctl -i 4 -c attach -t cd'.</msg>
<msg timestamp="20200909 23:03:38.858" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20200909 23:03:38.858" level="INFO">${rasctl_output} = </msg>
<status status="PASS" starttime="20200909 23:03:38.821" endtime="20200909 23:03:38.858"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${rasctl_output}</arg>
</arguments>
<msg timestamp="20200909 23:03:38.859" level="INFO"></msg>
<status status="PASS" starttime="20200909 23:03:38.858" endtime="20200909 23:03:38.859"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rasctl -l</arg>
</arguments>
<assign>
<var>${rasctl_output}</var>
</assign>
<msg timestamp="20200909 23:03:38.860" level="INFO">Executing command 'rasctl -l'.</msg>
<msg timestamp="20200909 23:03:38.931" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20200909 23:03:38.932" level="INFO">${rasctl_output} = 
+----+----+------+-------------------------------------
| ID | UN | TYPE | DEVICE STATUS
+----+----+------+-------------------------------------
|  4 |  0 | SCCD | NO MEDIA
+----+----+------+--------...</msg>
<status status="PASS" starttime="20200909 23:03:38.859" endtime="20200909 23:03:38.932"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${rasctl_output}</arg>
</arguments>
<msg timestamp="20200909 23:03:38.933" level="INFO">
+----+----+------+-------------------------------------
| ID | UN | TYPE | DEVICE STATUS
+----+----+------+-------------------------------------
|  4 |  0 | SCCD | NO MEDIA
+----+----+------+-------------------------------------</msg>
<status status="PASS" starttime="20200909 23:03:38.932" endtime="20200909 23:03:38.933"></status>
</kw>
<kw name="Rescan SCSI Bus" library="linux_scsi_utils">
<doc>Commands Linux to re-scan the SCSI bus on the local host</doc>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>sudo bash -c "echo \\"- - -\\" &gt; /sys/class/scsi_host/host0/scan"</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20200909 23:03:38.938" level="INFO">Running command 'sudo bash -c "echo \"- - -\" &gt; /sys/class/scsi_host/host0/scan"'.</msg>
<msg timestamp="20200909 23:03:43.337" level="INFO">${result} = </msg>
<status status="PASS" starttime="20200909 23:03:38.934" endtime="20200909 23:03:43.337"></status>
</kw>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>lsscsi</arg>
</arguments>
<assign>
<var>${lsscsi}</var>
</assign>
<msg timestamp="20200909 23:03:43.339" level="INFO">Running command 'lsscsi 2&gt;&amp;1'.</msg>
<msg timestamp="20200909 23:03:43.342" level="INFO">${lsscsi} = [0:0:4:0]    cd/dvd  RaSCSI   CD-ROM CDU-55S   0147  /dev/sr0 
[1:0:0:0]    disk    ATA      WDC WD2500JS-41S 6C04  /dev/sdb 
[2:0:0:0]    cd/dvd  TSSTcorp DVDWBD SH-B123L  SB04  /dev/sr1 
[4:0:0:0]  ...</msg>
<status status="PASS" starttime="20200909 23:03:43.337" endtime="20200909 23:03:43.342"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${lsscsi}</arg>
</arguments>
<msg timestamp="20200909 23:03:43.343" level="INFO">[0:0:4:0]    cd/dvd  RaSCSI   CD-ROM CDU-55S   0147  /dev/sr0 
[1:0:0:0]    disk    ATA      WDC WD2500JS-41S 6C04  /dev/sdb 
[2:0:0:0]    cd/dvd  TSSTcorp DVDWBD SH-B123L  SB04  /dev/sr1 
[4:0:0:0]    disk    ATA      Hitachi HDS72101 A41A  /dev/sdc </msg>
<status status="PASS" starttime="20200909 23:03:43.343" endtime="20200909 23:03:43.343"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:38.933" endtime="20200909 23:03:43.344"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:38.821" endtime="20200909 23:03:43.344"></status>
</kw>
<kw name="Then Rasctl reports SCSI ID 4 of type CD" library="rascsi_utils">
<doc>Executes rasctl and verifies that the drive is configured as the specified type</doc>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rasctl -l</arg>
</arguments>
<assign>
<var>${rasctl_output}</var>
</assign>
<msg timestamp="20200909 23:03:43.346" level="INFO">Executing command 'rasctl -l'.</msg>
<msg timestamp="20200909 23:03:43.382" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20200909 23:03:43.382" level="INFO">${rasctl_output} = 
+----+----+------+-------------------------------------
| ID | UN | TYPE | DEVICE STATUS
+----+----+------+-------------------------------------
|  4 |  0 | SCCD | NO MEDIA
+----+----+------+--------...</msg>
<status status="PASS" starttime="20200909 23:03:43.346" endtime="20200909 23:03:43.382"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${rasctl_output}</arg>
</arguments>
<msg timestamp="20200909 23:03:43.383" level="INFO">
+----+----+------+-------------------------------------
| ID | UN | TYPE | DEVICE STATUS
+----+----+------+-------------------------------------
|  4 |  0 | SCCD | NO MEDIA
+----+----+------+-------------------------------------</msg>
<status status="PASS" starttime="20200909 23:03:43.383" endtime="20200909 23:03:43.383"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${rasctl_output}</arg>
<arg>|${SPACE*2}${scsi_id}${SPACE}|${SPACE*2}0${SPACE}|${SPACE}SC${type}${SPACE}|</arg>
</arguments>
<status status="PASS" starttime="20200909 23:03:43.384" endtime="20200909 23:03:43.385"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:43.345" endtime="20200909 23:03:43.385"></status>
</kw>
<kw name="And SCSI ID 4 is detected by Linux" library="linux_scsi_utils">
<doc>Checks to see if a specific SCSI ID is found by lsscsi</doc>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>lsscsi</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20200909 23:03:43.389" level="INFO">Running command 'lsscsi 2&gt;&amp;1'.</msg>
<msg timestamp="20200909 23:03:43.393" level="INFO">${result} = [0:0:4:0]    cd/dvd  RaSCSI   CD-ROM CDU-55S   0147  /dev/sr0 
[1:0:0:0]    disk    ATA      WDC WD2500JS-41S 6C04  /dev/sdb 
[2:0:0:0]    cd/dvd  TSSTcorp DVDWBD SH-B123L  SB04  /dev/sr1 
[4:0:0:0]  ...</msg>
<status status="PASS" starttime="20200909 23:03:43.387" endtime="20200909 23:03:43.393"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20200909 23:03:43.395" level="INFO">[0:0:4:0]    cd/dvd  RaSCSI   CD-ROM CDU-55S   0147  /dev/sr0 
[1:0:0:0]    disk    ATA      WDC WD2500JS-41S 6C04  /dev/sdb 
[2:0:0:0]    cd/dvd  TSSTcorp DVDWBD SH-B123L  SB04  /dev/sr1 
[4:0:0:0]    disk    ATA      Hitachi HDS72101 A41A  /dev/sdc </msg>
<status status="PASS" starttime="20200909 23:03:43.394" endtime="20200909 23:03:43.395"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>[0:0:${scsi_id}:0]</arg>
</arguments>
<status status="PASS" starttime="20200909 23:03:43.395" endtime="20200909 23:03:43.395"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:43.386" endtime="20200909 23:03:43.396"></status>
</kw>
<kw name="And SCSI ID 4 reports vendor RaSCSI${SPACE*2}" library="linux_scsi_utils">
<doc>Reads the SCSI vendor from sysfs and checks that it matches expected value</doc>
<kw name="Get File" library="OperatingSystem">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>/sys/class/scsi_device/0:0:${scsi_id}:0/device/vendor</arg>
</arguments>
<assign>
<var>${read_scsi_info}</var>
</assign>
<msg timestamp="20200909 23:03:43.397" level="INFO" html="yes">Getting file '&lt;a href="file:///sys/class/scsi_device/0:0:4:0/device/vendor"&gt;/sys/class/scsi_device/0:0:4:0/device/vendor&lt;/a&gt;'.</msg>
<msg timestamp="20200909 23:03:43.397" level="INFO">${read_scsi_info} = RaSCSI  
</msg>
<status status="PASS" starttime="20200909 23:03:43.397" endtime="20200909 23:03:43.397"></status>
</kw>
<kw name="Remove String Using Regexp" library="String">
<doc>Removes ``patterns`` from the given ``string``.</doc>
<arguments>
<arg>${read_scsi_info}</arg>
<arg>${\n}</arg>
</arguments>
<assign>
<var>${read_scsi_info}</var>
</assign>
<msg timestamp="20200909 23:03:43.398" level="INFO">${read_scsi_info} = RaSCSI  </msg>
<status status="PASS" starttime="20200909 23:03:43.397" endtime="20200909 23:03:43.398"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Vendor ID read from sysfs was --${read_scsi_info}--</arg>
</arguments>
<msg timestamp="20200909 23:03:43.399" level="INFO">Vendor ID read from sysfs was --RaSCSI  --</msg>
<status status="PASS" starttime="20200909 23:03:43.398" endtime="20200909 23:03:43.399"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${read_scsi_info}</arg>
<arg>${scsi_vendor}</arg>
<arg>Incorrect SCSI vendor reported for ID ${scsi_id}</arg>
</arguments>
<status status="PASS" starttime="20200909 23:03:43.399" endtime="20200909 23:03:43.399"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:43.396" endtime="20200909 23:03:43.399"></status>
</kw>
<kw name="And SCSI ID 4 reports revision 0147" library="linux_scsi_utils">
<doc>Reads the SCSI vendor from sysfs and checks that it matches expected value</doc>
<kw name="Get File" library="OperatingSystem">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>/sys/class/scsi_device/0:0:${scsi_id}:0/device/rev</arg>
</arguments>
<assign>
<var>${read_scsi_info}</var>
</assign>
<msg timestamp="20200909 23:03:43.400" level="INFO" html="yes">Getting file '&lt;a href="file:///sys/class/scsi_device/0:0:4:0/device/rev"&gt;/sys/class/scsi_device/0:0:4:0/device/rev&lt;/a&gt;'.</msg>
<msg timestamp="20200909 23:03:43.401" level="INFO">${read_scsi_info} = 0147
</msg>
<status status="PASS" starttime="20200909 23:03:43.400" endtime="20200909 23:03:43.401"></status>
</kw>
<kw name="Remove String Using Regexp" library="String">
<doc>Removes ``patterns`` from the given ``string``.</doc>
<arguments>
<arg>${read_scsi_info}</arg>
<arg>${\n}</arg>
</arguments>
<assign>
<var>${read_scsi_info}</var>
</assign>
<msg timestamp="20200909 23:03:43.401" level="INFO">${read_scsi_info} = 0147</msg>
<status status="PASS" starttime="20200909 23:03:43.401" endtime="20200909 23:03:43.401"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>SCSI revision read from sysfs was ${read_scsi_info}</arg>
</arguments>
<msg timestamp="20200909 23:03:43.402" level="INFO">SCSI revision read from sysfs was 0147</msg>
<status status="PASS" starttime="20200909 23:03:43.401" endtime="20200909 23:03:43.402"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${read_scsi_info}</arg>
<arg>${scsi_rev}</arg>
<arg>Incorrect SCSI version reported for ID ${scsi_id}</arg>
</arguments>
<status status="PASS" starttime="20200909 23:03:43.402" endtime="20200909 23:03:43.402"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:43.400" endtime="20200909 23:03:43.402"></status>
</kw>
<kw name="And SCSI ID 4 reports model CD-ROM CDU-55S${SPACE*2}" library="linux_scsi_utils">
<doc>Reads the SCSI vendor from sysfs and checks that it matches expected value</doc>
<kw name="Get File" library="OperatingSystem">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>/sys/class/scsi_device/0:0:${scsi_id}:0/device/model</arg>
</arguments>
<assign>
<var>${read_scsi_info}</var>
</assign>
<msg timestamp="20200909 23:03:43.403" level="INFO" html="yes">Getting file '&lt;a href="file:///sys/class/scsi_device/0:0:4:0/device/model"&gt;/sys/class/scsi_device/0:0:4:0/device/model&lt;/a&gt;'.</msg>
<msg timestamp="20200909 23:03:43.404" level="INFO">${read_scsi_info} = CD-ROM CDU-55S  
</msg>
<status status="PASS" starttime="20200909 23:03:43.403" endtime="20200909 23:03:43.404"></status>
</kw>
<kw name="Remove String Using Regexp" library="String">
<doc>Removes ``patterns`` from the given ``string``.</doc>
<arguments>
<arg>${read_scsi_info}</arg>
<arg>${\n}</arg>
</arguments>
<assign>
<var>${read_scsi_info}</var>
</assign>
<msg timestamp="20200909 23:03:43.404" level="INFO">${read_scsi_info} = CD-ROM CDU-55S  </msg>
<status status="PASS" starttime="20200909 23:03:43.404" endtime="20200909 23:03:43.404"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>SCSI model read from sysfs was --${read_scsi_info}--</arg>
</arguments>
<msg timestamp="20200909 23:03:43.405" level="INFO">SCSI model read from sysfs was --CD-ROM CDU-55S  --</msg>
<status status="PASS" starttime="20200909 23:03:43.404" endtime="20200909 23:03:43.405"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${read_scsi_info}</arg>
<arg>${scsi_model}</arg>
<arg>Incorrect SCSI model reported for ID ${scsi_id}</arg>
</arguments>
<status status="PASS" starttime="20200909 23:03:43.405" endtime="20200909 23:03:43.405"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:43.403" endtime="20200909 23:03:43.405"></status>
</kw>
<kw name="And SCSI ID 4 reports type ${Scsi_device_type_cd_rom}" library="linux_scsi_utils">
<doc>Reads the SCSI type from sysfs and checks that it matches expected value</doc>
<kw name="Get File" library="OperatingSystem">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>/sys/class/scsi_device/0:0:${scsi_id}:0/device/type</arg>
</arguments>
<assign>
<var>${read_scsi_info}</var>
</assign>
<msg timestamp="20200909 23:03:43.406" level="INFO" html="yes">Getting file '&lt;a href="file:///sys/class/scsi_device/0:0:4:0/device/type"&gt;/sys/class/scsi_device/0:0:4:0/device/type&lt;/a&gt;'.</msg>
<msg timestamp="20200909 23:03:43.407" level="INFO">${read_scsi_info} = 5
</msg>
<status status="PASS" starttime="20200909 23:03:43.406" endtime="20200909 23:03:43.407"></status>
</kw>
<kw name="Remove String Using Regexp" library="String">
<doc>Removes ``patterns`` from the given ``string``.</doc>
<arguments>
<arg>${read_scsi_info}</arg>
<arg>${\n}</arg>
</arguments>
<assign>
<var>${read_scsi_info}</var>
</assign>
<msg timestamp="20200909 23:03:43.407" level="INFO">${read_scsi_info} = 5</msg>
<status status="PASS" starttime="20200909 23:03:43.407" endtime="20200909 23:03:43.407"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>SCSI model read from sysfs was ${read_scsi_info}</arg>
</arguments>
<msg timestamp="20200909 23:03:43.408" level="INFO">SCSI model read from sysfs was 5</msg>
<status status="PASS" starttime="20200909 23:03:43.407" endtime="20200909 23:03:43.408"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${read_scsi_info}</arg>
<arg>${scsi_type}</arg>
<arg>Incorrect SCSI type reported for ID ${scsi_id}</arg>
</arguments>
<status status="PASS" starttime="20200909 23:03:43.408" endtime="20200909 23:03:43.408"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:43.406" endtime="20200909 23:03:43.408"></status>
</kw>
<kw name="Run Keywords" library="BuiltIn" type="teardown">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Detach all RaSCSI SCSI Devices</arg>
<arg>AND</arg>
<arg>Delete all SCSI devices from Linux</arg>
<arg>AND</arg>
<arg>Delete all RaSCSI drive images</arg>
</arguments>
<kw name="Detach all RaSCSI SCSI Devices" library="rascsi_utils">
<doc>Send detach commands for all of the SCSI IDs to make sure that there
aren't any left over before/after a test</doc>
<kw name="${scsi_id} IN RANGE [ 0 | 7 ]" type="for">
<kw name="${scsi_id} = 0" type="foritem">
<kw name="Detach RaSCSI SCSI ID ${scsi_id}" library="rascsi_utils">
<doc>Detaches the specified SCSI ID from Rascsi</doc>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rasctl -c detach -i ${scsi_id}</arg>
</arguments>
<msg timestamp="20200909 23:03:43.410" level="INFO">Executing command 'rasctl -c detach -i 0'.</msg>
<msg timestamp="20200909 23:03:43.461" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" starttime="20200909 23:03:43.410" endtime="20200909 23:03:43.461"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:43.410" endtime="20200909 23:03:43.462"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:43.409" endtime="20200909 23:03:43.462"></status>
</kw>
<kw name="${scsi_id} = 1" type="foritem">
<kw name="Detach RaSCSI SCSI ID ${scsi_id}" library="rascsi_utils">
<doc>Detaches the specified SCSI ID from Rascsi</doc>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rasctl -c detach -i ${scsi_id}</arg>
</arguments>
<msg timestamp="20200909 23:03:43.464" level="INFO">Executing command 'rasctl -c detach -i 1'.</msg>
<msg timestamp="20200909 23:03:43.531" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" starttime="20200909 23:03:43.463" endtime="20200909 23:03:43.531"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:43.463" endtime="20200909 23:03:43.532"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:43.462" endtime="20200909 23:03:43.532"></status>
</kw>
<kw name="${scsi_id} = 2" type="foritem">
<kw name="Detach RaSCSI SCSI ID ${scsi_id}" library="rascsi_utils">
<doc>Detaches the specified SCSI ID from Rascsi</doc>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rasctl -c detach -i ${scsi_id}</arg>
</arguments>
<msg timestamp="20200909 23:03:43.533" level="INFO">Executing command 'rasctl -c detach -i 2'.</msg>
<msg timestamp="20200909 23:03:43.601" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" starttime="20200909 23:03:43.533" endtime="20200909 23:03:43.601"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:43.532" endtime="20200909 23:03:43.602"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:43.532" endtime="20200909 23:03:43.602"></status>
</kw>
<kw name="${scsi_id} = 3" type="foritem">
<kw name="Detach RaSCSI SCSI ID ${scsi_id}" library="rascsi_utils">
<doc>Detaches the specified SCSI ID from Rascsi</doc>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rasctl -c detach -i ${scsi_id}</arg>
</arguments>
<msg timestamp="20200909 23:03:43.603" level="INFO">Executing command 'rasctl -c detach -i 3'.</msg>
<msg timestamp="20200909 23:03:43.671" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" starttime="20200909 23:03:43.603" endtime="20200909 23:03:43.671"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:43.602" endtime="20200909 23:03:43.672"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:43.602" endtime="20200909 23:03:43.672"></status>
</kw>
<kw name="${scsi_id} = 4" type="foritem">
<kw name="Detach RaSCSI SCSI ID ${scsi_id}" library="rascsi_utils">
<doc>Detaches the specified SCSI ID from Rascsi</doc>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rasctl -c detach -i ${scsi_id}</arg>
</arguments>
<msg timestamp="20200909 23:03:43.673" level="INFO">Executing command 'rasctl -c detach -i 4'.</msg>
<msg timestamp="20200909 23:03:43.741" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" starttime="20200909 23:03:43.673" endtime="20200909 23:03:43.741"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:43.672" endtime="20200909 23:03:43.741"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:43.672" endtime="20200909 23:03:43.741"></status>
</kw>
<kw name="${scsi_id} = 5" type="foritem">
<kw name="Detach RaSCSI SCSI ID ${scsi_id}" library="rascsi_utils">
<doc>Detaches the specified SCSI ID from Rascsi</doc>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rasctl -c detach -i ${scsi_id}</arg>
</arguments>
<msg timestamp="20200909 23:03:43.742" level="INFO">Executing command 'rasctl -c detach -i 5'.</msg>
<msg timestamp="20200909 23:03:43.811" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" starttime="20200909 23:03:43.742" endtime="20200909 23:03:43.812"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:43.741" endtime="20200909 23:03:43.812"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:43.741" endtime="20200909 23:03:43.812"></status>
</kw>
<kw name="${scsi_id} = 6" type="foritem">
<kw name="Detach RaSCSI SCSI ID ${scsi_id}" library="rascsi_utils">
<doc>Detaches the specified SCSI ID from Rascsi</doc>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rasctl -c detach -i ${scsi_id}</arg>
</arguments>
<msg timestamp="20200909 23:03:43.814" level="INFO">Executing command 'rasctl -c detach -i 6'.</msg>
<msg timestamp="20200909 23:03:43.881" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" starttime="20200909 23:03:43.813" endtime="20200909 23:03:43.881"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:43.812" endtime="20200909 23:03:43.882"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:43.812" endtime="20200909 23:03:43.882"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:43.409" endtime="20200909 23:03:43.882"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:43.409" endtime="20200909 23:03:43.882"></status>
</kw>
<kw name="Delete all SCSI devices from Linux" library="linux_scsi_utils">
<doc>Remove all SCSI IDs from the Linux SCSI driver</doc>
<kw name="${scsi_id} IN RANGE [ 0 | 7 ]" type="for">
<kw name="${scsi_id} = 0" type="foritem">
<kw name="Delete SCSI ID ${scsi_id} from Linux" library="linux_scsi_utils">
<doc>Remove a SCSI ID from Linux. Basically, will un-do the Scan action</doc>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>sudo bash -c "echo 1 &gt; /sys/class/scsi_device/0:0:${scsi_id}:0/device/delete" 2&gt;&amp;1 &gt; /dev/null</arg>
</arguments>
<msg timestamp="20200909 23:03:43.888" level="INFO">Running command 'sudo bash -c "echo 1 &gt; /sys/class/scsi_device/0:0:0:0/device/delete" 2&gt;&amp;1 &gt; /dev/null'.</msg>
<status status="PASS" starttime="20200909 23:03:43.884" endtime="20200909 23:03:43.900"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:43.884" endtime="20200909 23:03:43.900"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:43.883" endtime="20200909 23:03:43.900"></status>
</kw>
<kw name="${scsi_id} = 1" type="foritem">
<kw name="Delete SCSI ID ${scsi_id} from Linux" library="linux_scsi_utils">
<doc>Remove a SCSI ID from Linux. Basically, will un-do the Scan action</doc>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>sudo bash -c "echo 1 &gt; /sys/class/scsi_device/0:0:${scsi_id}:0/device/delete" 2&gt;&amp;1 &gt; /dev/null</arg>
</arguments>
<msg timestamp="20200909 23:03:43.905" level="INFO">Running command 'sudo bash -c "echo 1 &gt; /sys/class/scsi_device/0:0:1:0/device/delete" 2&gt;&amp;1 &gt; /dev/null'.</msg>
<status status="PASS" starttime="20200909 23:03:43.902" endtime="20200909 23:03:43.916"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:43.901" endtime="20200909 23:03:43.917"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:43.901" endtime="20200909 23:03:43.917"></status>
</kw>
<kw name="${scsi_id} = 2" type="foritem">
<kw name="Delete SCSI ID ${scsi_id} from Linux" library="linux_scsi_utils">
<doc>Remove a SCSI ID from Linux. Basically, will un-do the Scan action</doc>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>sudo bash -c "echo 1 &gt; /sys/class/scsi_device/0:0:${scsi_id}:0/device/delete" 2&gt;&amp;1 &gt; /dev/null</arg>
</arguments>
<msg timestamp="20200909 23:03:43.922" level="INFO">Running command 'sudo bash -c "echo 1 &gt; /sys/class/scsi_device/0:0:2:0/device/delete" 2&gt;&amp;1 &gt; /dev/null'.</msg>
<status status="PASS" starttime="20200909 23:03:43.919" endtime="20200909 23:03:43.934"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:43.918" endtime="20200909 23:03:43.935"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:43.918" endtime="20200909 23:03:43.935"></status>
</kw>
<kw name="${scsi_id} = 3" type="foritem">
<kw name="Delete SCSI ID ${scsi_id} from Linux" library="linux_scsi_utils">
<doc>Remove a SCSI ID from Linux. Basically, will un-do the Scan action</doc>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>sudo bash -c "echo 1 &gt; /sys/class/scsi_device/0:0:${scsi_id}:0/device/delete" 2&gt;&amp;1 &gt; /dev/null</arg>
</arguments>
<msg timestamp="20200909 23:03:43.939" level="INFO">Running command 'sudo bash -c "echo 1 &gt; /sys/class/scsi_device/0:0:3:0/device/delete" 2&gt;&amp;1 &gt; /dev/null'.</msg>
<status status="PASS" starttime="20200909 23:03:43.936" endtime="20200909 23:03:43.952"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:43.936" endtime="20200909 23:03:43.952"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:43.935" endtime="20200909 23:03:43.952"></status>
</kw>
<kw name="${scsi_id} = 4" type="foritem">
<kw name="Delete SCSI ID ${scsi_id} from Linux" library="linux_scsi_utils">
<doc>Remove a SCSI ID from Linux. Basically, will un-do the Scan action</doc>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>sudo bash -c "echo 1 &gt; /sys/class/scsi_device/0:0:${scsi_id}:0/device/delete" 2&gt;&amp;1 &gt; /dev/null</arg>
</arguments>
<msg timestamp="20200909 23:03:43.957" level="INFO">Running command 'sudo bash -c "echo 1 &gt; /sys/class/scsi_device/0:0:4:0/device/delete" 2&gt;&amp;1 &gt; /dev/null'.</msg>
<status status="PASS" starttime="20200909 23:03:43.954" endtime="20200909 23:03:43.981"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:43.953" endtime="20200909 23:03:43.982"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:43.953" endtime="20200909 23:03:43.982"></status>
</kw>
<kw name="${scsi_id} = 5" type="foritem">
<kw name="Delete SCSI ID ${scsi_id} from Linux" library="linux_scsi_utils">
<doc>Remove a SCSI ID from Linux. Basically, will un-do the Scan action</doc>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>sudo bash -c "echo 1 &gt; /sys/class/scsi_device/0:0:${scsi_id}:0/device/delete" 2&gt;&amp;1 &gt; /dev/null</arg>
</arguments>
<msg timestamp="20200909 23:03:43.986" level="INFO">Running command 'sudo bash -c "echo 1 &gt; /sys/class/scsi_device/0:0:5:0/device/delete" 2&gt;&amp;1 &gt; /dev/null'.</msg>
<status status="PASS" starttime="20200909 23:03:43.983" endtime="20200909 23:03:43.998"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:43.982" endtime="20200909 23:03:43.998"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:43.982" endtime="20200909 23:03:43.998"></status>
</kw>
<kw name="${scsi_id} = 6" type="foritem">
<kw name="Delete SCSI ID ${scsi_id} from Linux" library="linux_scsi_utils">
<doc>Remove a SCSI ID from Linux. Basically, will un-do the Scan action</doc>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>sudo bash -c "echo 1 &gt; /sys/class/scsi_device/0:0:${scsi_id}:0/device/delete" 2&gt;&amp;1 &gt; /dev/null</arg>
</arguments>
<msg timestamp="20200909 23:03:44.003" level="INFO">Running command 'sudo bash -c "echo 1 &gt; /sys/class/scsi_device/0:0:6:0/device/delete" 2&gt;&amp;1 &gt; /dev/null'.</msg>
<status status="PASS" starttime="20200909 23:03:44.000" endtime="20200909 23:03:44.014"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:43.999" endtime="20200909 23:03:44.015"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:43.999" endtime="20200909 23:03:44.015"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:43.883" endtime="20200909 23:03:44.015"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:43.882" endtime="20200909 23:03:44.015"></status>
</kw>
<kw name="Delete all RaSCSI drive images" library="rascsi_utils">
<doc>Delete all of the temporary drive images that were created on the RaSCSI host</doc>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>/home/pi/images/tmp_*</arg>
</arguments>
<msg timestamp="20200909 23:03:44.017" level="INFO" html="yes">File '&lt;a href="file:///home/pi/images/tmp_*"&gt;/home/pi/images/tmp_*&lt;/a&gt;' does not exist.</msg>
<status status="PASS" starttime="20200909 23:03:44.017" endtime="20200909 23:03:44.018"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:44.016" endtime="20200909 23:03:44.018"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:43.409" endtime="20200909 23:03:44.018"></status>
</kw>
<doc>Create an CD-ROM drive with no media and verify that the SCSI
information is reported correctly to the Linux host</doc>
<status status="PASS" starttime="20200909 23:03:38.819" endtime="20200909 23:03:44.018" critical="yes"></status>
</test>
<test id="s1-s2-t6" name="Magneto Optical drive reports the correct device information">
<kw name="When Magneto Optical drive is attached as SCSI ID 5" library="rascsi_utils">
<doc>Attaches a Magneto Optical device (without any media) to the RaSCSI</doc>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rasctl -i ${scsi_id} -c attach -t mo</arg>
</arguments>
<msg timestamp="20200909 23:03:44.022" level="INFO">Executing command 'rasctl -i 5 -c attach -t mo'.</msg>
<msg timestamp="20200909 23:03:44.058" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" starttime="20200909 23:03:44.022" endtime="20200909 23:03:44.058"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rasctl -l</arg>
</arguments>
<assign>
<var>${rasctl_output}</var>
</assign>
<msg timestamp="20200909 23:03:44.059" level="INFO">Executing command 'rasctl -l'.</msg>
<msg timestamp="20200909 23:03:44.131" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20200909 23:03:44.131" level="INFO">${rasctl_output} = 
+----+----+------+-------------------------------------
| ID | UN | TYPE | DEVICE STATUS
+----+----+------+-------------------------------------
|  5 |  0 | SCMO | NO MEDIA
+----+----+------+--------...</msg>
<status status="PASS" starttime="20200909 23:03:44.058" endtime="20200909 23:03:44.131"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${rasctl_output}</arg>
</arguments>
<msg timestamp="20200909 23:03:44.132" level="INFO">
+----+----+------+-------------------------------------
| ID | UN | TYPE | DEVICE STATUS
+----+----+------+-------------------------------------
|  5 |  0 | SCMO | NO MEDIA
+----+----+------+-------------------------------------</msg>
<status status="PASS" starttime="20200909 23:03:44.132" endtime="20200909 23:03:44.132"></status>
</kw>
<kw name="Rescan SCSI Bus" library="linux_scsi_utils">
<doc>Commands Linux to re-scan the SCSI bus on the local host</doc>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>sudo bash -c "echo \\"- - -\\" &gt; /sys/class/scsi_host/host0/scan"</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20200909 23:03:44.136" level="INFO">Running command 'sudo bash -c "echo \"- - -\" &gt; /sys/class/scsi_host/host0/scan"'.</msg>
<msg timestamp="20200909 23:03:48.349" level="INFO">${result} = </msg>
<status status="PASS" starttime="20200909 23:03:44.133" endtime="20200909 23:03:48.350"></status>
</kw>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>lsscsi</arg>
</arguments>
<assign>
<var>${lsscsi}</var>
</assign>
<msg timestamp="20200909 23:03:48.354" level="INFO">Running command 'lsscsi 2&gt;&amp;1'.</msg>
<msg timestamp="20200909 23:03:48.357" level="INFO">${lsscsi} = [0:0:5:0]    optical RaSCSI   M2513A           0147  /dev/sdd 
[1:0:0:0]    disk    ATA      WDC WD2500JS-41S 6C04  /dev/sdb 
[2:0:0:0]    cd/dvd  TSSTcorp DVDWBD SH-B123L  SB04  /dev/sr1 
[4:0:0:0]  ...</msg>
<status status="PASS" starttime="20200909 23:03:48.351" endtime="20200909 23:03:48.357"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${lsscsi}</arg>
</arguments>
<msg timestamp="20200909 23:03:48.358" level="INFO">[0:0:5:0]    optical RaSCSI   M2513A           0147  /dev/sdd 
[1:0:0:0]    disk    ATA      WDC WD2500JS-41S 6C04  /dev/sdb 
[2:0:0:0]    cd/dvd  TSSTcorp DVDWBD SH-B123L  SB04  /dev/sr1 
[4:0:0:0]    disk    ATA      Hitachi HDS72101 A41A  /dev/sdc </msg>
<status status="PASS" starttime="20200909 23:03:48.358" endtime="20200909 23:03:48.358"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:44.133" endtime="20200909 23:03:48.359"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:44.021" endtime="20200909 23:03:48.359"></status>
</kw>
<kw name="Then Rasctl reports SCSI ID 5 of type MO" library="rascsi_utils">
<doc>Executes rasctl and verifies that the drive is configured as the specified type</doc>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rasctl -l</arg>
</arguments>
<assign>
<var>${rasctl_output}</var>
</assign>
<msg timestamp="20200909 23:03:48.360" level="INFO">Executing command 'rasctl -l'.</msg>
<msg timestamp="20200909 23:03:48.396" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20200909 23:03:48.396" level="INFO">${rasctl_output} = 
+----+----+------+-------------------------------------
| ID | UN | TYPE | DEVICE STATUS
+----+----+------+-------------------------------------
|  5 |  0 | SCMO | NO MEDIA
+----+----+------+--------...</msg>
<status status="PASS" starttime="20200909 23:03:48.360" endtime="20200909 23:03:48.396"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${rasctl_output}</arg>
</arguments>
<msg timestamp="20200909 23:03:48.397" level="INFO">
+----+----+------+-------------------------------------
| ID | UN | TYPE | DEVICE STATUS
+----+----+------+-------------------------------------
|  5 |  0 | SCMO | NO MEDIA
+----+----+------+-------------------------------------</msg>
<status status="PASS" starttime="20200909 23:03:48.396" endtime="20200909 23:03:48.397"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${rasctl_output}</arg>
<arg>|${SPACE*2}${scsi_id}${SPACE}|${SPACE*2}0${SPACE}|${SPACE}SC${type}${SPACE}|</arg>
</arguments>
<status status="PASS" starttime="20200909 23:03:48.397" endtime="20200909 23:03:48.398"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:48.359" endtime="20200909 23:03:48.398"></status>
</kw>
<kw name="And SCSI ID 5 is detected by Linux" library="linux_scsi_utils">
<doc>Checks to see if a specific SCSI ID is found by lsscsi</doc>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>lsscsi</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20200909 23:03:48.401" level="INFO">Running command 'lsscsi 2&gt;&amp;1'.</msg>
<msg timestamp="20200909 23:03:48.404" level="INFO">${result} = [0:0:5:0]    optical RaSCSI   M2513A           0147  /dev/sdd 
[1:0:0:0]    disk    ATA      WDC WD2500JS-41S 6C04  /dev/sdb 
[2:0:0:0]    cd/dvd  TSSTcorp DVDWBD SH-B123L  SB04  /dev/sr1 
[4:0:0:0]  ...</msg>
<status status="PASS" starttime="20200909 23:03:48.399" endtime="20200909 23:03:48.404"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20200909 23:03:48.405" level="INFO">[0:0:5:0]    optical RaSCSI   M2513A           0147  /dev/sdd 
[1:0:0:0]    disk    ATA      WDC WD2500JS-41S 6C04  /dev/sdb 
[2:0:0:0]    cd/dvd  TSSTcorp DVDWBD SH-B123L  SB04  /dev/sr1 
[4:0:0:0]    disk    ATA      Hitachi HDS72101 A41A  /dev/sdc </msg>
<status status="PASS" starttime="20200909 23:03:48.405" endtime="20200909 23:03:48.405"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>[0:0:${scsi_id}:0]</arg>
</arguments>
<status status="PASS" starttime="20200909 23:03:48.405" endtime="20200909 23:03:48.406"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:48.398" endtime="20200909 23:03:48.406"></status>
</kw>
<kw name="And SCSI ID 5 reports vendor RaSCSI${SPACE*2}" library="linux_scsi_utils">
<doc>Reads the SCSI vendor from sysfs and checks that it matches expected value</doc>
<kw name="Get File" library="OperatingSystem">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>/sys/class/scsi_device/0:0:${scsi_id}:0/device/vendor</arg>
</arguments>
<assign>
<var>${read_scsi_info}</var>
</assign>
<msg timestamp="20200909 23:03:48.408" level="INFO" html="yes">Getting file '&lt;a href="file:///sys/class/scsi_device/0:0:5:0/device/vendor"&gt;/sys/class/scsi_device/0:0:5:0/device/vendor&lt;/a&gt;'.</msg>
<msg timestamp="20200909 23:03:48.408" level="INFO">${read_scsi_info} = RaSCSI  
</msg>
<status status="PASS" starttime="20200909 23:03:48.407" endtime="20200909 23:03:48.408"></status>
</kw>
<kw name="Remove String Using Regexp" library="String">
<doc>Removes ``patterns`` from the given ``string``.</doc>
<arguments>
<arg>${read_scsi_info}</arg>
<arg>${\n}</arg>
</arguments>
<assign>
<var>${read_scsi_info}</var>
</assign>
<msg timestamp="20200909 23:03:48.409" level="INFO">${read_scsi_info} = RaSCSI  </msg>
<status status="PASS" starttime="20200909 23:03:48.409" endtime="20200909 23:03:48.409"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Vendor ID read from sysfs was --${read_scsi_info}--</arg>
</arguments>
<msg timestamp="20200909 23:03:48.409" level="INFO">Vendor ID read from sysfs was --RaSCSI  --</msg>
<status status="PASS" starttime="20200909 23:03:48.409" endtime="20200909 23:03:48.410"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${read_scsi_info}</arg>
<arg>${scsi_vendor}</arg>
<arg>Incorrect SCSI vendor reported for ID ${scsi_id}</arg>
</arguments>
<status status="PASS" starttime="20200909 23:03:48.410" endtime="20200909 23:03:48.410"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:48.406" endtime="20200909 23:03:48.410"></status>
</kw>
<kw name="And SCSI ID 5 reports revision 0147" library="linux_scsi_utils">
<doc>Reads the SCSI vendor from sysfs and checks that it matches expected value</doc>
<kw name="Get File" library="OperatingSystem">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>/sys/class/scsi_device/0:0:${scsi_id}:0/device/rev</arg>
</arguments>
<assign>
<var>${read_scsi_info}</var>
</assign>
<msg timestamp="20200909 23:03:48.412" level="INFO" html="yes">Getting file '&lt;a href="file:///sys/class/scsi_device/0:0:5:0/device/rev"&gt;/sys/class/scsi_device/0:0:5:0/device/rev&lt;/a&gt;'.</msg>
<msg timestamp="20200909 23:03:48.412" level="INFO">${read_scsi_info} = 0147
</msg>
<status status="PASS" starttime="20200909 23:03:48.411" endtime="20200909 23:03:48.412"></status>
</kw>
<kw name="Remove String Using Regexp" library="String">
<doc>Removes ``patterns`` from the given ``string``.</doc>
<arguments>
<arg>${read_scsi_info}</arg>
<arg>${\n}</arg>
</arguments>
<assign>
<var>${read_scsi_info}</var>
</assign>
<msg timestamp="20200909 23:03:48.413" level="INFO">${read_scsi_info} = 0147</msg>
<status status="PASS" starttime="20200909 23:03:48.412" endtime="20200909 23:03:48.413"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>SCSI revision read from sysfs was ${read_scsi_info}</arg>
</arguments>
<msg timestamp="20200909 23:03:48.413" level="INFO">SCSI revision read from sysfs was 0147</msg>
<status status="PASS" starttime="20200909 23:03:48.413" endtime="20200909 23:03:48.413"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${read_scsi_info}</arg>
<arg>${scsi_rev}</arg>
<arg>Incorrect SCSI version reported for ID ${scsi_id}</arg>
</arguments>
<status status="PASS" starttime="20200909 23:03:48.414" endtime="20200909 23:03:48.414"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:48.411" endtime="20200909 23:03:48.414"></status>
</kw>
<kw name="And SCSI ID 5 reports model M2513A${SPACE*10}" library="linux_scsi_utils">
<doc>Reads the SCSI vendor from sysfs and checks that it matches expected value</doc>
<kw name="Get File" library="OperatingSystem">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>/sys/class/scsi_device/0:0:${scsi_id}:0/device/model</arg>
</arguments>
<assign>
<var>${read_scsi_info}</var>
</assign>
<msg timestamp="20200909 23:03:48.416" level="INFO" html="yes">Getting file '&lt;a href="file:///sys/class/scsi_device/0:0:5:0/device/model"&gt;/sys/class/scsi_device/0:0:5:0/device/model&lt;/a&gt;'.</msg>
<msg timestamp="20200909 23:03:48.416" level="INFO">${read_scsi_info} = M2513A          
</msg>
<status status="PASS" starttime="20200909 23:03:48.415" endtime="20200909 23:03:48.416"></status>
</kw>
<kw name="Remove String Using Regexp" library="String">
<doc>Removes ``patterns`` from the given ``string``.</doc>
<arguments>
<arg>${read_scsi_info}</arg>
<arg>${\n}</arg>
</arguments>
<assign>
<var>${read_scsi_info}</var>
</assign>
<msg timestamp="20200909 23:03:48.416" level="INFO">${read_scsi_info} = M2513A          </msg>
<status status="PASS" starttime="20200909 23:03:48.416" endtime="20200909 23:03:48.417"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>SCSI model read from sysfs was --${read_scsi_info}--</arg>
</arguments>
<msg timestamp="20200909 23:03:48.417" level="INFO">SCSI model read from sysfs was --M2513A          --</msg>
<status status="PASS" starttime="20200909 23:03:48.417" endtime="20200909 23:03:48.417"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${read_scsi_info}</arg>
<arg>${scsi_model}</arg>
<arg>Incorrect SCSI model reported for ID ${scsi_id}</arg>
</arguments>
<status status="PASS" starttime="20200909 23:03:48.417" endtime="20200909 23:03:48.418"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:48.415" endtime="20200909 23:03:48.418"></status>
</kw>
<kw name="And SCSI ID 5 reports type ${Scsi_device_type_optical_memory}" library="linux_scsi_utils">
<doc>Reads the SCSI type from sysfs and checks that it matches expected value</doc>
<kw name="Get File" library="OperatingSystem">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>/sys/class/scsi_device/0:0:${scsi_id}:0/device/type</arg>
</arguments>
<assign>
<var>${read_scsi_info}</var>
</assign>
<msg timestamp="20200909 23:03:48.419" level="INFO" html="yes">Getting file '&lt;a href="file:///sys/class/scsi_device/0:0:5:0/device/type"&gt;/sys/class/scsi_device/0:0:5:0/device/type&lt;/a&gt;'.</msg>
<msg timestamp="20200909 23:03:48.419" level="INFO">${read_scsi_info} = 7
</msg>
<status status="PASS" starttime="20200909 23:03:48.419" endtime="20200909 23:03:48.419"></status>
</kw>
<kw name="Remove String Using Regexp" library="String">
<doc>Removes ``patterns`` from the given ``string``.</doc>
<arguments>
<arg>${read_scsi_info}</arg>
<arg>${\n}</arg>
</arguments>
<assign>
<var>${read_scsi_info}</var>
</assign>
<msg timestamp="20200909 23:03:48.420" level="INFO">${read_scsi_info} = 7</msg>
<status status="PASS" starttime="20200909 23:03:48.420" endtime="20200909 23:03:48.420"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>SCSI model read from sysfs was ${read_scsi_info}</arg>
</arguments>
<msg timestamp="20200909 23:03:48.421" level="INFO">SCSI model read from sysfs was 7</msg>
<status status="PASS" starttime="20200909 23:03:48.420" endtime="20200909 23:03:48.421"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${read_scsi_info}</arg>
<arg>${scsi_type}</arg>
<arg>Incorrect SCSI type reported for ID ${scsi_id}</arg>
</arguments>
<status status="PASS" starttime="20200909 23:03:48.421" endtime="20200909 23:03:48.421"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:48.418" endtime="20200909 23:03:48.421"></status>
</kw>
<kw name="Run Keywords" library="BuiltIn" type="teardown">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Detach all RaSCSI SCSI Devices</arg>
<arg>AND</arg>
<arg>Delete all SCSI devices from Linux</arg>
<arg>AND</arg>
<arg>Delete all RaSCSI drive images</arg>
</arguments>
<kw name="Detach all RaSCSI SCSI Devices" library="rascsi_utils">
<doc>Send detach commands for all of the SCSI IDs to make sure that there
aren't any left over before/after a test</doc>
<kw name="${scsi_id} IN RANGE [ 0 | 7 ]" type="for">
<kw name="${scsi_id} = 0" type="foritem">
<kw name="Detach RaSCSI SCSI ID ${scsi_id}" library="rascsi_utils">
<doc>Detaches the specified SCSI ID from Rascsi</doc>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rasctl -c detach -i ${scsi_id}</arg>
</arguments>
<msg timestamp="20200909 23:03:48.424" level="INFO">Executing command 'rasctl -c detach -i 0'.</msg>
<msg timestamp="20200909 23:03:48.471" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" starttime="20200909 23:03:48.424" endtime="20200909 23:03:48.471"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:48.423" endtime="20200909 23:03:48.472"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:48.423" endtime="20200909 23:03:48.472"></status>
</kw>
<kw name="${scsi_id} = 1" type="foritem">
<kw name="Detach RaSCSI SCSI ID ${scsi_id}" library="rascsi_utils">
<doc>Detaches the specified SCSI ID from Rascsi</doc>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rasctl -c detach -i ${scsi_id}</arg>
</arguments>
<msg timestamp="20200909 23:03:48.473" level="INFO">Executing command 'rasctl -c detach -i 1'.</msg>
<msg timestamp="20200909 23:03:48.541" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" starttime="20200909 23:03:48.473" endtime="20200909 23:03:48.541"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:48.472" endtime="20200909 23:03:48.542"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:48.472" endtime="20200909 23:03:48.542"></status>
</kw>
<kw name="${scsi_id} = 2" type="foritem">
<kw name="Detach RaSCSI SCSI ID ${scsi_id}" library="rascsi_utils">
<doc>Detaches the specified SCSI ID from Rascsi</doc>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rasctl -c detach -i ${scsi_id}</arg>
</arguments>
<msg timestamp="20200909 23:03:48.544" level="INFO">Executing command 'rasctl -c detach -i 2'.</msg>
<msg timestamp="20200909 23:03:48.611" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" starttime="20200909 23:03:48.543" endtime="20200909 23:03:48.611"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:48.542" endtime="20200909 23:03:48.612"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:48.542" endtime="20200909 23:03:48.612"></status>
</kw>
<kw name="${scsi_id} = 3" type="foritem">
<kw name="Detach RaSCSI SCSI ID ${scsi_id}" library="rascsi_utils">
<doc>Detaches the specified SCSI ID from Rascsi</doc>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rasctl -c detach -i ${scsi_id}</arg>
</arguments>
<msg timestamp="20200909 23:03:48.614" level="INFO">Executing command 'rasctl -c detach -i 3'.</msg>
<msg timestamp="20200909 23:03:48.681" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" starttime="20200909 23:03:48.613" endtime="20200909 23:03:48.681"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:48.612" endtime="20200909 23:03:48.682"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:48.612" endtime="20200909 23:03:48.682"></status>
</kw>
<kw name="${scsi_id} = 4" type="foritem">
<kw name="Detach RaSCSI SCSI ID ${scsi_id}" library="rascsi_utils">
<doc>Detaches the specified SCSI ID from Rascsi</doc>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rasctl -c detach -i ${scsi_id}</arg>
</arguments>
<msg timestamp="20200909 23:03:48.684" level="INFO">Executing command 'rasctl -c detach -i 4'.</msg>
<msg timestamp="20200909 23:03:48.751" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" starttime="20200909 23:03:48.683" endtime="20200909 23:03:48.751"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:48.682" endtime="20200909 23:03:48.752"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:48.682" endtime="20200909 23:03:48.752"></status>
</kw>
<kw name="${scsi_id} = 5" type="foritem">
<kw name="Detach RaSCSI SCSI ID ${scsi_id}" library="rascsi_utils">
<doc>Detaches the specified SCSI ID from Rascsi</doc>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rasctl -c detach -i ${scsi_id}</arg>
</arguments>
<msg timestamp="20200909 23:03:48.753" level="INFO">Executing command 'rasctl -c detach -i 5'.</msg>
<msg timestamp="20200909 23:03:48.821" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" starttime="20200909 23:03:48.753" endtime="20200909 23:03:48.821"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:48.752" endtime="20200909 23:03:48.822"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:48.752" endtime="20200909 23:03:48.822"></status>
</kw>
<kw name="${scsi_id} = 6" type="foritem">
<kw name="Detach RaSCSI SCSI ID ${scsi_id}" library="rascsi_utils">
<doc>Detaches the specified SCSI ID from Rascsi</doc>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rasctl -c detach -i ${scsi_id}</arg>
</arguments>
<msg timestamp="20200909 23:03:48.823" level="INFO">Executing command 'rasctl -c detach -i 6'.</msg>
<msg timestamp="20200909 23:03:48.891" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" starttime="20200909 23:03:48.823" endtime="20200909 23:03:48.891"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:48.822" endtime="20200909 23:03:48.892"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:48.822" endtime="20200909 23:03:48.892"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:48.423" endtime="20200909 23:03:48.892"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:48.422" endtime="20200909 23:03:48.892"></status>
</kw>
<kw name="Delete all SCSI devices from Linux" library="linux_scsi_utils">
<doc>Remove all SCSI IDs from the Linux SCSI driver</doc>
<kw name="${scsi_id} IN RANGE [ 0 | 7 ]" type="for">
<kw name="${scsi_id} = 0" type="foritem">
<kw name="Delete SCSI ID ${scsi_id} from Linux" library="linux_scsi_utils">
<doc>Remove a SCSI ID from Linux. Basically, will un-do the Scan action</doc>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>sudo bash -c "echo 1 &gt; /sys/class/scsi_device/0:0:${scsi_id}:0/device/delete" 2&gt;&amp;1 &gt; /dev/null</arg>
</arguments>
<msg timestamp="20200909 23:03:48.897" level="INFO">Running command 'sudo bash -c "echo 1 &gt; /sys/class/scsi_device/0:0:0:0/device/delete" 2&gt;&amp;1 &gt; /dev/null'.</msg>
<status status="PASS" starttime="20200909 23:03:48.894" endtime="20200909 23:03:48.910"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:48.893" endtime="20200909 23:03:48.910"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:48.893" endtime="20200909 23:03:48.910"></status>
</kw>
<kw name="${scsi_id} = 1" type="foritem">
<kw name="Delete SCSI ID ${scsi_id} from Linux" library="linux_scsi_utils">
<doc>Remove a SCSI ID from Linux. Basically, will un-do the Scan action</doc>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>sudo bash -c "echo 1 &gt; /sys/class/scsi_device/0:0:${scsi_id}:0/device/delete" 2&gt;&amp;1 &gt; /dev/null</arg>
</arguments>
<msg timestamp="20200909 23:03:48.915" level="INFO">Running command 'sudo bash -c "echo 1 &gt; /sys/class/scsi_device/0:0:1:0/device/delete" 2&gt;&amp;1 &gt; /dev/null'.</msg>
<status status="PASS" starttime="20200909 23:03:48.912" endtime="20200909 23:03:48.923"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:48.911" endtime="20200909 23:03:48.924"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:48.911" endtime="20200909 23:03:48.924"></status>
</kw>
<kw name="${scsi_id} = 2" type="foritem">
<kw name="Delete SCSI ID ${scsi_id} from Linux" library="linux_scsi_utils">
<doc>Remove a SCSI ID from Linux. Basically, will un-do the Scan action</doc>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>sudo bash -c "echo 1 &gt; /sys/class/scsi_device/0:0:${scsi_id}:0/device/delete" 2&gt;&amp;1 &gt; /dev/null</arg>
</arguments>
<msg timestamp="20200909 23:03:48.929" level="INFO">Running command 'sudo bash -c "echo 1 &gt; /sys/class/scsi_device/0:0:2:0/device/delete" 2&gt;&amp;1 &gt; /dev/null'.</msg>
<status status="PASS" starttime="20200909 23:03:48.926" endtime="20200909 23:03:48.940"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:48.925" endtime="20200909 23:03:48.941"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:48.924" endtime="20200909 23:03:48.941"></status>
</kw>
<kw name="${scsi_id} = 3" type="foritem">
<kw name="Delete SCSI ID ${scsi_id} from Linux" library="linux_scsi_utils">
<doc>Remove a SCSI ID from Linux. Basically, will un-do the Scan action</doc>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>sudo bash -c "echo 1 &gt; /sys/class/scsi_device/0:0:${scsi_id}:0/device/delete" 2&gt;&amp;1 &gt; /dev/null</arg>
</arguments>
<msg timestamp="20200909 23:03:48.946" level="INFO">Running command 'sudo bash -c "echo 1 &gt; /sys/class/scsi_device/0:0:3:0/device/delete" 2&gt;&amp;1 &gt; /dev/null'.</msg>
<status status="PASS" starttime="20200909 23:03:48.943" endtime="20200909 23:03:48.956"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:48.942" endtime="20200909 23:03:48.957"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:48.941" endtime="20200909 23:03:48.957"></status>
</kw>
<kw name="${scsi_id} = 4" type="foritem">
<kw name="Delete SCSI ID ${scsi_id} from Linux" library="linux_scsi_utils">
<doc>Remove a SCSI ID from Linux. Basically, will un-do the Scan action</doc>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>sudo bash -c "echo 1 &gt; /sys/class/scsi_device/0:0:${scsi_id}:0/device/delete" 2&gt;&amp;1 &gt; /dev/null</arg>
</arguments>
<msg timestamp="20200909 23:03:48.962" level="INFO">Running command 'sudo bash -c "echo 1 &gt; /sys/class/scsi_device/0:0:4:0/device/delete" 2&gt;&amp;1 &gt; /dev/null'.</msg>
<status status="PASS" starttime="20200909 23:03:48.959" endtime="20200909 23:03:48.973"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:48.958" endtime="20200909 23:03:48.974"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:48.957" endtime="20200909 23:03:48.974"></status>
</kw>
<kw name="${scsi_id} = 5" type="foritem">
<kw name="Delete SCSI ID ${scsi_id} from Linux" library="linux_scsi_utils">
<doc>Remove a SCSI ID from Linux. Basically, will un-do the Scan action</doc>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>sudo bash -c "echo 1 &gt; /sys/class/scsi_device/0:0:${scsi_id}:0/device/delete" 2&gt;&amp;1 &gt; /dev/null</arg>
</arguments>
<msg timestamp="20200909 23:03:48.979" level="INFO">Running command 'sudo bash -c "echo 1 &gt; /sys/class/scsi_device/0:0:5:0/device/delete" 2&gt;&amp;1 &gt; /dev/null'.</msg>
<status status="PASS" starttime="20200909 23:03:48.976" endtime="20200909 23:03:49.046"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:48.974" endtime="20200909 23:03:49.047"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:48.974" endtime="20200909 23:03:49.047"></status>
</kw>
<kw name="${scsi_id} = 6" type="foritem">
<kw name="Delete SCSI ID ${scsi_id} from Linux" library="linux_scsi_utils">
<doc>Remove a SCSI ID from Linux. Basically, will un-do the Scan action</doc>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>sudo bash -c "echo 1 &gt; /sys/class/scsi_device/0:0:${scsi_id}:0/device/delete" 2&gt;&amp;1 &gt; /dev/null</arg>
</arguments>
<msg timestamp="20200909 23:03:49.053" level="INFO">Running command 'sudo bash -c "echo 1 &gt; /sys/class/scsi_device/0:0:6:0/device/delete" 2&gt;&amp;1 &gt; /dev/null'.</msg>
<status status="PASS" starttime="20200909 23:03:49.050" endtime="20200909 23:03:49.065"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:49.048" endtime="20200909 23:03:49.066"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:49.048" endtime="20200909 23:03:49.066"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:48.893" endtime="20200909 23:03:49.066"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:48.892" endtime="20200909 23:03:49.066"></status>
</kw>
<kw name="Delete all RaSCSI drive images" library="rascsi_utils">
<doc>Delete all of the temporary drive images that were created on the RaSCSI host</doc>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>/home/pi/images/tmp_*</arg>
</arguments>
<msg timestamp="20200909 23:03:49.068" level="INFO" html="yes">File '&lt;a href="file:///home/pi/images/tmp_*"&gt;/home/pi/images/tmp_*&lt;/a&gt;' does not exist.</msg>
<status status="PASS" starttime="20200909 23:03:49.068" endtime="20200909 23:03:49.068"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:49.067" endtime="20200909 23:03:49.069"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:48.422" endtime="20200909 23:03:49.069"></status>
</kw>
<doc>Create an Magneto Optical drive with no media and verify
that the SCSI information is reported correctly to the
Linux host</doc>
<status status="PASS" starttime="20200909 23:03:44.019" endtime="20200909 23:03:49.069" critical="yes"></status>
</test>
<kw name="Run Keywords" library="BuiltIn" type="teardown">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Detach all RaSCSI SCSI Devices</arg>
<arg>AND</arg>
<arg>Delete all SCSI devices from Linux</arg>
<arg>AND</arg>
<arg>Close All Connections</arg>
</arguments>
<kw name="Detach all RaSCSI SCSI Devices" library="rascsi_utils">
<doc>Send detach commands for all of the SCSI IDs to make sure that there
aren't any left over before/after a test</doc>
<kw name="${scsi_id} IN RANGE [ 0 | 7 ]" type="for">
<kw name="${scsi_id} = 0" type="foritem">
<kw name="Detach RaSCSI SCSI ID ${scsi_id}" library="rascsi_utils">
<doc>Detaches the specified SCSI ID from Rascsi</doc>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rasctl -c detach -i ${scsi_id}</arg>
</arguments>
<msg timestamp="20200909 23:03:49.073" level="INFO">Executing command 'rasctl -c detach -i 0'.</msg>
<msg timestamp="20200909 23:03:49.109" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" starttime="20200909 23:03:49.073" endtime="20200909 23:03:49.109"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:49.073" endtime="20200909 23:03:49.109"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:49.072" endtime="20200909 23:03:49.110"></status>
</kw>
<kw name="${scsi_id} = 1" type="foritem">
<kw name="Detach RaSCSI SCSI ID ${scsi_id}" library="rascsi_utils">
<doc>Detaches the specified SCSI ID from Rascsi</doc>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rasctl -c detach -i ${scsi_id}</arg>
</arguments>
<msg timestamp="20200909 23:03:49.111" level="INFO">Executing command 'rasctl -c detach -i 1'.</msg>
<msg timestamp="20200909 23:03:49.191" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" starttime="20200909 23:03:49.111" endtime="20200909 23:03:49.191"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:49.110" endtime="20200909 23:03:49.192"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:49.110" endtime="20200909 23:03:49.192"></status>
</kw>
<kw name="${scsi_id} = 2" type="foritem">
<kw name="Detach RaSCSI SCSI ID ${scsi_id}" library="rascsi_utils">
<doc>Detaches the specified SCSI ID from Rascsi</doc>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rasctl -c detach -i ${scsi_id}</arg>
</arguments>
<msg timestamp="20200909 23:03:49.193" level="INFO">Executing command 'rasctl -c detach -i 2'.</msg>
<msg timestamp="20200909 23:03:49.271" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" starttime="20200909 23:03:49.193" endtime="20200909 23:03:49.271"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:49.192" endtime="20200909 23:03:49.271"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:49.192" endtime="20200909 23:03:49.271"></status>
</kw>
<kw name="${scsi_id} = 3" type="foritem">
<kw name="Detach RaSCSI SCSI ID ${scsi_id}" library="rascsi_utils">
<doc>Detaches the specified SCSI ID from Rascsi</doc>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rasctl -c detach -i ${scsi_id}</arg>
</arguments>
<msg timestamp="20200909 23:03:49.272" level="INFO">Executing command 'rasctl -c detach -i 3'.</msg>
<msg timestamp="20200909 23:03:49.351" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" starttime="20200909 23:03:49.272" endtime="20200909 23:03:49.351"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:49.272" endtime="20200909 23:03:49.352"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:49.271" endtime="20200909 23:03:49.352"></status>
</kw>
<kw name="${scsi_id} = 4" type="foritem">
<kw name="Detach RaSCSI SCSI ID ${scsi_id}" library="rascsi_utils">
<doc>Detaches the specified SCSI ID from Rascsi</doc>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rasctl -c detach -i ${scsi_id}</arg>
</arguments>
<msg timestamp="20200909 23:03:49.353" level="INFO">Executing command 'rasctl -c detach -i 4'.</msg>
<msg timestamp="20200909 23:03:49.421" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" starttime="20200909 23:03:49.353" endtime="20200909 23:03:49.421"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:49.352" endtime="20200909 23:03:49.422"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:49.352" endtime="20200909 23:03:49.422"></status>
</kw>
<kw name="${scsi_id} = 5" type="foritem">
<kw name="Detach RaSCSI SCSI ID ${scsi_id}" library="rascsi_utils">
<doc>Detaches the specified SCSI ID from Rascsi</doc>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rasctl -c detach -i ${scsi_id}</arg>
</arguments>
<msg timestamp="20200909 23:03:49.423" level="INFO">Executing command 'rasctl -c detach -i 5'.</msg>
<msg timestamp="20200909 23:03:49.491" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" starttime="20200909 23:03:49.423" endtime="20200909 23:03:49.491"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:49.422" endtime="20200909 23:03:49.492"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:49.422" endtime="20200909 23:03:49.492"></status>
</kw>
<kw name="${scsi_id} = 6" type="foritem">
<kw name="Detach RaSCSI SCSI ID ${scsi_id}" library="rascsi_utils">
<doc>Detaches the specified SCSI ID from Rascsi</doc>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rasctl -c detach -i ${scsi_id}</arg>
</arguments>
<msg timestamp="20200909 23:03:49.493" level="INFO">Executing command 'rasctl -c detach -i 6'.</msg>
<msg timestamp="20200909 23:03:49.571" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" starttime="20200909 23:03:49.493" endtime="20200909 23:03:49.571"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:49.492" endtime="20200909 23:03:49.572"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:49.492" endtime="20200909 23:03:49.572"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:49.072" endtime="20200909 23:03:49.572"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:49.072" endtime="20200909 23:03:49.572"></status>
</kw>
<kw name="Delete all SCSI devices from Linux" library="linux_scsi_utils">
<doc>Remove all SCSI IDs from the Linux SCSI driver</doc>
<kw name="${scsi_id} IN RANGE [ 0 | 7 ]" type="for">
<kw name="${scsi_id} = 0" type="foritem">
<kw name="Delete SCSI ID ${scsi_id} from Linux" library="linux_scsi_utils">
<doc>Remove a SCSI ID from Linux. Basically, will un-do the Scan action</doc>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>sudo bash -c "echo 1 &gt; /sys/class/scsi_device/0:0:${scsi_id}:0/device/delete" 2&gt;&amp;1 &gt; /dev/null</arg>
</arguments>
<msg timestamp="20200909 23:03:49.577" level="INFO">Running command 'sudo bash -c "echo 1 &gt; /sys/class/scsi_device/0:0:0:0/device/delete" 2&gt;&amp;1 &gt; /dev/null'.</msg>
<status status="PASS" starttime="20200909 23:03:49.574" endtime="20200909 23:03:49.589"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:49.573" endtime="20200909 23:03:49.590"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:49.573" endtime="20200909 23:03:49.590"></status>
</kw>
<kw name="${scsi_id} = 1" type="foritem">
<kw name="Delete SCSI ID ${scsi_id} from Linux" library="linux_scsi_utils">
<doc>Remove a SCSI ID from Linux. Basically, will un-do the Scan action</doc>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>sudo bash -c "echo 1 &gt; /sys/class/scsi_device/0:0:${scsi_id}:0/device/delete" 2&gt;&amp;1 &gt; /dev/null</arg>
</arguments>
<msg timestamp="20200909 23:03:49.595" level="INFO">Running command 'sudo bash -c "echo 1 &gt; /sys/class/scsi_device/0:0:1:0/device/delete" 2&gt;&amp;1 &gt; /dev/null'.</msg>
<status status="PASS" starttime="20200909 23:03:49.592" endtime="20200909 23:03:49.604"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:49.591" endtime="20200909 23:03:49.605"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:49.590" endtime="20200909 23:03:49.605"></status>
</kw>
<kw name="${scsi_id} = 2" type="foritem">
<kw name="Delete SCSI ID ${scsi_id} from Linux" library="linux_scsi_utils">
<doc>Remove a SCSI ID from Linux. Basically, will un-do the Scan action</doc>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>sudo bash -c "echo 1 &gt; /sys/class/scsi_device/0:0:${scsi_id}:0/device/delete" 2&gt;&amp;1 &gt; /dev/null</arg>
</arguments>
<msg timestamp="20200909 23:03:49.609" level="INFO">Running command 'sudo bash -c "echo 1 &gt; /sys/class/scsi_device/0:0:2:0/device/delete" 2&gt;&amp;1 &gt; /dev/null'.</msg>
<status status="PASS" starttime="20200909 23:03:49.606" endtime="20200909 23:03:49.619"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:49.605" endtime="20200909 23:03:49.620"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:49.605" endtime="20200909 23:03:49.620"></status>
</kw>
<kw name="${scsi_id} = 3" type="foritem">
<kw name="Delete SCSI ID ${scsi_id} from Linux" library="linux_scsi_utils">
<doc>Remove a SCSI ID from Linux. Basically, will un-do the Scan action</doc>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>sudo bash -c "echo 1 &gt; /sys/class/scsi_device/0:0:${scsi_id}:0/device/delete" 2&gt;&amp;1 &gt; /dev/null</arg>
</arguments>
<msg timestamp="20200909 23:03:49.625" level="INFO">Running command 'sudo bash -c "echo 1 &gt; /sys/class/scsi_device/0:0:3:0/device/delete" 2&gt;&amp;1 &gt; /dev/null'.</msg>
<status status="PASS" starttime="20200909 23:03:49.622" endtime="20200909 23:03:49.636"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:49.621" endtime="20200909 23:03:49.636"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:49.620" endtime="20200909 23:03:49.636"></status>
</kw>
<kw name="${scsi_id} = 4" type="foritem">
<kw name="Delete SCSI ID ${scsi_id} from Linux" library="linux_scsi_utils">
<doc>Remove a SCSI ID from Linux. Basically, will un-do the Scan action</doc>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>sudo bash -c "echo 1 &gt; /sys/class/scsi_device/0:0:${scsi_id}:0/device/delete" 2&gt;&amp;1 &gt; /dev/null</arg>
</arguments>
<msg timestamp="20200909 23:03:49.641" level="INFO">Running command 'sudo bash -c "echo 1 &gt; /sys/class/scsi_device/0:0:4:0/device/delete" 2&gt;&amp;1 &gt; /dev/null'.</msg>
<status status="PASS" starttime="20200909 23:03:49.638" endtime="20200909 23:03:49.652"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:49.637" endtime="20200909 23:03:49.652"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:49.637" endtime="20200909 23:03:49.652"></status>
</kw>
<kw name="${scsi_id} = 5" type="foritem">
<kw name="Delete SCSI ID ${scsi_id} from Linux" library="linux_scsi_utils">
<doc>Remove a SCSI ID from Linux. Basically, will un-do the Scan action</doc>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>sudo bash -c "echo 1 &gt; /sys/class/scsi_device/0:0:${scsi_id}:0/device/delete" 2&gt;&amp;1 &gt; /dev/null</arg>
</arguments>
<msg timestamp="20200909 23:03:49.656" level="INFO">Running command 'sudo bash -c "echo 1 &gt; /sys/class/scsi_device/0:0:5:0/device/delete" 2&gt;&amp;1 &gt; /dev/null'.</msg>
<status status="PASS" starttime="20200909 23:03:49.654" endtime="20200909 23:03:49.666"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:49.653" endtime="20200909 23:03:49.667"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:49.653" endtime="20200909 23:03:49.667"></status>
</kw>
<kw name="${scsi_id} = 6" type="foritem">
<kw name="Delete SCSI ID ${scsi_id} from Linux" library="linux_scsi_utils">
<doc>Remove a SCSI ID from Linux. Basically, will un-do the Scan action</doc>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>sudo bash -c "echo 1 &gt; /sys/class/scsi_device/0:0:${scsi_id}:0/device/delete" 2&gt;&amp;1 &gt; /dev/null</arg>
</arguments>
<msg timestamp="20200909 23:03:49.671" level="INFO">Running command 'sudo bash -c "echo 1 &gt; /sys/class/scsi_device/0:0:6:0/device/delete" 2&gt;&amp;1 &gt; /dev/null'.</msg>
<status status="PASS" starttime="20200909 23:03:49.669" endtime="20200909 23:03:49.682"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:49.667" endtime="20200909 23:03:49.683"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:49.667" endtime="20200909 23:03:49.683"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:49.573" endtime="20200909 23:03:49.683"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:49.572" endtime="20200909 23:03:49.683"></status>
</kw>
<kw name="Close All Connections" library="SSHLibrary">
<doc>Closes all open connections.</doc>
<status status="PASS" starttime="20200909 23:03:49.684" endtime="20200909 23:03:49.685"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:49.071" endtime="20200909 23:03:49.685"></status>
</kw>
<doc>Test that the RaSCSI reports SCSI information correctly.</doc>
<status status="FAIL" starttime="20200909 23:03:12.596" endtime="20200909 23:03:49.685"></status>
</suite>
<suite id="s1-s3" name="Rascsi Service" source="/home/akuker/RASCSI/test/robot/rascsi_service.robot">
<kw name="Open Connection to Rascsi and Log In" library="rascsi_utils" type="setup">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${Rascsi_Host}</arg>
</arguments>
<status status="PASS" starttime="20200909 23:03:49.699" endtime="20200909 23:03:49.699"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given ``username`` and ``password``.</doc>
<arguments>
<arg>${Rascsi_Username}</arg>
<arg>${Rascsi_Password}</arg>
</arguments>
<msg timestamp="20200909 23:03:49.700" level="INFO">Logging into 'rascsi.local:22' as 'pi'.</msg>
<msg timestamp="20200909 23:03:51.177" level="INFO">Read output: Linux rascsi 4.19.118-v7+ #1311 SMP Mon Apr 27 14:21:24 BST 2020 armv7l

The programs included with the Debian GNU/Linux system are free software;
the exact distribution terms for each program are described in the
individual files in /usr/share/doc/*/copyright.

Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent
permitted by applicable law.
Last login: Wed Sep  9 23:03:14 2020 from 192.168.68.156

SSH is enabled and the default password for the 'pi' user has not been changed.
This is a security risk - please login as the 'pi' user and type 'passwd' to set a new password.


Wi-Fi is currently blocked by rfkill.
Use raspi-config to set the country before use.

pi@rascsi:~$</msg>
<status status="PASS" starttime="20200909 23:03:49.699" endtime="20200909 23:03:51.177"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:49.698" endtime="20200909 23:03:51.178"></status>
</kw>
<test id="s1-s3-t1" name="RaSCSI Service Can be Started as a Service">
<kw name="When The Rascsi Service is Started" library="linux_services">
<kw name="Convert To Lower Case" library="String">
<doc>Converts string to lower case.</doc>
<arguments>
<arg>${service_name}</arg>
</arguments>
<assign>
<var>${lc_service_name}</var>
</assign>
<msg timestamp="20200909 23:03:51.180" level="INFO">${lc_service_name} = rascsi</msg>
<status status="PASS" starttime="20200909 23:03:51.180" endtime="20200909 23:03:51.180"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>systemctl start ${lc_service_name}</arg>
<arg>sudo=True</arg>
<arg>sudo_password=${Rascsi_Password}</arg>
</arguments>
<msg timestamp="20200909 23:03:51.181" level="INFO">Executing command 'sudo systemctl start rascsi'.</msg>
<msg timestamp="20200909 23:03:51.445" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" starttime="20200909 23:03:51.181" endtime="20200909 23:03:51.445"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:51.179" endtime="20200909 23:03:51.446"></status>
</kw>
<kw name="Then The RaSCSI Service Should be Running" library="linux_services">
<kw name="Convert To Lower Case" library="String">
<doc>Converts string to lower case.</doc>
<arguments>
<arg>${service_name}</arg>
</arguments>
<assign>
<var>${lc_service_name}</var>
</assign>
<msg timestamp="20200909 23:03:51.447" level="INFO">${lc_service_name} = rascsi</msg>
<status status="PASS" starttime="20200909 23:03:51.447" endtime="20200909 23:03:51.448"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>systemctl status ${lc_service_name}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20200909 23:03:51.448" level="INFO">Executing command 'systemctl status rascsi'.</msg>
<msg timestamp="20200909 23:03:51.520" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20200909 23:03:51.520" level="INFO">${output} = ‚óè rascsi.service - RaSCSI service
   Loaded: loaded (/etc/systemd/system/rascsi.service; enabled; vendor preset: enabled)
   Active: active (running) since Wed 2020-09-09 22:58:23 CDT; 5min ago
 Main ...</msg>
<status status="PASS" starttime="20200909 23:03:51.448" endtime="20200909 23:03:51.520"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>Active: active (running)</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" starttime="20200909 23:03:51.520" endtime="20200909 23:03:51.521"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:51.446" endtime="20200909 23:03:51.521"></status>
</kw>
<doc>Start the Rascsi service and make sure it stays running</doc>
<status status="PASS" starttime="20200909 23:03:51.178" endtime="20200909 23:03:51.522" critical="yes"></status>
</test>
<test id="s1-s3-t2" name="RaSCSI Service Can be Stopped as a Service">
<kw name="When the Rascsi Service is Stopped" library="linux_services">
<kw name="Convert To Lower Case" library="String">
<doc>Converts string to lower case.</doc>
<arguments>
<arg>${service_name}</arg>
</arguments>
<assign>
<var>${lc_service_name}</var>
</assign>
<msg timestamp="20200909 23:03:51.525" level="INFO">${lc_service_name} = rascsi</msg>
<status status="PASS" starttime="20200909 23:03:51.524" endtime="20200909 23:03:51.525"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>systemctl stop ${lc_service_name}</arg>
<arg>sudo=True</arg>
<arg>sudo_password=${Rascsi_Password}</arg>
</arguments>
<msg timestamp="20200909 23:03:51.526" level="INFO">Executing command 'sudo systemctl stop rascsi'.</msg>
<msg timestamp="20200909 23:03:51.771" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" starttime="20200909 23:03:51.525" endtime="20200909 23:03:51.771"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:51.524" endtime="20200909 23:03:51.771"></status>
</kw>
<kw name="Then the RaSCSI Service should be Stopped" library="linux_services">
<kw name="Convert To Lower Case" library="String">
<doc>Converts string to lower case.</doc>
<arguments>
<arg>${service_name}</arg>
</arguments>
<assign>
<var>${lc_service_name}</var>
</assign>
<msg timestamp="20200909 23:03:51.773" level="INFO">${lc_service_name} = rascsi</msg>
<status status="PASS" starttime="20200909 23:03:51.773" endtime="20200909 23:03:51.773"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>systemctl status ${lc_service_name}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20200909 23:03:51.774" level="INFO">Executing command 'systemctl status rascsi'.</msg>
<msg timestamp="20200909 23:03:51.850" level="INFO">Command exited with return code 3.</msg>
<msg timestamp="20200909 23:03:51.850" level="INFO">${output} = ‚óè rascsi.service - RaSCSI service
   Loaded: loaded (/etc/systemd/system/rascsi.service; enabled; vendor preset: enabled)
   Active: failed (Result: exit-code) since Wed 2020-09-09 23:03:51 CDT; 128ms...</msg>
<status status="PASS" starttime="20200909 23:03:51.773" endtime="20200909 23:03:51.850"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>Active: failed</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" starttime="20200909 23:03:51.851" endtime="20200909 23:03:51.851"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:51.772" endtime="20200909 23:03:51.851"></status>
</kw>
<doc>Stop the Rascsi service and make sure it stays stopped</doc>
<status status="PASS" starttime="20200909 23:03:51.522" endtime="20200909 23:03:51.852" critical="yes"></status>
</test>
<test id="s1-s3-t3" name="RaSCSI Service Can be Restarted as a Service">
<kw name="Given The RaSCSI Service is Started" library="linux_services">
<kw name="Convert To Lower Case" library="String">
<doc>Converts string to lower case.</doc>
<arguments>
<arg>${service_name}</arg>
</arguments>
<assign>
<var>${lc_service_name}</var>
</assign>
<msg timestamp="20200909 23:03:51.856" level="INFO">${lc_service_name} = rascsi</msg>
<status status="PASS" starttime="20200909 23:03:51.856" endtime="20200909 23:03:51.856"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>systemctl start ${lc_service_name}</arg>
<arg>sudo=True</arg>
<arg>sudo_password=${Rascsi_Password}</arg>
</arguments>
<msg timestamp="20200909 23:03:51.857" level="INFO">Executing command 'sudo systemctl start rascsi'.</msg>
<msg timestamp="20200909 23:03:52.121" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" starttime="20200909 23:03:51.856" endtime="20200909 23:03:52.121"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:51.854" endtime="20200909 23:03:52.122"></status>
</kw>
<kw name="When The Rascsi Service is Restarted" library="linux_services">
<kw name="Convert To Lower Case" library="String">
<doc>Converts string to lower case.</doc>
<arguments>
<arg>${service_name}</arg>
</arguments>
<assign>
<var>${lc_service_name}</var>
</assign>
<msg timestamp="20200909 23:03:52.123" level="INFO">${lc_service_name} = rascsi</msg>
<status status="PASS" starttime="20200909 23:03:52.123" endtime="20200909 23:03:52.123"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>systemctl restart ${lc_service_name}</arg>
<arg>sudo=True</arg>
<arg>sudo_password=${Rascsi_Password}</arg>
</arguments>
<msg timestamp="20200909 23:03:52.124" level="INFO">Executing command 'sudo systemctl restart rascsi'.</msg>
<msg timestamp="20200909 23:03:52.420" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" starttime="20200909 23:03:52.124" endtime="20200909 23:03:52.420"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:52.122" endtime="20200909 23:03:52.420"></status>
</kw>
<kw name="Then the Rascsi Service should be Running" library="linux_services">
<kw name="Convert To Lower Case" library="String">
<doc>Converts string to lower case.</doc>
<arguments>
<arg>${service_name}</arg>
</arguments>
<assign>
<var>${lc_service_name}</var>
</assign>
<msg timestamp="20200909 23:03:52.422" level="INFO">${lc_service_name} = rascsi</msg>
<status status="PASS" starttime="20200909 23:03:52.421" endtime="20200909 23:03:52.422"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>systemctl status ${lc_service_name}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20200909 23:03:52.422" level="INFO">Executing command 'systemctl status rascsi'.</msg>
<msg timestamp="20200909 23:03:52.490" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20200909 23:03:52.490" level="INFO">${output} = ‚óè rascsi.service - RaSCSI service
   Loaded: loaded (/etc/systemd/system/rascsi.service; enabled; vendor preset: enabled)
   Active: active (running) since Wed 2020-09-09 23:03:52 CDT; 120ms ago
 Main...</msg>
<status status="PASS" starttime="20200909 23:03:52.422" endtime="20200909 23:03:52.490"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>Active: active (running)</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" starttime="20200909 23:03:52.490" endtime="20200909 23:03:52.491"></status>
</kw>
<status status="PASS" starttime="20200909 23:03:52.421" endtime="20200909 23:03:52.491"></status>
</kw>
<doc>Restart the Rascsi service and make sure it stays running</doc>
<status status="PASS" starttime="20200909 23:03:51.853" endtime="20200909 23:03:52.492" critical="yes"></status>
</test>
<kw name="Close All Connections" library="SSHLibrary" type="teardown">
<doc>Closes all open connections.</doc>
<status status="PASS" starttime="20200909 23:03:52.493" endtime="20200909 23:03:52.494"></status>
</kw>
<doc>Test that the RaSCSI service can be started and stopped.</doc>
<status status="PASS" starttime="20200909 23:03:49.691" endtime="20200909 23:03:52.494"></status>
</suite>
<status status="FAIL" starttime="20200909 22:59:53.700" endtime="20200909 23:03:52.499"></status>
</suite>
<statistics>
<total>
<stat pass="12" fail="1">Critical Tests</stat>
<stat pass="12" fail="1">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat pass="12" fail="1" id="s1" name="Robot">Robot</stat>
<stat pass="4" fail="0" id="s1-s1" name="Rascsi Cd-Rom Functionality">Robot.Rascsi Cd-Rom Functionality</stat>
<stat pass="5" fail="1" id="s1-s2" name="Rascsi Device Information">Robot.Rascsi Device Information</stat>
<stat pass="3" fail="0" id="s1-s3" name="Rascsi Service">Robot.Rascsi Service</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
